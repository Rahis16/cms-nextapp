{
    "sourceFile": "context/messageContext.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1749112565930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749112574145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n // context/NotificationContext.tsx\r\n \"use client\";\r\n \r\n import { createContext, useContext, useState } from \"react\";\r\n-import Notification from \"@/components/Notification\";\r\n+import Notification from \"@/components/messageBox\";\r\n \r\n type NotificationType = \"success\" | \"error\";\r\n type NotificationContextType = {\r\n   showNotification: (type: NotificationType, message: string) => void;\r\n"
                },
                {
                    "date": 1749112580747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-// context/NotificationContext.tsx\r\n+// context/messageContext.tsx\r\n \"use client\";\r\n \r\n import { createContext, useContext, useState } from \"react\";\r\n import Notification from \"@/components/messageBox\";\r\n"
                },
                {
                    "date": 1749113246889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,37 @@\n+// context/messageContext.tsx\r\n+\"use client\";\r\n+\r\n+import { createContext, useContext, useState } from \"react\";\r\n+import Notification from \"@/components/messageBox\";\r\n+\r\n+type NotificationType = \"success\" | \"error\";\r\n+type NotificationContextType = {\r\n+  showNotification: (type: NotificationType, message: string) => void;\r\n+};\r\n+\r\n+const NotificationContext = createContext<NotificationContextType>({\r\n+  showNotification: () => {},\r\n+});\r\n+\r\n+export const useNotification = () => useContext(NotificationContext);\r\n+\r\n+export const NotificationProvider = ({ children2 }: { children: React.ReactNode }) => {\r\n+  const [notification, setNotification] = useState<{ type: NotificationType; message: string } | null>(null);\r\n+\r\n+  const showNotification = (type: NotificationType, message: string) => {\r\n+    setNotification({ type, message });\r\n+  };\r\n+\r\n+  return (\r\n+    <NotificationContext.Provider value={{ showNotification }}>\r\n+      {children}\r\n+      {notification && (\r\n+        <Notification\r\n+          type={notification.type}\r\n+          message={notification.message}\r\n+          onClose={() => setNotification(null)}\r\n+        />\r\n+      )}\r\n+    </NotificationContext.Provider>\r\n+  );\r\n+};\r\n"
                },
                {
                    "date": 1749113252844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n   };\r\n \r\n   return (\r\n     <NotificationContext.Provider value={{ showNotification }}>\r\n-      {children}\r\n+      {children2}\r\n       {notification && (\r\n         <Notification\r\n           type={notification.type}\r\n           message={notification.message}\r\n@@ -34,41 +34,4 @@\n       )}\r\n     </NotificationContext.Provider>\r\n   );\r\n };\r\n-// context/messageContext.tsx\r\n-\"use client\";\r\n-\r\n-import { createContext, useContext, useState } from \"react\";\r\n-import Notification from \"@/components/messageBox\";\r\n-\r\n-type NotificationType = \"success\" | \"error\";\r\n-type NotificationContextType = {\r\n-  showNotification: (type: NotificationType, message: string) => void;\r\n-};\r\n-\r\n-const NotificationContext = createContext<NotificationContextType>({\r\n-  showNotification: () => {},\r\n-});\r\n-\r\n-export const useNotification = () => useContext(NotificationContext);\r\n-\r\n-export const NotificationProvider = ({ children }: { children: React.ReactNode }) => {\r\n-  const [notification, setNotification] = useState<{ type: NotificationType; message: string } | null>(null);\r\n-\r\n-  const showNotification = (type: NotificationType, message: string) => {\r\n-    setNotification({ type, message });\r\n-  };\r\n-\r\n-  return (\r\n-    <NotificationContext.Provider value={{ showNotification }}>\r\n-      {children}\r\n-      {notification && (\r\n-        <Notification\r\n-          type={notification.type}\r\n-          message={notification.message}\r\n-          onClose={() => setNotification(null)}\r\n-        />\r\n-      )}\r\n-    </NotificationContext.Provider>\r\n-  );\r\n-};\r\n"
                },
                {
                    "date": 1749113264614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,18 +14,18 @@\n });\r\n \r\n export const useNotification = () => useContext(NotificationContext);\r\n \r\n-export const NotificationProvider = ({ children2 }: { children: React.ReactNode }) => {\r\n+export const NotificationProvider = ({ children }: { children: React.ReactNode }) => {\r\n   const [notification, setNotification] = useState<{ type: NotificationType; message: string } | null>(null);\r\n \r\n   const showNotification = (type: NotificationType, message: string) => {\r\n     setNotification({ type, message });\r\n   };\r\n \r\n   return (\r\n     <NotificationContext.Provider value={{ showNotification }}>\r\n-      {children2}\r\n+      {children}\r\n       {notification && (\r\n         <Notification\r\n           type={notification.type}\r\n           message={notification.message}\r\n"
                }
            ],
            "date": 1749112565930,
            "name": "Commit-0",
            "content": "// context/NotificationContext.tsx\r\n\"use client\";\r\n\r\nimport { createContext, useContext, useState } from \"react\";\r\nimport Notification from \"@/components/Notification\";\r\n\r\ntype NotificationType = \"success\" | \"error\";\r\ntype NotificationContextType = {\r\n  showNotification: (type: NotificationType, message: string) => void;\r\n};\r\n\r\nconst NotificationContext = createContext<NotificationContextType>({\r\n  showNotification: () => {},\r\n});\r\n\r\nexport const useNotification = () => useContext(NotificationContext);\r\n\r\nexport const NotificationProvider = ({ children }: { children: React.ReactNode }) => {\r\n  const [notification, setNotification] = useState<{ type: NotificationType; message: string } | null>(null);\r\n\r\n  const showNotification = (type: NotificationType, message: string) => {\r\n    setNotification({ type, message });\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider value={{ showNotification }}>\r\n      {children}\r\n      {notification && (\r\n        <Notification\r\n          type={notification.type}\r\n          message={notification.message}\r\n          onClose={() => setNotification(null)}\r\n        />\r\n      )}\r\n    </NotificationContext.Provider>\r\n  );\r\n};\r\n"
        }
    ]
}