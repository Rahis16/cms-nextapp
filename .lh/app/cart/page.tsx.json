{
    "sourceFile": "app/cart/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 30,
            "patches": [
                {
                    "date": 1748774659039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748774872016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,149 @@\n+'use client';\r\n+\r\n+import { useState, useEffect } from 'react';\r\n+import { FaPlus, FaMinus, FaTrash } from 'react-icons/fa';\r\n+import CartSkeleton from '@/components/CartSkeleton';\r\n+\r\n+type CartItem = {\r\n+  id: number;\r\n+  name: string;\r\n+  price: number;\r\n+  quantity: number;\r\n+  imageSrc: string;\r\n+};\r\n+\r\n+export default function CartPage() {\r\n+  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n+  const [loading, setLoading] = useState(true);\r\n+\r\n+  // Simulate data fetching delay\r\n+  useEffect(() => {\r\n+    const timer = setTimeout(() => {\r\n+      setCartItems([\r\n+        {\r\n+          id: 1,\r\n+          name: 'Margherita Pizza',\r\n+          price: 299,\r\n+          quantity: 1,\r\n+          imageSrc: '/images/pizza.jpg',\r\n+        },\r\n+        {\r\n+          id: 2,\r\n+          name: 'Cheeseburger',\r\n+          price: 199,\r\n+          quantity: 2,\r\n+          imageSrc: '/images/burger.jpg',\r\n+        },\r\n+        {\r\n+          id: 3,\r\n+          name: 'Penne Alfredo',\r\n+          price: 249,\r\n+          quantity: 1,\r\n+          imageSrc: '/images/pasta.jpg',\r\n+        },\r\n+      ]);\r\n+      setLoading(false);\r\n+    }, 1500);\r\n+\r\n+    return () => clearTimeout(timer);\r\n+  }, []);\r\n+\r\n+  const increaseQty = (id: number) => {\r\n+    setCartItems((items) =>\r\n+      items.map((item) =>\r\n+        item.id === id ? { ...item, quantity: item.quantity + 1 } : item\r\n+      )\r\n+    );\r\n+  };\r\n+\r\n+  const decreaseQty = (id: number) => {\r\n+    setCartItems((items) =>\r\n+      items\r\n+        .map((item) =>\r\n+          item.id === id\r\n+            ? { ...item, quantity: Math.max(1, item.quantity - 1) }\r\n+            : item\r\n+        )\r\n+        .filter((item) => item.quantity > 0)\r\n+    );\r\n+  };\r\n+\r\n+  const removeItem = (id: number) => {\r\n+    setCartItems((items) => items.filter((item) => item.id !== id));\r\n+  };\r\n+\r\n+  const totalPrice = cartItems.reduce(\r\n+    (acc, item) => acc + item.price * item.quantity,\r\n+    0\r\n+  );\r\n+\r\n+  return (\r\n+    <div className=\"max-w-4xl mx-auto p-6\">\r\n+      <h1 className=\"text-3xl font-semibold mb-6 text-blue-700\">Your Cart</h1>\r\n+\r\n+      {loading ? (\r\n+        <CartSkeleton />\r\n+      ) : cartItems.length === 0 ? (\r\n+        <p className=\"text-gray-600 text-center\">Your cart is empty.</p>\r\n+      ) : (\r\n+        <div className=\"space-y-6\">\r\n+          {cartItems.map((item) => (\r\n+            <div\r\n+              key={item.id}\r\n+              className=\"flex items-center gap-4 p-4 border rounded shadow-sm\"\r\n+            >\r\n+              <img\r\n+                src={item.imageSrc}\r\n+                alt={item.name}\r\n+                className=\"w-20 h-20 object-cover rounded\"\r\n+              />\r\n+              <div className=\"flex-1\">\r\n+                <h2 className=\"font-semibold text-lg\">{item.name}</h2>\r\n+                <p className=\"text-gray-500\">₹{item.price}</p>\r\n+                <div className=\"flex items-center mt-2 space-x-2\">\r\n+                  <button\r\n+                    onClick={() => decreaseQty(item.id)}\r\n+                    className=\"p-1 rounded border hover:bg-gray-200 transition\"\r\n+                    aria-label=\"Decrease quantity\"\r\n+                  >\r\n+                    <FaMinus />\r\n+                  </button>\r\n+                  <span className=\"px-3\">{item.quantity}</span>\r\n+                  <button\r\n+                    onClick={() => increaseQty(item.id)}\r\n+                    className=\"p-1 rounded border hover:bg-gray-200 transition\"\r\n+                    aria-label=\"Increase quantity\"\r\n+                  >\r\n+                    <FaPlus />\r\n+                  </button>\r\n+                </div>\r\n+              </div>\r\n+              <div className=\"flex flex-col items-end space-y-2\">\r\n+                <p className=\"font-semibold text-lg\">\r\n+                  ₹{item.price * item.quantity}\r\n+                </p>\r\n+                <button\r\n+                  onClick={() => removeItem(item.id)}\r\n+                  className=\"text-red-500 hover:text-red-700 transition\"\r\n+                  aria-label=\"Remove item\"\r\n+                >\r\n+                  <FaTrash />\r\n+                </button>\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+\r\n+          <div className=\"text-right mt-6\">\r\n+            <p className=\"text-xl font-bold\">Total: ₹{totalPrice}</p>\r\n+            <button\r\n+              disabled={cartItems.length === 0}\r\n+              className=\"mt-3 bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700 transition disabled:opacity-50\"\r\n+            >\r\n+              Proceed to Checkout\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1748774938426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n         <div className=\"space-y-6\">\r\n           {cartItems.map((item) => (\r\n             <div\r\n               key={item.id}\r\n-              className=\"flex items-center gap-4 p-4 border rounded shadow-sm\"\r\n+              className=\"flex items-center gap-4 p-4  rounded shadow-sm\"\r\n             >\r\n               <img\r\n                 src={item.imageSrc}\r\n                 alt={item.name}\r\n"
                },
                {
                    "date": 1748774983371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,149 @@\n+'use client';\r\n+\r\n+import { useState, useEffect } from 'react';\r\n+import { FaPlus, FaMinus, FaTrash } from 'react-icons/fa';\r\n+import CartSkeleton from '@/components/CartSkeleton';\r\n+\r\n+type CartItem = {\r\n+  id: number;\r\n+  name: string;\r\n+  price: number;\r\n+  quantity: number;\r\n+  imageSrc: string;\r\n+};\r\n+\r\n+export default function CartPage() {\r\n+  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n+  const [loading, setLoading] = useState(true);\r\n+\r\n+  // Simulate data fetching delay\r\n+  useEffect(() => {\r\n+    const timer = setTimeout(() => {\r\n+      setCartItems([\r\n+        {\r\n+          id: 1,\r\n+          name: 'Margherita Pizza',\r\n+          price: 299,\r\n+          quantity: 1,\r\n+          imageSrc: '/images/pizza.jpg',\r\n+        },\r\n+        {\r\n+          id: 2,\r\n+          name: 'Cheeseburger',\r\n+          price: 199,\r\n+          quantity: 2,\r\n+          imageSrc: '/images/burger.jpg',\r\n+        },\r\n+        {\r\n+          id: 3,\r\n+          name: 'Penne Alfredo',\r\n+          price: 249,\r\n+          quantity: 1,\r\n+          imageSrc: '/images/pasta.jpg',\r\n+        },\r\n+      ]);\r\n+      setLoading(false);\r\n+    }, 1000);\r\n+\r\n+    return () => clearTimeout(timer);\r\n+  }, []);\r\n+\r\n+  const increaseQty = (id: number) => {\r\n+    setCartItems((items) =>\r\n+      items.map((item) =>\r\n+        item.id === id ? { ...item, quantity: item.quantity + 1 } : item\r\n+      )\r\n+    );\r\n+  };\r\n+\r\n+  const decreaseQty = (id: number) => {\r\n+    setCartItems((items) =>\r\n+      items\r\n+        .map((item) =>\r\n+          item.id === id\r\n+            ? { ...item, quantity: Math.max(1, item.quantity - 1) }\r\n+            : item\r\n+        )\r\n+        .filter((item) => item.quantity > 0)\r\n+    );\r\n+  };\r\n+\r\n+  const removeItem = (id: number) => {\r\n+    setCartItems((items) => items.filter((item) => item.id !== id));\r\n+  };\r\n+\r\n+  const totalPrice = cartItems.reduce(\r\n+    (acc, item) => acc + item.price * item.quantity,\r\n+    0\r\n+  );\r\n+\r\n+  return (\r\n+    <div className=\"max-w-4xl mx-auto p-6\">\r\n+      <h1 className=\"text-3xl font-semibold mb-6 text-blue-700\">Your Cart</h1>\r\n+\r\n+      {loading ? (\r\n+        <CartSkeleton />\r\n+      ) : cartItems.length === 0 ? (\r\n+        <p className=\"text-gray-600 text-center\">Your cart is empty.</p>\r\n+      ) : (\r\n+        <div className=\"space-y-6\">\r\n+          {cartItems.map((item) => (\r\n+            <div\r\n+              key={item.id}\r\n+              className=\"flex items-center gap-4 p-4 rounded shadow-sm\"\r\n+            >\r\n+              <img\r\n+                src={item.imageSrc}\r\n+                alt={item.name}\r\n+                className=\"w-20 h-20 object-cover rounded\"\r\n+              />\r\n+              <div className=\"flex-1\">\r\n+                <h2 className=\"font-semibold text-lg\">{item.name}</h2>\r\n+                <p className=\"text-gray-500\">₹{item.price}</p>\r\n+                <div className=\"flex items-center mt-2 space-x-2\">\r\n+                  <button\r\n+                    onClick={() => decreaseQty(item.id)}\r\n+                    className=\"p-1 rounded border hover:bg-gray-200 transition\"\r\n+                    aria-label=\"Decrease quantity\"\r\n+                  >\r\n+                    <FaMinus />\r\n+                  </button>\r\n+                  <span className=\"px-3\">{item.quantity}</span>\r\n+                  <button\r\n+                    onClick={() => increaseQty(item.id)}\r\n+                    className=\"p-1 rounded border hover:bg-gray-200 transition\"\r\n+                    aria-label=\"Increase quantity\"\r\n+                  >\r\n+                    <FaPlus />\r\n+                  </button>\r\n+                </div>\r\n+              </div>\r\n+              <div className=\"flex flex-col items-end space-y-2\">\r\n+                <p className=\"font-semibold text-lg\">\r\n+                  ₹{item.price * item.quantity}\r\n+                </p>\r\n+                <button\r\n+                  onClick={() => removeItem(item.id)}\r\n+                  className=\"text-red-500 hover:text-red-700 transition\"\r\n+                  aria-label=\"Remove item\"\r\n+                >\r\n+                  <FaTrash />\r\n+                </button>\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+\r\n+          <div className=\"text-right mt-6\">\r\n+            <p className=\"text-xl font-bold\">Total: ₹{totalPrice}</p>\r\n+            <button\r\n+              disabled={cartItems.length === 0}\r\n+              className=\"mt-3 bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700 transition disabled:opacity-50\"\r\n+            >\r\n+              Proceed to Checkout\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1748784278742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,149 @@\n+'use client';\r\n+\r\n+import { useState, useEffect } from 'react';\r\n+import { FaPlus, FaMinus, FaTrash } from 'react-icons/fa';\r\n+import CartSkeleton from '@/components/CartSkeleton';\r\n+\r\n+type CartItem = {\r\n+  id: number;\r\n+  name: string;\r\n+  price: number;\r\n+  quantity: number;\r\n+  imageSrc: string;\r\n+};\r\n+\r\n+export default function CartPage() {\r\n+  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n+  const [loading, setLoading] = useState(true);\r\n+\r\n+  // Simulate data fetching delay\r\n+  useEffect(() => {\r\n+    const timer = setTimeout(() => {\r\n+      setCartItems([\r\n+        {\r\n+          id: 1,\r\n+          name: 'Margherita Pizza',\r\n+          price: 299,\r\n+          quantity: 1,\r\n+          imageSrc: '/images/pizza.jpg',\r\n+        },\r\n+        {\r\n+          id: 2,\r\n+          name: 'Cheeseburger',\r\n+          price: 199,\r\n+          quantity: 2,\r\n+          imageSrc: '/images/burger.jpg',\r\n+        },\r\n+        {\r\n+          id: 3,\r\n+          name: 'Penne Alfredo',\r\n+          price: 249,\r\n+          quantity: 1,\r\n+          imageSrc: '/images/pasta.jpg',\r\n+        },\r\n+      ]);\r\n+      setLoading(false);\r\n+    }, 1000);\r\n+\r\n+    return () => clearTimeout(timer);\r\n+  }, []);\r\n+\r\n+  const increaseQty = (id: number) => {\r\n+    setCartItems((items) =>\r\n+      items.map((item) =>\r\n+        item.id === id ? { ...item, quantity: item.quantity + 1 } : item\r\n+      )\r\n+    );\r\n+  };\r\n+\r\n+  const decreaseQty = (id: number) => {\r\n+    setCartItems((items) =>\r\n+      items\r\n+        .map((item) =>\r\n+          item.id === id\r\n+            ? { ...item, quantity: Math.max(1, item.quantity - 1) }\r\n+            : item\r\n+        )\r\n+        .filter((item) => item.quantity > 0)\r\n+    );\r\n+  };\r\n+\r\n+  const removeItem = (id: number) => {\r\n+    setCartItems((items) => items.filter((item) => item.id !== id));\r\n+  };\r\n+\r\n+  const totalPrice = cartItems.reduce(\r\n+    (acc, item) => acc + item.price * item.quantity,\r\n+    0\r\n+  );\r\n+\r\n+  return (\r\n+    <div className=\"max-w-4xl mx-auto p-2\">\r\n+      <h1 className=\"text-3xl font-semibold mb-6 text-blue-700\">Your Cart</h1>\r\n+\r\n+      {loading ? (\r\n+        <CartSkeleton />\r\n+      ) : cartItems.length === 0 ? (\r\n+        <p className=\"text-gray-600 text-center\">Your cart is empty.</p>\r\n+      ) : (\r\n+        <div className=\"space-y-6\">\r\n+          {cartItems.map((item) => (\r\n+            <div\r\n+              key={item.id}\r\n+              className=\"flex items-center gap-4 p-4 rounded shadow-sm\"\r\n+            >\r\n+              <img\r\n+                src={item.imageSrc}\r\n+                alt={item.name}\r\n+                className=\"w-20 h-20 object-cover rounded\"\r\n+              />\r\n+              <div className=\"flex-1\">\r\n+                <h2 className=\"font-semibold text-lg\">{item.name}</h2>\r\n+                <p className=\"text-gray-500\">₹{item.price}</p>\r\n+                <div className=\"flex items-center mt-2 space-x-2\">\r\n+                  <button\r\n+                    onClick={() => decreaseQty(item.id)}\r\n+                    className=\"p-1 rounded border hover:bg-gray-200 transition\"\r\n+                    aria-label=\"Decrease quantity\"\r\n+                  >\r\n+                    <FaMinus />\r\n+                  </button>\r\n+                  <span className=\"px-3\">{item.quantity}</span>\r\n+                  <button\r\n+                    onClick={() => increaseQty(item.id)}\r\n+                    className=\"p-1 rounded border hover:bg-gray-200 transition\"\r\n+                    aria-label=\"Increase quantity\"\r\n+                  >\r\n+                    <FaPlus />\r\n+                  </button>\r\n+                </div>\r\n+              </div>\r\n+              <div className=\"flex flex-col items-end space-y-2\">\r\n+                <p className=\"font-semibold text-lg\">\r\n+                  ₹{item.price * item.quantity}\r\n+                </p>\r\n+                <button\r\n+                  onClick={() => removeItem(item.id)}\r\n+                  className=\"text-red-500 hover:text-red-700 transition\"\r\n+                  aria-label=\"Remove item\"\r\n+                >\r\n+                  <FaTrash />\r\n+                </button>\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+\r\n+          <div className=\"text-right mt-6\">\r\n+            <p className=\"text-xl font-bold\">Total: ₹{totalPrice}</p>\r\n+            <button\r\n+              disabled={cartItems.length === 0}\r\n+              className=\"mt-3 bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700 transition disabled:opacity-50\"\r\n+            >\r\n+              Proceed to Checkout\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1748784362814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,8 @@\n export default function CartPage() {\r\n   const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n   const [loading, setLoading] = useState(true);\r\n \r\n-  // Simulate data fetching delay\r\n   useEffect(() => {\r\n     const timer = setTimeout(() => {\r\n       setCartItems([\r\n         {\r\n@@ -77,366 +76,74 @@\n     0\r\n   );\r\n \r\n   return (\r\n-    <div className=\"max-w-4xl mx-auto p-2\">\r\n-      <h1 className=\"text-3xl font-semibold mb-6 text-blue-700\">Your Cart</h1>\r\n+    <div className=\"max-w-5xl mx-auto p-4 sm:p-6 lg:p-8\">\r\n+      <h1 className=\"text-2xl sm:text-3xl font-bold mb-6 text-blue-700\">Your Cart</h1>\r\n \r\n       {loading ? (\r\n         <CartSkeleton />\r\n       ) : cartItems.length === 0 ? (\r\n-        <p className=\"text-gray-600 text-center\">Your cart is empty.</p>\r\n+        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n       ) : (\r\n         <div className=\"space-y-6\">\r\n           {cartItems.map((item) => (\r\n             <div\r\n               key={item.id}\r\n-              className=\"flex items-center gap-4 p-4 rounded shadow-sm\"\r\n+              className=\"flex flex-col sm:flex-row sm:items-center gap-4 p-4 rounded-lg shadow-md bg-white\"\r\n             >\r\n               <img\r\n                 src={item.imageSrc}\r\n                 alt={item.name}\r\n-                className=\"w-20 h-20 object-cover rounded\"\r\n+                className=\"w-full sm:w-24 h-24 object-cover rounded-md\"\r\n               />\r\n-              <div className=\"flex-1\">\r\n-                <h2 className=\"font-semibold text-lg\">{item.name}</h2>\r\n-                <p className=\"text-gray-500\">₹{item.price}</p>\r\n-                <div className=\"flex items-center mt-2 space-x-2\">\r\n-                  <button\r\n-                    onClick={() => decreaseQty(item.id)}\r\n-                    className=\"p-1 rounded border hover:bg-gray-200 transition\"\r\n-                    aria-label=\"Decrease quantity\"\r\n-                  >\r\n-                    <FaMinus />\r\n-                  </button>\r\n-                  <span className=\"px-3\">{item.quantity}</span>\r\n-                  <button\r\n-                    onClick={() => increaseQty(item.id)}\r\n-                    className=\"p-1 rounded border hover:bg-gray-200 transition\"\r\n-                    aria-label=\"Increase quantity\"\r\n-                  >\r\n-                    <FaPlus />\r\n-                  </button>\r\n-                </div>\r\n-              </div>\r\n-              <div className=\"flex flex-col items-end space-y-2\">\r\n-                <p className=\"font-semibold text-lg\">\r\n-                  ₹{item.price * item.quantity}\r\n-                </p>\r\n-                <button\r\n-                  onClick={() => removeItem(item.id)}\r\n-                  className=\"text-red-500 hover:text-red-700 transition\"\r\n-                  aria-label=\"Remove item\"\r\n-                >\r\n-                  <FaTrash />\r\n-                </button>\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n \r\n-          <div className=\"text-right mt-6\">\r\n-            <p className=\"text-xl font-bold\">Total: ₹{totalPrice}</p>\r\n-            <button\r\n-              disabled={cartItems.length === 0}\r\n-              className=\"mt-3 bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700 transition disabled:opacity-50\"\r\n-            >\r\n-              Proceed to Checkout\r\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n-'use client';\r\n+              <div className=\"flex-1 flex flex-col gap-1\">\r\n+                <h2 className=\"font-semibold text-lg sm:text-xl\">{item.name}</h2>\r\n+                <p className=\"text-gray-600\">₹{item.price}</p>\r\n \r\n-import { useState, useEffect } from 'react';\r\n-import { FaPlus, FaMinus, FaTrash } from 'react-icons/fa';\r\n-import CartSkeleton from '@/components/CartSkeleton';\r\n-\r\n-type CartItem = {\r\n-  id: number;\r\n-  name: string;\r\n-  price: number;\r\n-  quantity: number;\r\n-  imageSrc: string;\r\n-};\r\n-\r\n-export default function CartPage() {\r\n-  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n-  const [loading, setLoading] = useState(true);\r\n-\r\n-  // Simulate data fetching delay\r\n-  useEffect(() => {\r\n-    const timer = setTimeout(() => {\r\n-      setCartItems([\r\n-        {\r\n-          id: 1,\r\n-          name: 'Margherita Pizza',\r\n-          price: 299,\r\n-          quantity: 1,\r\n-          imageSrc: '/images/pizza.jpg',\r\n-        },\r\n-        {\r\n-          id: 2,\r\n-          name: 'Cheeseburger',\r\n-          price: 199,\r\n-          quantity: 2,\r\n-          imageSrc: '/images/burger.jpg',\r\n-        },\r\n-        {\r\n-          id: 3,\r\n-          name: 'Penne Alfredo',\r\n-          price: 249,\r\n-          quantity: 1,\r\n-          imageSrc: '/images/pasta.jpg',\r\n-        },\r\n-      ]);\r\n-      setLoading(false);\r\n-    }, 1000);\r\n-\r\n-    return () => clearTimeout(timer);\r\n-  }, []);\r\n-\r\n-  const increaseQty = (id: number) => {\r\n-    setCartItems((items) =>\r\n-      items.map((item) =>\r\n-        item.id === id ? { ...item, quantity: item.quantity + 1 } : item\r\n-      )\r\n-    );\r\n-  };\r\n-\r\n-  const decreaseQty = (id: number) => {\r\n-    setCartItems((items) =>\r\n-      items\r\n-        .map((item) =>\r\n-          item.id === id\r\n-            ? { ...item, quantity: Math.max(1, item.quantity - 1) }\r\n-            : item\r\n-        )\r\n-        .filter((item) => item.quantity > 0)\r\n-    );\r\n-  };\r\n-\r\n-  const removeItem = (id: number) => {\r\n-    setCartItems((items) => items.filter((item) => item.id !== id));\r\n-  };\r\n-\r\n-  const totalPrice = cartItems.reduce(\r\n-    (acc, item) => acc + item.price * item.quantity,\r\n-    0\r\n-  );\r\n-\r\n-  return (\r\n-    <div className=\"max-w-4xl mx-auto p-6\">\r\n-      <h1 className=\"text-3xl font-semibold mb-6 text-blue-700\">Your Cart</h1>\r\n-\r\n-      {loading ? (\r\n-        <CartSkeleton />\r\n-      ) : cartItems.length === 0 ? (\r\n-        <p className=\"text-gray-600 text-center\">Your cart is empty.</p>\r\n-      ) : (\r\n-        <div className=\"space-y-6\">\r\n-          {cartItems.map((item) => (\r\n-            <div\r\n-              key={item.id}\r\n-              className=\"flex items-center gap-4 p-4 rounded shadow-sm\"\r\n-            >\r\n-              <img\r\n-                src={item.imageSrc}\r\n-                alt={item.name}\r\n-                className=\"w-20 h-20 object-cover rounded\"\r\n-              />\r\n-              <div className=\"flex-1\">\r\n-                <h2 className=\"font-semibold text-lg\">{item.name}</h2>\r\n-                <p className=\"text-gray-500\">₹{item.price}</p>\r\n-                <div className=\"flex items-center mt-2 space-x-2\">\r\n+                <div className=\"flex items-center mt-2 space-x-3\">\r\n                   <button\r\n                     onClick={() => decreaseQty(item.id)}\r\n-                    className=\"p-1 rounded border hover:bg-gray-200 transition\"\r\n+                    className=\"p-2 rounded border hover:bg-gray-200 transition\"\r\n                     aria-label=\"Decrease quantity\"\r\n                   >\r\n                     <FaMinus />\r\n                   </button>\r\n-                  <span className=\"px-3\">{item.quantity}</span>\r\n+                  <span className=\"text-md font-medium\">{item.quantity}</span>\r\n                   <button\r\n                     onClick={() => increaseQty(item.id)}\r\n-                    className=\"p-1 rounded border hover:bg-gray-200 transition\"\r\n+                    className=\"p-2 rounded border hover:bg-gray-200 transition\"\r\n                     aria-label=\"Increase quantity\"\r\n                   >\r\n                     <FaPlus />\r\n                   </button>\r\n                 </div>\r\n               </div>\r\n-              <div className=\"flex flex-col items-end space-y-2\">\r\n-                <p className=\"font-semibold text-lg\">\r\n-                  ₹{item.price * item.quantity}\r\n-                </p>\r\n-                <button\r\n-                  onClick={() => removeItem(item.id)}\r\n-                  className=\"text-red-500 hover:text-red-700 transition\"\r\n-                  aria-label=\"Remove item\"\r\n-                >\r\n-                  <FaTrash />\r\n-                </button>\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n \r\n-          <div className=\"text-right mt-6\">\r\n-            <p className=\"text-xl font-bold\">Total: ₹{totalPrice}</p>\r\n-            <button\r\n-              disabled={cartItems.length === 0}\r\n-              className=\"mt-3 bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700 transition disabled:opacity-50\"\r\n-            >\r\n-              Proceed to Checkout\r\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n-'use client';\r\n-\r\n-import { useState, useEffect } from 'react';\r\n-import { FaPlus, FaMinus, FaTrash } from 'react-icons/fa';\r\n-import CartSkeleton from '@/components/CartSkeleton';\r\n-\r\n-type CartItem = {\r\n-  id: number;\r\n-  name: string;\r\n-  price: number;\r\n-  quantity: number;\r\n-  imageSrc: string;\r\n-};\r\n-\r\n-export default function CartPage() {\r\n-  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n-  const [loading, setLoading] = useState(true);\r\n-\r\n-  // Simulate data fetching delay\r\n-  useEffect(() => {\r\n-    const timer = setTimeout(() => {\r\n-      setCartItems([\r\n-        {\r\n-          id: 1,\r\n-          name: 'Margherita Pizza',\r\n-          price: 299,\r\n-          quantity: 1,\r\n-          imageSrc: '/images/pizza.jpg',\r\n-        },\r\n-        {\r\n-          id: 2,\r\n-          name: 'Cheeseburger',\r\n-          price: 199,\r\n-          quantity: 2,\r\n-          imageSrc: '/images/burger.jpg',\r\n-        },\r\n-        {\r\n-          id: 3,\r\n-          name: 'Penne Alfredo',\r\n-          price: 249,\r\n-          quantity: 1,\r\n-          imageSrc: '/images/pasta.jpg',\r\n-        },\r\n-      ]);\r\n-      setLoading(false);\r\n-    }, 1500);\r\n-\r\n-    return () => clearTimeout(timer);\r\n-  }, []);\r\n-\r\n-  const increaseQty = (id: number) => {\r\n-    setCartItems((items) =>\r\n-      items.map((item) =>\r\n-        item.id === id ? { ...item, quantity: item.quantity + 1 } : item\r\n-      )\r\n-    );\r\n-  };\r\n-\r\n-  const decreaseQty = (id: number) => {\r\n-    setCartItems((items) =>\r\n-      items\r\n-        .map((item) =>\r\n-          item.id === id\r\n-            ? { ...item, quantity: Math.max(1, item.quantity - 1) }\r\n-            : item\r\n-        )\r\n-        .filter((item) => item.quantity > 0)\r\n-    );\r\n-  };\r\n-\r\n-  const removeItem = (id: number) => {\r\n-    setCartItems((items) => items.filter((item) => item.id !== id));\r\n-  };\r\n-\r\n-  const totalPrice = cartItems.reduce(\r\n-    (acc, item) => acc + item.price * item.quantity,\r\n-    0\r\n-  );\r\n-\r\n-  return (\r\n-    <div className=\"max-w-4xl mx-auto p-6\">\r\n-      <h1 className=\"text-3xl font-semibold mb-6 text-blue-700\">Your Cart</h1>\r\n-\r\n-      {loading ? (\r\n-        <CartSkeleton />\r\n-      ) : cartItems.length === 0 ? (\r\n-        <p className=\"text-gray-600 text-center\">Your cart is empty.</p>\r\n-      ) : (\r\n-        <div className=\"space-y-6\">\r\n-          {cartItems.map((item) => (\r\n-            <div\r\n-              key={item.id}\r\n-              className=\"flex items-center gap-4 p-4  rounded shadow-sm\"\r\n-            >\r\n-              <img\r\n-                src={item.imageSrc}\r\n-                alt={item.name}\r\n-                className=\"w-20 h-20 object-cover rounded\"\r\n-              />\r\n-              <div className=\"flex-1\">\r\n-                <h2 className=\"font-semibold text-lg\">{item.name}</h2>\r\n-                <p className=\"text-gray-500\">₹{item.price}</p>\r\n-                <div className=\"flex items-center mt-2 space-x-2\">\r\n-                  <button\r\n-                    onClick={() => decreaseQty(item.id)}\r\n-                    className=\"p-1 rounded border hover:bg-gray-200 transition\"\r\n-                    aria-label=\"Decrease quantity\"\r\n-                  >\r\n-                    <FaMinus />\r\n-                  </button>\r\n-                  <span className=\"px-3\">{item.quantity}</span>\r\n-                  <button\r\n-                    onClick={() => increaseQty(item.id)}\r\n-                    className=\"p-1 rounded border hover:bg-gray-200 transition\"\r\n-                    aria-label=\"Increase quantity\"\r\n-                  >\r\n-                    <FaPlus />\r\n-                  </button>\r\n-                </div>\r\n-              </div>\r\n-              <div className=\"flex flex-col items-end space-y-2\">\r\n+              <div className=\"flex flex-col items-end justify-between\">\r\n                 <p className=\"font-semibold text-lg\">\r\n                   ₹{item.price * item.quantity}\r\n                 </p>\r\n                 <button\r\n                   onClick={() => removeItem(item.id)}\r\n-                  className=\"text-red-500 hover:text-red-700 transition\"\r\n+                  className=\"text-red-500 hover:text-red-700 mt-2 sm:mt-0 transition\"\r\n                   aria-label=\"Remove item\"\r\n                 >\r\n                   <FaTrash />\r\n                 </button>\r\n               </div>\r\n             </div>\r\n           ))}\r\n \r\n-          <div className=\"text-right mt-6\">\r\n-            <p className=\"text-xl font-bold\">Total: ₹{totalPrice}</p>\r\n+          {/* Checkout Section */}\r\n+          <div className=\"text-right mt-8 border-t pt-4\">\r\n+            <p className=\"text-xl sm:text-2xl font-bold text-gray-800\">\r\n+              Total: ₹{totalPrice}\r\n+            </p>\r\n             <button\r\n               disabled={cartItems.length === 0}\r\n-              className=\"mt-3 bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700 transition disabled:opacity-50\"\r\n+              className=\"mt-3 bg-blue-600 text-white px-6 py-3 rounded hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\r\n             >\r\n               Proceed to Checkout\r\n             </button>\r\n           </div>\r\n"
                },
                {
                    "date": 1748790115607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n               </div>\r\n \r\n               <div className=\"flex flex-col items-end justify-between\">\r\n                 <p className=\"font-semibold text-lg\">\r\n-                  ₹{item.price * item.quantity}\r\n+                  Rs{item.price * item.quantity}\r\n                 </p>\r\n                 <button\r\n                   onClick={() => removeItem(item.id)}\r\n                   className=\"text-red-500 hover:text-red-700 mt-2 sm:mt-0 transition\"\r\n"
                },
                {
                    "date": 1748790128133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n               </div>\r\n \r\n               <div className=\"flex flex-col items-end justify-between\">\r\n                 <p className=\"font-semibold text-lg\">\r\n-                  Rs{item.price * item.quantity}\r\n+                  Rs {item.price * item.quantity}\r\n                 </p>\r\n                 <button\r\n                   onClick={() => removeItem(item.id)}\r\n                   className=\"text-red-500 hover:text-red-700 mt-2 sm:mt-0 transition\"\r\n"
                },
                {
                    "date": 1748790137122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,9 +137,9 @@\n \r\n           {/* Checkout Section */}\r\n           <div className=\"text-right mt-8 border-t pt-4\">\r\n             <p className=\"text-xl sm:text-2xl font-bold text-gray-800\">\r\n-              Total: ₹{totalPrice}\r\n+              Total: Rs {totalPrice}\r\n             </p>\r\n             <button\r\n               disabled={cartItems.length === 0}\r\n               className=\"mt-3 bg-blue-600 text-white px-6 py-3 rounded hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\r\n"
                },
                {
                    "date": 1748790170101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n               />\r\n \r\n               <div className=\"flex-1 flex flex-col gap-1\">\r\n                 <h2 className=\"font-semibold text-lg sm:text-xl\">{item.name}</h2>\r\n-                <p className=\"text-gray-600\">₹{item.price}</p>\r\n+                <p className=\"text-gray-600\">Rs {item.price}</p>\r\n \r\n                 <div className=\"flex items-center mt-2 space-x-3\">\r\n                   <button\r\n                     onClick={() => decreaseQty(item.id)}\r\n"
                },
                {
                    "date": 1749070167043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,47 +5,58 @@\n import CartSkeleton from '@/components/CartSkeleton';\r\n \r\n type CartItem = {\r\n   id: number;\r\n-  name: string;\r\n-  price: number;\r\n+  name: string;       // from product_name\r\n+  price: number;      // unit price\r\n   quantity: number;\r\n-  imageSrc: string;\r\n+  imageSrc: string;   // from product_image\r\n+  total_price: number; // quantity * price from backend (optional)\r\n };\r\n \r\n export default function CartPage() {\r\n   const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n   const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState<string | null>(null);\r\n \r\n   useEffect(() => {\r\n-    const timer = setTimeout(() => {\r\n-      setCartItems([\r\n-        {\r\n-          id: 1,\r\n-          name: 'Margherita Pizza',\r\n-          price: 299,\r\n-          quantity: 1,\r\n-          imageSrc: '/images/pizza.jpg',\r\n-        },\r\n-        {\r\n-          id: 2,\r\n-          name: 'Cheeseburger',\r\n-          price: 199,\r\n-          quantity: 2,\r\n-          imageSrc: '/images/burger.jpg',\r\n-        },\r\n-        {\r\n-          id: 3,\r\n-          name: 'Penne Alfredo',\r\n-          price: 249,\r\n-          quantity: 1,\r\n-          imageSrc: '/images/pasta.jpg',\r\n-        },\r\n-      ]);\r\n-      setLoading(false);\r\n-    }, 1000);\r\n+    async function fetchCart() {\r\n+      try {\r\n+        const res = await fetch('/api/cart/items/', {\r\n+          method: 'GET',\r\n+          credentials: 'include', // if using cookies/session auth\r\n+          headers: {\r\n+            'Content-Type': 'application/json',\r\n+            // Add auth token here if you use token-based auth:\r\n+            // 'Authorization': `Bearer ${token}`,\r\n+          },\r\n+        });\r\n \r\n-    return () => clearTimeout(timer);\r\n+        if (!res.ok) {\r\n+          throw new Error(`Failed to fetch cart: ${res.status}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+\r\n+        // Map API fields to your state shape\r\n+        const mappedItems = data.map((item: any) => ({\r\n+          id: item.id,\r\n+          name: item.product_name,\r\n+          price: parseFloat(item.price), \r\n+          quantity: item.quantity,\r\n+          imageSrc: item.product_image,\r\n+          total_price: parseFloat(item.total_price),\r\n+        }));\r\n+\r\n+        setCartItems(mappedItems);\r\n+      } catch (err: any) {\r\n+        setError(err.message || 'Something went wrong');\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    }\r\n+\r\n+    fetchCart();\r\n   }, []);\r\n \r\n   const increaseQty = (id: number) => {\r\n     setCartItems((items) =>\r\n@@ -75,15 +86,20 @@\n     (acc, item) => acc + item.price * item.quantity,\r\n     0\r\n   );\r\n \r\n+  if (loading) return <CartSkeleton />;\r\n+\r\n+  if (error)\r\n+    return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n+\r\n   return (\r\n     <div className=\"max-w-5xl mx-auto p-4 sm:p-6 lg:p-8\">\r\n-      <h1 className=\"text-2xl sm:text-3xl font-bold mb-6 text-blue-700\">Your Cart</h1>\r\n+      <h1 className=\"text-2xl sm:text-3xl font-bold mb-6 text-blue-700\">\r\n+        Your Cart\r\n+      </h1>\r\n \r\n-      {loading ? (\r\n-        <CartSkeleton />\r\n-      ) : cartItems.length === 0 ? (\r\n+      {cartItems.length === 0 ? (\r\n         <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n       ) : (\r\n         <div className=\"space-y-6\">\r\n           {cartItems.map((item) => (\r\n@@ -98,9 +114,9 @@\n               />\r\n \r\n               <div className=\"flex-1 flex flex-col gap-1\">\r\n                 <h2 className=\"font-semibold text-lg sm:text-xl\">{item.name}</h2>\r\n-                <p className=\"text-gray-600\">Rs {item.price}</p>\r\n+                <p className=\"text-gray-600\">Rs {item.price.toFixed(2)}</p>\r\n \r\n                 <div className=\"flex items-center mt-2 space-x-3\">\r\n                   <button\r\n                     onClick={() => decreaseQty(item.id)}\r\n@@ -121,9 +137,9 @@\n               </div>\r\n \r\n               <div className=\"flex flex-col items-end justify-between\">\r\n                 <p className=\"font-semibold text-lg\">\r\n-                  Rs {item.price * item.quantity}\r\n+                  Rs {(item.price * item.quantity).toFixed(2)}\r\n                 </p>\r\n                 <button\r\n                   onClick={() => removeItem(item.id)}\r\n                   className=\"text-red-500 hover:text-red-700 mt-2 sm:mt-0 transition\"\r\n@@ -137,9 +153,9 @@\n \r\n           {/* Checkout Section */}\r\n           <div className=\"text-right mt-8 border-t pt-4\">\r\n             <p className=\"text-xl sm:text-2xl font-bold text-gray-800\">\r\n-              Total: Rs {totalPrice}\r\n+              Total: Rs {totalPrice.toFixed(2)}\r\n             </p>\r\n             <button\r\n               disabled={cartItems.length === 0}\r\n               className=\"mt-3 bg-blue-600 text-white px-6 py-3 rounded hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\r\n"
                },
                {
                    "date": 1749070189798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,58 +5,47 @@\n import CartSkeleton from '@/components/CartSkeleton';\r\n \r\n type CartItem = {\r\n   id: number;\r\n-  name: string;       // from product_name\r\n-  price: number;      // unit price\r\n+  name: string;\r\n+  price: number;\r\n   quantity: number;\r\n-  imageSrc: string;   // from product_image\r\n-  total_price: number; // quantity * price from backend (optional)\r\n+  imageSrc: string;\r\n };\r\n \r\n export default function CartPage() {\r\n   const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n   const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState<string | null>(null);\r\n \r\n   useEffect(() => {\r\n-    async function fetchCart() {\r\n-      try {\r\n-        const res = await fetch('/api/cart/items/', {\r\n-          method: 'GET',\r\n-          credentials: 'include', // if using cookies/session auth\r\n-          headers: {\r\n-            'Content-Type': 'application/json',\r\n-            // Add auth token here if you use token-based auth:\r\n-            // 'Authorization': `Bearer ${token}`,\r\n-          },\r\n-        });\r\n+    const timer = setTimeout(() => {\r\n+      setCartItems([\r\n+        {\r\n+          id: 1,\r\n+          name: 'Margherita Pizza',\r\n+          price: 299,\r\n+          quantity: 1,\r\n+          imageSrc: '/images/pizza.jpg',\r\n+        },\r\n+        {\r\n+          id: 2,\r\n+          name: 'Cheeseburger',\r\n+          price: 199,\r\n+          quantity: 2,\r\n+          imageSrc: '/images/burger.jpg',\r\n+        },\r\n+        {\r\n+          id: 3,\r\n+          name: 'Penne Alfredo',\r\n+          price: 249,\r\n+          quantity: 1,\r\n+          imageSrc: '/images/pasta.jpg',\r\n+        },\r\n+      ]);\r\n+      setLoading(false);\r\n+    }, 1000);\r\n \r\n-        if (!res.ok) {\r\n-          throw new Error(`Failed to fetch cart: ${res.status}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-\r\n-        // Map API fields to your state shape\r\n-        const mappedItems = data.map((item: any) => ({\r\n-          id: item.id,\r\n-          name: item.product_name,\r\n-          price: parseFloat(item.price), \r\n-          quantity: item.quantity,\r\n-          imageSrc: item.product_image,\r\n-          total_price: parseFloat(item.total_price),\r\n-        }));\r\n-\r\n-        setCartItems(mappedItems);\r\n-      } catch (err: any) {\r\n-        setError(err.message || 'Something went wrong');\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    }\r\n-\r\n-    fetchCart();\r\n+    return () => clearTimeout(timer);\r\n   }, []);\r\n \r\n   const increaseQty = (id: number) => {\r\n     setCartItems((items) =>\r\n@@ -86,20 +75,15 @@\n     (acc, item) => acc + item.price * item.quantity,\r\n     0\r\n   );\r\n \r\n-  if (loading) return <CartSkeleton />;\r\n-\r\n-  if (error)\r\n-    return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n-\r\n   return (\r\n     <div className=\"max-w-5xl mx-auto p-4 sm:p-6 lg:p-8\">\r\n-      <h1 className=\"text-2xl sm:text-3xl font-bold mb-6 text-blue-700\">\r\n-        Your Cart\r\n-      </h1>\r\n+      <h1 className=\"text-2xl sm:text-3xl font-bold mb-6 text-blue-700\">Your Cart</h1>\r\n \r\n-      {cartItems.length === 0 ? (\r\n+      {loading ? (\r\n+        <CartSkeleton />\r\n+      ) : cartItems.length === 0 ? (\r\n         <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n       ) : (\r\n         <div className=\"space-y-6\">\r\n           {cartItems.map((item) => (\r\n@@ -114,9 +98,9 @@\n               />\r\n \r\n               <div className=\"flex-1 flex flex-col gap-1\">\r\n                 <h2 className=\"font-semibold text-lg sm:text-xl\">{item.name}</h2>\r\n-                <p className=\"text-gray-600\">Rs {item.price.toFixed(2)}</p>\r\n+                <p className=\"text-gray-600\">Rs {item.price}</p>\r\n \r\n                 <div className=\"flex items-center mt-2 space-x-3\">\r\n                   <button\r\n                     onClick={() => decreaseQty(item.id)}\r\n@@ -137,9 +121,9 @@\n               </div>\r\n \r\n               <div className=\"flex flex-col items-end justify-between\">\r\n                 <p className=\"font-semibold text-lg\">\r\n-                  Rs {(item.price * item.quantity).toFixed(2)}\r\n+                  Rs {item.price * item.quantity}\r\n                 </p>\r\n                 <button\r\n                   onClick={() => removeItem(item.id)}\r\n                   className=\"text-red-500 hover:text-red-700 mt-2 sm:mt-0 transition\"\r\n@@ -153,9 +137,9 @@\n \r\n           {/* Checkout Section */}\r\n           <div className=\"text-right mt-8 border-t pt-4\">\r\n             <p className=\"text-xl sm:text-2xl font-bold text-gray-800\">\r\n-              Total: Rs {totalPrice.toFixed(2)}\r\n+              Total: Rs {totalPrice}\r\n             </p>\r\n             <button\r\n               disabled={cartItems.length === 0}\r\n               className=\"mt-3 bg-blue-600 text-white px-6 py-3 rounded hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\r\n"
                },
                {
                    "date": 1749070253651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,92 +2,90 @@\n \r\n import { useState, useEffect } from 'react';\r\n import { FaPlus, FaMinus, FaTrash } from 'react-icons/fa';\r\n import CartSkeleton from '@/components/CartSkeleton';\r\n+import { axiosWithCsrf } from '@/lib/axiosWithCsrf';\r\n \r\n type CartItem = {\r\n   id: number;\r\n-  name: string;\r\n+  name: string;       // product_name from backend\r\n   price: number;\r\n   quantity: number;\r\n-  imageSrc: string;\r\n+  imageSrc: string;   // product_image\r\n };\r\n \r\n export default function CartPage() {\r\n   const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n   const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState<string | null>(null);\r\n \r\n   useEffect(() => {\r\n-    const timer = setTimeout(() => {\r\n-      setCartItems([\r\n-        {\r\n-          id: 1,\r\n-          name: 'Margherita Pizza',\r\n-          price: 299,\r\n-          quantity: 1,\r\n-          imageSrc: '/images/pizza.jpg',\r\n-        },\r\n-        {\r\n-          id: 2,\r\n-          name: 'Cheeseburger',\r\n-          price: 199,\r\n-          quantity: 2,\r\n-          imageSrc: '/images/burger.jpg',\r\n-        },\r\n-        {\r\n-          id: 3,\r\n-          name: 'Penne Alfredo',\r\n-          price: 249,\r\n-          quantity: 1,\r\n-          imageSrc: '/images/pasta.jpg',\r\n-        },\r\n-      ]);\r\n-      setLoading(false);\r\n-    }, 1000);\r\n+    const fetchCart = async () => {\r\n+      try {\r\n+        const res = await axiosWithCsrf.get('/api/cart/items/');\r\n+        // Assuming response data is an array of items\r\n+        const mappedItems = res.data.map((item: any) => ({\r\n+          id: item.id,\r\n+          name: item.product_name,\r\n+          price: parseFloat(item.price),\r\n+          quantity: item.quantity,\r\n+          imageSrc: item.product_image,\r\n+        }));\r\n+        setCartItems(mappedItems);\r\n+      } catch (err: any) {\r\n+        setError(err.message || 'Failed to fetch cart');\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n \r\n-    return () => clearTimeout(timer);\r\n+    fetchCart();\r\n   }, []);\r\n \r\n   const increaseQty = (id: number) => {\r\n-    setCartItems((items) =>\r\n-      items.map((item) =>\r\n+    setCartItems(items =>\r\n+      items.map(item =>\r\n         item.id === id ? { ...item, quantity: item.quantity + 1 } : item\r\n       )\r\n     );\r\n   };\r\n \r\n   const decreaseQty = (id: number) => {\r\n-    setCartItems((items) =>\r\n+    setCartItems(items =>\r\n       items\r\n-        .map((item) =>\r\n+        .map(item =>\r\n           item.id === id\r\n             ? { ...item, quantity: Math.max(1, item.quantity - 1) }\r\n             : item\r\n         )\r\n-        .filter((item) => item.quantity > 0)\r\n+        .filter(item => item.quantity > 0)\r\n     );\r\n   };\r\n \r\n   const removeItem = (id: number) => {\r\n-    setCartItems((items) => items.filter((item) => item.id !== id));\r\n+    setCartItems(items => items.filter(item => item.id !== id));\r\n   };\r\n \r\n   const totalPrice = cartItems.reduce(\r\n     (acc, item) => acc + item.price * item.quantity,\r\n     0\r\n   );\r\n \r\n+  if (loading) return <CartSkeleton />;\r\n+\r\n+  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n+\r\n   return (\r\n     <div className=\"max-w-5xl mx-auto p-4 sm:p-6 lg:p-8\">\r\n-      <h1 className=\"text-2xl sm:text-3xl font-bold mb-6 text-blue-700\">Your Cart</h1>\r\n+      <h1 className=\"text-2xl sm:text-3xl font-bold mb-6 text-blue-700\">\r\n+        Your Cart\r\n+      </h1>\r\n \r\n-      {loading ? (\r\n-        <CartSkeleton />\r\n-      ) : cartItems.length === 0 ? (\r\n+      {cartItems.length === 0 ? (\r\n         <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n       ) : (\r\n         <div className=\"space-y-6\">\r\n-          {cartItems.map((item) => (\r\n+          {cartItems.map(item => (\r\n             <div\r\n               key={item.id}\r\n               className=\"flex flex-col sm:flex-row sm:items-center gap-4 p-4 rounded-lg shadow-md bg-white\"\r\n             >\r\n@@ -98,9 +96,9 @@\n               />\r\n \r\n               <div className=\"flex-1 flex flex-col gap-1\">\r\n                 <h2 className=\"font-semibold text-lg sm:text-xl\">{item.name}</h2>\r\n-                <p className=\"text-gray-600\">Rs {item.price}</p>\r\n+                <p className=\"text-gray-600\">Rs {item.price.toFixed(2)}</p>\r\n \r\n                 <div className=\"flex items-center mt-2 space-x-3\">\r\n                   <button\r\n                     onClick={() => decreaseQty(item.id)}\r\n@@ -121,9 +119,9 @@\n               </div>\r\n \r\n               <div className=\"flex flex-col items-end justify-between\">\r\n                 <p className=\"font-semibold text-lg\">\r\n-                  Rs {item.price * item.quantity}\r\n+                  Rs {(item.price * item.quantity).toFixed(2)}\r\n                 </p>\r\n                 <button\r\n                   onClick={() => removeItem(item.id)}\r\n                   className=\"text-red-500 hover:text-red-700 mt-2 sm:mt-0 transition\"\r\n@@ -137,9 +135,9 @@\n \r\n           {/* Checkout Section */}\r\n           <div className=\"text-right mt-8 border-t pt-4\">\r\n             <p className=\"text-xl sm:text-2xl font-bold text-gray-800\">\r\n-              Total: Rs {totalPrice}\r\n+              Total: Rs {totalPrice.toFixed(2)}\r\n             </p>\r\n             <button\r\n               disabled={cartItems.length === 0}\r\n               className=\"mt-3 bg-blue-600 text-white px-6 py-3 rounded hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\r\n"
                },
                {
                    "date": 1749070378798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,12 +6,12 @@\n import { axiosWithCsrf } from '@/lib/axiosWithCsrf';\r\n \r\n type CartItem = {\r\n   id: number;\r\n-  name: string;       // product_name from backend\r\n+  name: string;\r\n   price: number;\r\n   quantity: number;\r\n-  imageSrc: string;   // product_image\r\n+  imageSrc: string;\r\n };\r\n \r\n export default function CartPage() {\r\n   const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n@@ -21,9 +21,8 @@\n   useEffect(() => {\r\n     const fetchCart = async () => {\r\n       try {\r\n         const res = await axiosWithCsrf.get('/api/cart/items/');\r\n-        // Assuming response data is an array of items\r\n         const mappedItems = res.data.map((item: any) => ({\r\n           id: item.id,\r\n           name: item.product_name,\r\n           price: parseFloat(item.price),\r\n@@ -40,30 +39,51 @@\n \r\n     fetchCart();\r\n   }, []);\r\n \r\n+  const updateQuantity = async (id: number, newQty: number) => {\r\n+    if (newQty < 1) return; // prevent invalid qty\r\n+\r\n+    try {\r\n+      // Send update to backend\r\n+      await axiosWithCsrf.post('/api/cart/update/', {\r\n+        cart_item_id: id,\r\n+        quantity: newQty,\r\n+      });\r\n+\r\n+      // Update frontend state only if backend call successful\r\n+      setCartItems(items =>\r\n+        items.map(item =>\r\n+          item.id === id ? { ...item, quantity: newQty } : item\r\n+        )\r\n+      );\r\n+    } catch (error) {\r\n+      console.error('Failed to update quantity:', error);\r\n+      // Optional: show some UI error feedback here\r\n+    }\r\n+  };\r\n+\r\n   const increaseQty = (id: number) => {\r\n-    setCartItems(items =>\r\n-      items.map(item =>\r\n-        item.id === id ? { ...item, quantity: item.quantity + 1 } : item\r\n-      )\r\n-    );\r\n+    const item = cartItems.find(item => item.id === id);\r\n+    if (!item) return;\r\n+    updateQuantity(id, item.quantity + 1);\r\n   };\r\n \r\n   const decreaseQty = (id: number) => {\r\n-    setCartItems(items =>\r\n-      items\r\n-        .map(item =>\r\n-          item.id === id\r\n-            ? { ...item, quantity: Math.max(1, item.quantity - 1) }\r\n-            : item\r\n-        )\r\n-        .filter(item => item.quantity > 0)\r\n-    );\r\n+    const item = cartItems.find(item => item.id === id);\r\n+    if (!item) return;\r\n+    if (item.quantity === 1) return; // or you can remove if quantity 0 allowed\r\n+    updateQuantity(id, item.quantity - 1);\r\n   };\r\n \r\n-  const removeItem = (id: number) => {\r\n-    setCartItems(items => items.filter(item => item.id !== id));\r\n+  const removeItem = async (id: number) => {\r\n+    try {\r\n+      await axiosWithCsrf.post('/api/cart/remove/', { cart_item_id: id });\r\n+      setCartItems(items => items.filter(item => item.id !== id));\r\n+    } catch (error) {\r\n+      console.error('Failed to remove item:', error);\r\n+      // Optional: show error feedback\r\n+    }\r\n   };\r\n \r\n   const totalPrice = cartItems.reduce(\r\n     (acc, item) => acc + item.price * item.quantity,\r\n"
                },
                {
                    "date": 1749072226207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n                   </button>\r\n                   <span className=\"text-md font-medium\">{item.quantity}</span>\r\n                   <button\r\n                     onClick={() => increaseQty(item.id)}\r\n-                    className=\"p-2 rounded border hover:bg-gray-200 transition\"\r\n+                    className=\"p-2 rounded hover:bg-gray-200 transition\"\r\n                     aria-label=\"Increase quantity\"\r\n                   >\r\n                     <FaPlus />\r\n                   </button>\r\n"
                },
                {
                    "date": 1749072257015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+'use client';\r\n+\r\n+import { useState, useEffect } from 'react';\r\n+import { FaPlus, FaMinus, FaTrash } from 'react-icons/fa';\r\n+import CartSkeleton from '@/components/CartSkeleton';\r\n+import { axiosWithCsrf } from '@/lib/axiosWithCsrf';\r\n+\r\n+type CartItem = {\r\n+  id: number;\r\n+  name: string;\r\n+  price: number;\r\n+  quantity: number;\r\n+  imageSrc: string;\r\n+};\r\n+\r\n+export default function CartPage() {\r\n+  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState<string | null>(null);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCart = async () => {\r\n+      try {\r\n+        const res = await axiosWithCsrf.get('/api/cart/items/');\r\n+        const mappedItems = res.data.map((item: any) => ({\r\n+          id: item.id,\r\n+          name: item.product_name,\r\n+          price: parseFloat(item.price),\r\n+          quantity: item.quantity,\r\n+          imageSrc: item.product_image,\r\n+        }));\r\n+        setCartItems(mappedItems);\r\n+      } catch (err: any) {\r\n+        setError(err.message || 'Failed to fetch cart');\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchCart();\r\n+  }, []);\r\n+\r\n+  const updateQuantity = async (id: number, newQty: number) => {\r\n+    if (newQty < 1) return; // prevent invalid qty\r\n+\r\n+    try {\r\n+      // Send update to backend\r\n+      await axiosWithCsrf.post('/api/cart/update/', {\r\n+        cart_item_id: id,\r\n+        quantity: newQty,\r\n+      });\r\n+\r\n+      // Update frontend state only if backend call successful\r\n+      setCartItems(items =>\r\n+        items.map(item =>\r\n+          item.id === id ? { ...item, quantity: newQty } : item\r\n+        )\r\n+      );\r\n+    } catch (error) {\r\n+      console.error('Failed to update quantity:', error);\r\n+      // Optional: show some UI error feedback here\r\n+    }\r\n+  };\r\n+\r\n+  const increaseQty = (id: number) => {\r\n+    const item = cartItems.find(item => item.id === id);\r\n+    if (!item) return;\r\n+    updateQuantity(id, item.quantity + 1);\r\n+  };\r\n+\r\n+  const decreaseQty = (id: number) => {\r\n+    const item = cartItems.find(item => item.id === id);\r\n+    if (!item) return;\r\n+    if (item.quantity === 1) return; // or you can remove if quantity 0 allowed\r\n+    updateQuantity(id, item.quantity - 1);\r\n+  };\r\n+\r\n+  const removeItem = async (id: number) => {\r\n+    try {\r\n+      await axiosWithCsrf.post('/api/cart/remove/', { cart_item_id: id });\r\n+      setCartItems(items => items.filter(item => item.id !== id));\r\n+    } catch (error) {\r\n+      console.error('Failed to remove item:', error);\r\n+      // Optional: show error feedback\r\n+    }\r\n+  };\r\n+\r\n+  const totalPrice = cartItems.reduce(\r\n+    (acc, item) => acc + item.price * item.quantity,\r\n+    0\r\n+  );\r\n+\r\n+  if (loading) return <CartSkeleton />;\r\n+\r\n+  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n+\r\n+  return (\r\n+    <div className=\"max-w-5xl mx-auto p-4 sm:p-6 lg:p-8\">\r\n+      <h1 className=\"text-2xl sm:text-3xl font-bold mb-6 text-blue-700\">\r\n+        Your Cart\r\n+      </h1>\r\n+\r\n+      {cartItems.length === 0 ? (\r\n+        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n+      ) : (\r\n+        <div className=\"space-y-6\">\r\n+          {cartItems.map(item => (\r\n+            <div\r\n+              key={item.id}\r\n+              className=\"flex flex-col sm:flex-row sm:items-center gap-4 p-4 rounded-lg shadow-md bg-white\"\r\n+            >\r\n+              <img\r\n+                src={item.imageSrc}\r\n+                alt={item.name}\r\n+                className=\"w-full sm:w-24 h-24 object-cover rounded-md\"\r\n+              />\r\n+\r\n+              <div className=\"flex-1 flex flex-col gap-1\">\r\n+                <h2 className=\"font-semibold text-lg sm:text-xl\">{item.name}</h2>\r\n+                <p className=\"text-gray-600\">Rs {item.price.toFixed(2)}</p>\r\n+\r\n+                <div className=\"flex items-center mt-2 space-x-3\">\r\n+                  <button\r\n+                    onClick={() => decreaseQty(item.id)}\r\n+                    className=\"p-2 rounded gray-200 hover:bg-gray-200 transition\"\r\n+                    aria-label=\"Decrease quantity\"\r\n+                  >\r\n+                    <FaMinus />\r\n+                  </button>\r\n+                  <span className=\"text-md font-medium\">{item.quantity}</span>\r\n+                  <button\r\n+                    onClick={() => increaseQty(item.id)}\r\n+                    className=\"p-2 rounded hover:bg-gray-200 transition\"\r\n+                    aria-label=\"Increase quantity\"\r\n+                  >\r\n+                    <FaPlus />\r\n+                  </button>\r\n+                </div>\r\n+              </div>\r\n+\r\n+              <div className=\"flex flex-col items-end justify-between\">\r\n+                <p className=\"font-semibold text-lg\">\r\n+                  Rs {(item.price * item.quantity).toFixed(2)}\r\n+                </p>\r\n+                <button\r\n+                  onClick={() => removeItem(item.id)}\r\n+                  className=\"text-red-500 hover:text-red-700 mt-2 sm:mt-0 transition\"\r\n+                  aria-label=\"Remove item\"\r\n+                >\r\n+                  <FaTrash />\r\n+                </button>\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+\r\n+          {/* Checkout Section */}\r\n+          <div className=\"text-right mt-8 border-t pt-4\">\r\n+            <p className=\"text-xl sm:text-2xl font-bold text-gray-800\">\r\n+              Total: Rs {totalPrice.toFixed(2)}\r\n+            </p>\r\n+            <button\r\n+              disabled={cartItems.length === 0}\r\n+              className=\"mt-3 bg-blue-600 text-white px-6 py-3 rounded hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\r\n+            >\r\n+              Proceed to Checkout\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1749072262696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n \r\n                 <div className=\"flex items-center mt-2 space-x-3\">\r\n                   <button\r\n                     onClick={() => decreaseQty(item.id)}\r\n-                    className=\"p-2 rounded gray-200 hover:bg-gray-200 transition\"\r\n+                    className=\"p-2 rounded gray-200 hover:bg-gray-500 transition\"\r\n                     aria-label=\"Decrease quantity\"\r\n                   >\r\n                     <FaMinus />\r\n                   </button>\r\n@@ -169,176 +169,4 @@\n       )}\r\n     </div>\r\n   );\r\n }\r\n-'use client';\r\n-\r\n-import { useState, useEffect } from 'react';\r\n-import { FaPlus, FaMinus, FaTrash } from 'react-icons/fa';\r\n-import CartSkeleton from '@/components/CartSkeleton';\r\n-import { axiosWithCsrf } from '@/lib/axiosWithCsrf';\r\n-\r\n-type CartItem = {\r\n-  id: number;\r\n-  name: string;\r\n-  price: number;\r\n-  quantity: number;\r\n-  imageSrc: string;\r\n-};\r\n-\r\n-export default function CartPage() {\r\n-  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState<string | null>(null);\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCart = async () => {\r\n-      try {\r\n-        const res = await axiosWithCsrf.get('/api/cart/items/');\r\n-        const mappedItems = res.data.map((item: any) => ({\r\n-          id: item.id,\r\n-          name: item.product_name,\r\n-          price: parseFloat(item.price),\r\n-          quantity: item.quantity,\r\n-          imageSrc: item.product_image,\r\n-        }));\r\n-        setCartItems(mappedItems);\r\n-      } catch (err: any) {\r\n-        setError(err.message || 'Failed to fetch cart');\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchCart();\r\n-  }, []);\r\n-\r\n-  const updateQuantity = async (id: number, newQty: number) => {\r\n-    if (newQty < 1) return; // prevent invalid qty\r\n-\r\n-    try {\r\n-      // Send update to backend\r\n-      await axiosWithCsrf.post('/api/cart/update/', {\r\n-        cart_item_id: id,\r\n-        quantity: newQty,\r\n-      });\r\n-\r\n-      // Update frontend state only if backend call successful\r\n-      setCartItems(items =>\r\n-        items.map(item =>\r\n-          item.id === id ? { ...item, quantity: newQty } : item\r\n-        )\r\n-      );\r\n-    } catch (error) {\r\n-      console.error('Failed to update quantity:', error);\r\n-      // Optional: show some UI error feedback here\r\n-    }\r\n-  };\r\n-\r\n-  const increaseQty = (id: number) => {\r\n-    const item = cartItems.find(item => item.id === id);\r\n-    if (!item) return;\r\n-    updateQuantity(id, item.quantity + 1);\r\n-  };\r\n-\r\n-  const decreaseQty = (id: number) => {\r\n-    const item = cartItems.find(item => item.id === id);\r\n-    if (!item) return;\r\n-    if (item.quantity === 1) return; // or you can remove if quantity 0 allowed\r\n-    updateQuantity(id, item.quantity - 1);\r\n-  };\r\n-\r\n-  const removeItem = async (id: number) => {\r\n-    try {\r\n-      await axiosWithCsrf.post('/api/cart/remove/', { cart_item_id: id });\r\n-      setCartItems(items => items.filter(item => item.id !== id));\r\n-    } catch (error) {\r\n-      console.error('Failed to remove item:', error);\r\n-      // Optional: show error feedback\r\n-    }\r\n-  };\r\n-\r\n-  const totalPrice = cartItems.reduce(\r\n-    (acc, item) => acc + item.price * item.quantity,\r\n-    0\r\n-  );\r\n-\r\n-  if (loading) return <CartSkeleton />;\r\n-\r\n-  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n-\r\n-  return (\r\n-    <div className=\"max-w-5xl mx-auto p-4 sm:p-6 lg:p-8\">\r\n-      <h1 className=\"text-2xl sm:text-3xl font-bold mb-6 text-blue-700\">\r\n-        Your Cart\r\n-      </h1>\r\n-\r\n-      {cartItems.length === 0 ? (\r\n-        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n-      ) : (\r\n-        <div className=\"space-y-6\">\r\n-          {cartItems.map(item => (\r\n-            <div\r\n-              key={item.id}\r\n-              className=\"flex flex-col sm:flex-row sm:items-center gap-4 p-4 rounded-lg shadow-md bg-white\"\r\n-            >\r\n-              <img\r\n-                src={item.imageSrc}\r\n-                alt={item.name}\r\n-                className=\"w-full sm:w-24 h-24 object-cover rounded-md\"\r\n-              />\r\n-\r\n-              <div className=\"flex-1 flex flex-col gap-1\">\r\n-                <h2 className=\"font-semibold text-lg sm:text-xl\">{item.name}</h2>\r\n-                <p className=\"text-gray-600\">Rs {item.price.toFixed(2)}</p>\r\n-\r\n-                <div className=\"flex items-center mt-2 space-x-3\">\r\n-                  <button\r\n-                    onClick={() => decreaseQty(item.id)}\r\n-                    className=\"p-2 rounded border hover:bg-gray-200 transition\"\r\n-                    aria-label=\"Decrease quantity\"\r\n-                  >\r\n-                    <FaMinus />\r\n-                  </button>\r\n-                  <span className=\"text-md font-medium\">{item.quantity}</span>\r\n-                  <button\r\n-                    onClick={() => increaseQty(item.id)}\r\n-                    className=\"p-2 rounded hover:bg-gray-200 transition\"\r\n-                    aria-label=\"Increase quantity\"\r\n-                  >\r\n-                    <FaPlus />\r\n-                  </button>\r\n-                </div>\r\n-              </div>\r\n-\r\n-              <div className=\"flex flex-col items-end justify-between\">\r\n-                <p className=\"font-semibold text-lg\">\r\n-                  Rs {(item.price * item.quantity).toFixed(2)}\r\n-                </p>\r\n-                <button\r\n-                  onClick={() => removeItem(item.id)}\r\n-                  className=\"text-red-500 hover:text-red-700 mt-2 sm:mt-0 transition\"\r\n-                  aria-label=\"Remove item\"\r\n-                >\r\n-                  <FaTrash />\r\n-                </button>\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-\r\n-          {/* Checkout Section */}\r\n-          <div className=\"text-right mt-8 border-t pt-4\">\r\n-            <p className=\"text-xl sm:text-2xl font-bold text-gray-800\">\r\n-              Total: Rs {totalPrice.toFixed(2)}\r\n-            </p>\r\n-            <button\r\n-              disabled={cartItems.length === 0}\r\n-              className=\"mt-3 bg-blue-600 text-white px-6 py-3 rounded hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\r\n-            >\r\n-              Proceed to Checkout\r\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1749072279696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n \r\n                 <div className=\"flex items-center mt-2 space-x-3\">\r\n                   <button\r\n                     onClick={() => decreaseQty(item.id)}\r\n-                    className=\"p-2 rounded gray-200 hover:bg-gray-500 transition\"\r\n+                    className=\"p-2 rounded bg-gray-200 hover:bg-gray-500 transition\"\r\n                     aria-label=\"Decrease quantity\"\r\n                   >\r\n                     <FaMinus />\r\n                   </button>\r\n"
                },
                {
                    "date": 1749072296580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,17 +121,17 @@\n \r\n                 <div className=\"flex items-center mt-2 space-x-3\">\r\n                   <button\r\n                     onClick={() => decreaseQty(item.id)}\r\n-                    className=\"p-2 rounded bg-gray-200 hover:bg-gray-500 transition\"\r\n+                    className=\"p-2 rounded bg-gray-200 hover:bg-gray-300 transition\"\r\n                     aria-label=\"Decrease quantity\"\r\n                   >\r\n                     <FaMinus />\r\n                   </button>\r\n                   <span className=\"text-md font-medium\">{item.quantity}</span>\r\n                   <button\r\n                     onClick={() => increaseQty(item.id)}\r\n-                    className=\"p-2 rounded hover:bg-gray-200 transition\"\r\n+                    className=\"p-2 rounded bg-gray-200 hover:bg-gray-200 transition\"\r\n                     aria-label=\"Increase quantity\"\r\n                   >\r\n                     <FaPlus />\r\n                   </button>\r\n"
                },
                {
                    "date": 1749072312762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n                   </button>\r\n                   <span className=\"text-md font-medium\">{item.quantity}</span>\r\n                   <button\r\n                     onClick={() => increaseQty(item.id)}\r\n-                    className=\"p-2 rounded bg-gray-200 hover:bg-gray-200 transition\"\r\n+                    className=\"p-2 rounded bg-gray-200 hover:bg-gray-300 transition\"\r\n                     aria-label=\"Increase quantity\"\r\n                   >\r\n                     <FaPlus />\r\n                   </button>\r\n"
                },
                {
                    "date": 1749072966349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,8 +98,9 @@\n     <div className=\"max-w-5xl mx-auto p-4 sm:p-6 lg:p-8\">\r\n       <h1 className=\"text-2xl sm:text-3xl font-bold mb-6 text-blue-700\">\r\n         Your Cart\r\n       </h1>\r\n+      \r\n \r\n       {cartItems.length === 0 ? (\r\n         <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n       ) : (\r\n"
                },
                {
                    "date": 1749072984114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,10 +98,13 @@\n     <div className=\"max-w-5xl mx-auto p-4 sm:p-6 lg:p-8\">\r\n       <h1 className=\"text-2xl sm:text-3xl font-bold mb-6 text-blue-700\">\r\n         Your Cart\r\n       </h1>\r\n-      \r\n \r\n+      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n+        <strong>Note:</strong> \r\n+      </div>\r\n+\r\n       {cartItems.length === 0 ? (\r\n         <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n       ) : (\r\n         <div className=\"space-y-6\">\r\n"
                },
                {
                    "date": 1749072996054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n         Your Cart\r\n       </h1>\r\n \r\n       <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n-        <strong>Note:</strong> \r\n+        <strong>Note:</strong> Please review your items before proceeding to checkout. Ensure quantities are correct and items are as expected.\r\n       </div>\r\n \r\n       {cartItems.length === 0 ? (\r\n         <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n"
                },
                {
                    "date": 1749073002537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n         Your Cart\r\n       </h1>\r\n \r\n       <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n-        <strong>Note:</strong> Please review your items before proceeding to checkout. Ensure quantities are correct and items are as expected.\r\n+        <strong>Note:</strong> Please review your items before proceeding to checkout. Ensure quantities are correct and items are as expected !.\r\n       </div>\r\n \r\n       {cartItems.length === 0 ? (\r\n         <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n"
                },
                {
                    "date": 1749073179273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,8 +93,14 @@\n   if (loading) return <CartSkeleton />;\r\n \r\n   if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n \r\n+  const router = useRouter();\r\n+\r\n+const gotoCheckout = () => {\r\n+  router.push('/checkout'); // replace '/checkout' with your actual checkout route\r\n+};\r\n+\r\n   return (\r\n     <div className=\"max-w-5xl mx-auto p-4 sm:p-6 lg:p-8\">\r\n       <h1 className=\"text-2xl sm:text-3xl font-bold mb-6 text-blue-700\">\r\n         Your Cart\r\n"
                },
                {
                    "date": 1749073192257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,183 @@\n+'use client';\r\n+\r\n+import { useState, useEffect } from 'react';\r\n+import { FaPlus, FaMinus, FaTrash } from 'react-icons/fa';\r\n+import CartSkeleton from '@/components/CartSkeleton';\r\n+import { axiosWithCsrf } from '@/lib/axiosWithCsrf';\r\n+import { useRouter } from 'next/navigation';\r\n+\r\n+type CartItem = {\r\n+  id: number;\r\n+  name: string;\r\n+  price: number;\r\n+  quantity: number;\r\n+  imageSrc: string;\r\n+};\r\n+\r\n+export default function CartPage() {\r\n+  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState<string | null>(null);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCart = async () => {\r\n+      try {\r\n+        const res = await axiosWithCsrf.get('/api/cart/items/');\r\n+        const mappedItems = res.data.map((item: any) => ({\r\n+          id: item.id,\r\n+          name: item.product_name,\r\n+          price: parseFloat(item.price),\r\n+          quantity: item.quantity,\r\n+          imageSrc: item.product_image,\r\n+        }));\r\n+        setCartItems(mappedItems);\r\n+      } catch (err: any) {\r\n+        setError(err.message || 'Failed to fetch cart');\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchCart();\r\n+  }, []);\r\n+\r\n+  const updateQuantity = async (id: number, newQty: number) => {\r\n+    if (newQty < 1) return; // prevent invalid qty\r\n+\r\n+    try {\r\n+      // Send update to backend\r\n+      await axiosWithCsrf.post('/api/cart/update/', {\r\n+        cart_item_id: id,\r\n+        quantity: newQty,\r\n+      });\r\n+\r\n+      // Update frontend state only if backend call successful\r\n+      setCartItems(items =>\r\n+        items.map(item =>\r\n+          item.id === id ? { ...item, quantity: newQty } : item\r\n+        )\r\n+      );\r\n+    } catch (error) {\r\n+      console.error('Failed to update quantity:', error);\r\n+      // Optional: show some UI error feedback here\r\n+    }\r\n+  };\r\n+\r\n+  const increaseQty = (id: number) => {\r\n+    const item = cartItems.find(item => item.id === id);\r\n+    if (!item) return;\r\n+    updateQuantity(id, item.quantity + 1);\r\n+  };\r\n+\r\n+  const decreaseQty = (id: number) => {\r\n+    const item = cartItems.find(item => item.id === id);\r\n+    if (!item) return;\r\n+    if (item.quantity === 1) return; // or you can remove if quantity 0 allowed\r\n+    updateQuantity(id, item.quantity - 1);\r\n+  };\r\n+\r\n+  const removeItem = async (id: number) => {\r\n+    try {\r\n+      await axiosWithCsrf.post('/api/cart/remove/', { cart_item_id: id });\r\n+      setCartItems(items => items.filter(item => item.id !== id));\r\n+    } catch (error) {\r\n+      console.error('Failed to remove item:', error);\r\n+      // Optional: show error feedback\r\n+    }\r\n+  };\r\n+\r\n+  const totalPrice = cartItems.reduce(\r\n+    (acc, item) => acc + item.price * item.quantity,\r\n+    0\r\n+  );\r\n+\r\n+  if (loading) return <CartSkeleton />;\r\n+\r\n+  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n+\r\n+  const router = useRouter();\r\n+\r\n+  const gotoCheckout = () => {\r\n+    router.push('/checkout'); // replace '/checkout' with your actual checkout route\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"max-w-5xl mx-auto p-4 sm:p-6 lg:p-8\">\r\n+      <h1 className=\"text-2xl sm:text-3xl font-bold mb-6 text-blue-700\">\r\n+        Your Cart\r\n+      </h1>\r\n+\r\n+      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n+        <strong>Note:</strong> Please review your items before proceeding to checkout. Ensure quantities are correct and items are as expected !.\r\n+      </div>\r\n+\r\n+      {cartItems.length === 0 ? (\r\n+        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n+      ) : (\r\n+        <div className=\"space-y-6\">\r\n+          {cartItems.map(item => (\r\n+            <div\r\n+              key={item.id}\r\n+              className=\"flex flex-col sm:flex-row sm:items-center gap-4 p-4 rounded-lg shadow-md bg-white\"\r\n+            >\r\n+              <img\r\n+                src={item.imageSrc}\r\n+                alt={item.name}\r\n+                className=\"w-full sm:w-24 h-24 object-cover rounded-md\"\r\n+              />\r\n+\r\n+              <div className=\"flex-1 flex flex-col gap-1\">\r\n+                <h2 className=\"font-semibold text-lg sm:text-xl\">{item.name}</h2>\r\n+                <p className=\"text-gray-600\">Rs {item.price.toFixed(2)}</p>\r\n+\r\n+                <div className=\"flex items-center mt-2 space-x-3\">\r\n+                  <button\r\n+                    onClick={() => decreaseQty(item.id)}\r\n+                    className=\"p-2 rounded bg-gray-200 hover:bg-gray-300 transition\"\r\n+                    aria-label=\"Decrease quantity\"\r\n+                  >\r\n+                    <FaMinus />\r\n+                  </button>\r\n+                  <span className=\"text-md font-medium\">{item.quantity}</span>\r\n+                  <button\r\n+                    onClick={() => increaseQty(item.id)}\r\n+                    className=\"p-2 rounded bg-gray-200 hover:bg-gray-300 transition\"\r\n+                    aria-label=\"Increase quantity\"\r\n+                  >\r\n+                    <FaPlus />\r\n+                  </button>\r\n+                </div>\r\n+              </div>\r\n+\r\n+              <div className=\"flex flex-col items-end justify-between\">\r\n+                <p className=\"font-semibold text-lg\">\r\n+                  Rs {(item.price * item.quantity).toFixed(2)}\r\n+                </p>\r\n+                <button\r\n+                  onClick={() => removeItem(item.id)}\r\n+                  className=\"text-red-500 hover:text-red-700 mt-2 sm:mt-0 transition\"\r\n+                  aria-label=\"Remove item\"\r\n+                >\r\n+                  <FaTrash />\r\n+                </button>\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+\r\n+          {/* Checkout Section */}\r\n+          <div className=\"text-right mt-8 border-t pt-4\">\r\n+            <p className=\"text-xl sm:text-2xl font-bold text-gray-800\">\r\n+              Total: Rs {totalPrice.toFixed(2)}\r\n+            </p>\r\n+            <button\r\n+              disabled={cartItems.length === 0}\r\n+              className=\"mt-3 bg-blue-600 text-white px-6 py-3 rounded hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\r\n+            >\r\n+              Proceed to Checkout\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1749073221991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,8 +170,9 @@\n               Total: Rs {totalPrice.toFixed(2)}\r\n             </p>\r\n             <button\r\n               disabled={cartItems.length === 0}\r\n+              onClick={gotoCheckout}\r\n               className=\"mt-3 bg-blue-600 text-white px-6 py-3 rounded hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\r\n             >\r\n               Proceed to Checkout\r\n             </button>\r\n@@ -180,186 +181,4 @@\n       )}\r\n     </div>\r\n   );\r\n }\r\n-'use client';\r\n-\r\n-import { useState, useEffect } from 'react';\r\n-import { FaPlus, FaMinus, FaTrash } from 'react-icons/fa';\r\n-import CartSkeleton from '@/components/CartSkeleton';\r\n-import { axiosWithCsrf } from '@/lib/axiosWithCsrf';\r\n-\r\n-type CartItem = {\r\n-  id: number;\r\n-  name: string;\r\n-  price: number;\r\n-  quantity: number;\r\n-  imageSrc: string;\r\n-};\r\n-\r\n-export default function CartPage() {\r\n-  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState<string | null>(null);\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCart = async () => {\r\n-      try {\r\n-        const res = await axiosWithCsrf.get('/api/cart/items/');\r\n-        const mappedItems = res.data.map((item: any) => ({\r\n-          id: item.id,\r\n-          name: item.product_name,\r\n-          price: parseFloat(item.price),\r\n-          quantity: item.quantity,\r\n-          imageSrc: item.product_image,\r\n-        }));\r\n-        setCartItems(mappedItems);\r\n-      } catch (err: any) {\r\n-        setError(err.message || 'Failed to fetch cart');\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchCart();\r\n-  }, []);\r\n-\r\n-  const updateQuantity = async (id: number, newQty: number) => {\r\n-    if (newQty < 1) return; // prevent invalid qty\r\n-\r\n-    try {\r\n-      // Send update to backend\r\n-      await axiosWithCsrf.post('/api/cart/update/', {\r\n-        cart_item_id: id,\r\n-        quantity: newQty,\r\n-      });\r\n-\r\n-      // Update frontend state only if backend call successful\r\n-      setCartItems(items =>\r\n-        items.map(item =>\r\n-          item.id === id ? { ...item, quantity: newQty } : item\r\n-        )\r\n-      );\r\n-    } catch (error) {\r\n-      console.error('Failed to update quantity:', error);\r\n-      // Optional: show some UI error feedback here\r\n-    }\r\n-  };\r\n-\r\n-  const increaseQty = (id: number) => {\r\n-    const item = cartItems.find(item => item.id === id);\r\n-    if (!item) return;\r\n-    updateQuantity(id, item.quantity + 1);\r\n-  };\r\n-\r\n-  const decreaseQty = (id: number) => {\r\n-    const item = cartItems.find(item => item.id === id);\r\n-    if (!item) return;\r\n-    if (item.quantity === 1) return; // or you can remove if quantity 0 allowed\r\n-    updateQuantity(id, item.quantity - 1);\r\n-  };\r\n-\r\n-  const removeItem = async (id: number) => {\r\n-    try {\r\n-      await axiosWithCsrf.post('/api/cart/remove/', { cart_item_id: id });\r\n-      setCartItems(items => items.filter(item => item.id !== id));\r\n-    } catch (error) {\r\n-      console.error('Failed to remove item:', error);\r\n-      // Optional: show error feedback\r\n-    }\r\n-  };\r\n-\r\n-  const totalPrice = cartItems.reduce(\r\n-    (acc, item) => acc + item.price * item.quantity,\r\n-    0\r\n-  );\r\n-\r\n-  if (loading) return <CartSkeleton />;\r\n-\r\n-  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n-\r\n-  const router = useRouter();\r\n-\r\n-const gotoCheckout = () => {\r\n-  router.push('/checkout'); // replace '/checkout' with your actual checkout route\r\n-};\r\n-\r\n-  return (\r\n-    <div className=\"max-w-5xl mx-auto p-4 sm:p-6 lg:p-8\">\r\n-      <h1 className=\"text-2xl sm:text-3xl font-bold mb-6 text-blue-700\">\r\n-        Your Cart\r\n-      </h1>\r\n-\r\n-      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n-        <strong>Note:</strong> Please review your items before proceeding to checkout. Ensure quantities are correct and items are as expected !.\r\n-      </div>\r\n-\r\n-      {cartItems.length === 0 ? (\r\n-        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n-      ) : (\r\n-        <div className=\"space-y-6\">\r\n-          {cartItems.map(item => (\r\n-            <div\r\n-              key={item.id}\r\n-              className=\"flex flex-col sm:flex-row sm:items-center gap-4 p-4 rounded-lg shadow-md bg-white\"\r\n-            >\r\n-              <img\r\n-                src={item.imageSrc}\r\n-                alt={item.name}\r\n-                className=\"w-full sm:w-24 h-24 object-cover rounded-md\"\r\n-              />\r\n-\r\n-              <div className=\"flex-1 flex flex-col gap-1\">\r\n-                <h2 className=\"font-semibold text-lg sm:text-xl\">{item.name}</h2>\r\n-                <p className=\"text-gray-600\">Rs {item.price.toFixed(2)}</p>\r\n-\r\n-                <div className=\"flex items-center mt-2 space-x-3\">\r\n-                  <button\r\n-                    onClick={() => decreaseQty(item.id)}\r\n-                    className=\"p-2 rounded bg-gray-200 hover:bg-gray-300 transition\"\r\n-                    aria-label=\"Decrease quantity\"\r\n-                  >\r\n-                    <FaMinus />\r\n-                  </button>\r\n-                  <span className=\"text-md font-medium\">{item.quantity}</span>\r\n-                  <button\r\n-                    onClick={() => increaseQty(item.id)}\r\n-                    className=\"p-2 rounded bg-gray-200 hover:bg-gray-300 transition\"\r\n-                    aria-label=\"Increase quantity\"\r\n-                  >\r\n-                    <FaPlus />\r\n-                  </button>\r\n-                </div>\r\n-              </div>\r\n-\r\n-              <div className=\"flex flex-col items-end justify-between\">\r\n-                <p className=\"font-semibold text-lg\">\r\n-                  Rs {(item.price * item.quantity).toFixed(2)}\r\n-                </p>\r\n-                <button\r\n-                  onClick={() => removeItem(item.id)}\r\n-                  className=\"text-red-500 hover:text-red-700 mt-2 sm:mt-0 transition\"\r\n-                  aria-label=\"Remove item\"\r\n-                >\r\n-                  <FaTrash />\r\n-                </button>\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-\r\n-          {/* Checkout Section */}\r\n-          <div className=\"text-right mt-8 border-t pt-4\">\r\n-            <p className=\"text-xl sm:text-2xl font-bold text-gray-800\">\r\n-              Total: Rs {totalPrice.toFixed(2)}\r\n-            </p>\r\n-            <button\r\n-              disabled={cartItems.length === 0}\r\n-              className=\"mt-3 bg-blue-600 text-white px-6 py-3 rounded hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\r\n-            >\r\n-              Proceed to Checkout\r\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1749074611606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,8 +106,10 @@\n       <h1 className=\"text-2xl sm:text-3xl font-bold mb-6 text-blue-700\">\r\n         Your Cart\r\n       </h1>\r\n \r\n+      <BackButton />\r\n+\r\n       <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n         <strong>Note:</strong> Please review your items before proceeding to checkout. Ensure quantities are correct and items are as expected !.\r\n       </div>\r\n \r\n"
                },
                {
                    "date": 1749074619915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import { FaPlus, FaMinus, FaTrash } from 'react-icons/fa';\r\n import CartSkeleton from '@/components/CartSkeleton';\r\n import { axiosWithCsrf } from '@/lib/axiosWithCsrf';\r\n import { useRouter } from 'next/navigation';\r\n+import BackButton from '@/components/BackButton';\r\n \r\n type CartItem = {\r\n   id: number;\r\n   name: string;\r\n"
                },
                {
                    "date": 1749074735217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,187 @@\n+'use client';\r\n+\r\n+import { useState, useEffect } from 'react';\r\n+import { FaPlus, FaMinus, FaTrash } from 'react-icons/fa';\r\n+import CartSkeleton from '@/components/CartSkeleton';\r\n+import { axiosWithCsrf } from '@/lib/axiosWithCsrf';\r\n+import { useRouter } from 'next/navigation';\r\n+import BackButton from '@/components/BackButton';\r\n+\r\n+type CartItem = {\r\n+  id: number;\r\n+  name: string;\r\n+  price: number;\r\n+  quantity: number;\r\n+  imageSrc: string;\r\n+};\r\n+\r\n+export default function CartPage() {\r\n+  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState<string | null>(null);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCart = async () => {\r\n+      try {\r\n+        const res = await axiosWithCsrf.get('/api/cart/items/');\r\n+        const mappedItems = res.data.map((item: any) => ({\r\n+          id: item.id,\r\n+          name: item.product_name,\r\n+          price: parseFloat(item.price),\r\n+          quantity: item.quantity,\r\n+          imageSrc: item.product_image,\r\n+        }));\r\n+        setCartItems(mappedItems);\r\n+      } catch (err: any) {\r\n+        setError(err.message || 'Failed to fetch cart');\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchCart();\r\n+  }, []);\r\n+\r\n+  const updateQuantity = async (id: number, newQty: number) => {\r\n+    if (newQty < 1) return; // prevent invalid qty\r\n+\r\n+    try {\r\n+      // Send update to backend\r\n+      await axiosWithCsrf.post('/api/cart/update/', {\r\n+        cart_item_id: id,\r\n+        quantity: newQty,\r\n+      });\r\n+\r\n+      // Update frontend state only if backend call successful\r\n+      setCartItems(items =>\r\n+        items.map(item =>\r\n+          item.id === id ? { ...item, quantity: newQty } : item\r\n+        )\r\n+      );\r\n+    } catch (error) {\r\n+      console.error('Failed to update quantity:', error);\r\n+      // Optional: show some UI error feedback here\r\n+    }\r\n+  };\r\n+\r\n+  const increaseQty = (id: number) => {\r\n+    const item = cartItems.find(item => item.id === id);\r\n+    if (!item) return;\r\n+    updateQuantity(id, item.quantity + 1);\r\n+  };\r\n+\r\n+  const decreaseQty = (id: number) => {\r\n+    const item = cartItems.find(item => item.id === id);\r\n+    if (!item) return;\r\n+    if (item.quantity === 1) return; // or you can remove if quantity 0 allowed\r\n+    updateQuantity(id, item.quantity - 1);\r\n+  };\r\n+\r\n+  const removeItem = async (id: number) => {\r\n+    try {\r\n+      await axiosWithCsrf.post('/api/cart/remove/', { cart_item_id: id });\r\n+      setCartItems(items => items.filter(item => item.id !== id));\r\n+    } catch (error) {\r\n+      console.error('Failed to remove item:', error);\r\n+      // Optional: show error feedback\r\n+    }\r\n+  };\r\n+\r\n+  const totalPrice = cartItems.reduce(\r\n+    (acc, item) => acc + item.price * item.quantity,\r\n+    0\r\n+  );\r\n+\r\n+  if (loading) return <CartSkeleton />;\r\n+\r\n+  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n+\r\n+  const router = useRouter();\r\n+\r\n+  const gotoCheckout = () => {\r\n+    router.push('/checkout'); // replace '/checkout' with your actual checkout route\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"max-w-5xl mx-auto p-4 sm:p-6 lg:p-8\">\r\n+      <h1 className=\"text-2xl sm:text-3xl font-bold mb-1 text-blue-700\">\r\n+        Your Cart\r\n+      </h1>\r\n+\r\n+      <BackButton />\r\n+\r\n+      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n+        <strong>Note:</strong> Please review your items before proceeding to checkout. Ensure quantities are correct and items are as expected !.\r\n+      </div>\r\n+\r\n+      {cartItems.length === 0 ? (\r\n+        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n+      ) : (\r\n+        <div className=\"space-y-6\">\r\n+          {cartItems.map(item => (\r\n+            <div\r\n+              key={item.id}\r\n+              className=\"flex flex-col sm:flex-row sm:items-center gap-4 p-4 rounded-lg shadow-md bg-white\"\r\n+            >\r\n+              <img\r\n+                src={item.imageSrc}\r\n+                alt={item.name}\r\n+                className=\"w-full sm:w-24 h-24 object-cover rounded-md\"\r\n+              />\r\n+\r\n+              <div className=\"flex-1 flex flex-col gap-1\">\r\n+                <h2 className=\"font-semibold text-lg sm:text-xl\">{item.name}</h2>\r\n+                <p className=\"text-gray-600\">Rs {item.price.toFixed(2)}</p>\r\n+\r\n+                <div className=\"flex items-center mt-2 space-x-3\">\r\n+                  <button\r\n+                    onClick={() => decreaseQty(item.id)}\r\n+                    className=\"p-2 rounded bg-gray-200 hover:bg-gray-300 transition\"\r\n+                    aria-label=\"Decrease quantity\"\r\n+                  >\r\n+                    <FaMinus />\r\n+                  </button>\r\n+                  <span className=\"text-md font-medium\">{item.quantity}</span>\r\n+                  <button\r\n+                    onClick={() => increaseQty(item.id)}\r\n+                    className=\"p-2 rounded bg-gray-200 hover:bg-gray-300 transition\"\r\n+                    aria-label=\"Increase quantity\"\r\n+                  >\r\n+                    <FaPlus />\r\n+                  </button>\r\n+                </div>\r\n+              </div>\r\n+\r\n+              <div className=\"flex flex-col items-end justify-between\">\r\n+                <p className=\"font-semibold text-lg\">\r\n+                  Rs {(item.price * item.quantity).toFixed(2)}\r\n+                </p>\r\n+                <button\r\n+                  onClick={() => removeItem(item.id)}\r\n+                  className=\"text-red-500 hover:text-red-700 mt-2 sm:mt-0 transition\"\r\n+                  aria-label=\"Remove item\"\r\n+                >\r\n+                  <FaTrash />\r\n+                </button>\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+\r\n+          {/* Checkout Section */}\r\n+          <div className=\"text-right mt-8 border-t pt-4\">\r\n+            <p className=\"text-xl sm:text-2xl font-bold text-gray-800\">\r\n+              Total: Rs {totalPrice.toFixed(2)}\r\n+            </p>\r\n+            <button\r\n+              disabled={cartItems.length === 0}\r\n+              onClick={gotoCheckout}\r\n+              className=\"mt-3 bg-blue-600 text-white px-6 py-3 rounded hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\r\n+            >\r\n+              Proceed to Checkout\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1749075391981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,191 +184,4 @@\n       )}\r\n     </div>\r\n   );\r\n }\r\n-'use client';\r\n-\r\n-import { useState, useEffect } from 'react';\r\n-import { FaPlus, FaMinus, FaTrash } from 'react-icons/fa';\r\n-import CartSkeleton from '@/components/CartSkeleton';\r\n-import { axiosWithCsrf } from '@/lib/axiosWithCsrf';\r\n-import { useRouter } from 'next/navigation';\r\n-import BackButton from '@/components/BackButton';\r\n-\r\n-type CartItem = {\r\n-  id: number;\r\n-  name: string;\r\n-  price: number;\r\n-  quantity: number;\r\n-  imageSrc: string;\r\n-};\r\n-\r\n-export default function CartPage() {\r\n-  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState<string | null>(null);\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCart = async () => {\r\n-      try {\r\n-        const res = await axiosWithCsrf.get('/api/cart/items/');\r\n-        const mappedItems = res.data.map((item: any) => ({\r\n-          id: item.id,\r\n-          name: item.product_name,\r\n-          price: parseFloat(item.price),\r\n-          quantity: item.quantity,\r\n-          imageSrc: item.product_image,\r\n-        }));\r\n-        setCartItems(mappedItems);\r\n-      } catch (err: any) {\r\n-        setError(err.message || 'Failed to fetch cart');\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchCart();\r\n-  }, []);\r\n-\r\n-  const updateQuantity = async (id: number, newQty: number) => {\r\n-    if (newQty < 1) return; // prevent invalid qty\r\n-\r\n-    try {\r\n-      // Send update to backend\r\n-      await axiosWithCsrf.post('/api/cart/update/', {\r\n-        cart_item_id: id,\r\n-        quantity: newQty,\r\n-      });\r\n-\r\n-      // Update frontend state only if backend call successful\r\n-      setCartItems(items =>\r\n-        items.map(item =>\r\n-          item.id === id ? { ...item, quantity: newQty } : item\r\n-        )\r\n-      );\r\n-    } catch (error) {\r\n-      console.error('Failed to update quantity:', error);\r\n-      // Optional: show some UI error feedback here\r\n-    }\r\n-  };\r\n-\r\n-  const increaseQty = (id: number) => {\r\n-    const item = cartItems.find(item => item.id === id);\r\n-    if (!item) return;\r\n-    updateQuantity(id, item.quantity + 1);\r\n-  };\r\n-\r\n-  const decreaseQty = (id: number) => {\r\n-    const item = cartItems.find(item => item.id === id);\r\n-    if (!item) return;\r\n-    if (item.quantity === 1) return; // or you can remove if quantity 0 allowed\r\n-    updateQuantity(id, item.quantity - 1);\r\n-  };\r\n-\r\n-  const removeItem = async (id: number) => {\r\n-    try {\r\n-      await axiosWithCsrf.post('/api/cart/remove/', { cart_item_id: id });\r\n-      setCartItems(items => items.filter(item => item.id !== id));\r\n-    } catch (error) {\r\n-      console.error('Failed to remove item:', error);\r\n-      // Optional: show error feedback\r\n-    }\r\n-  };\r\n-\r\n-  const totalPrice = cartItems.reduce(\r\n-    (acc, item) => acc + item.price * item.quantity,\r\n-    0\r\n-  );\r\n-\r\n-  if (loading) return <CartSkeleton />;\r\n-\r\n-  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n-\r\n-  const router = useRouter();\r\n-\r\n-  const gotoCheckout = () => {\r\n-    router.push('/checkout'); // replace '/checkout' with your actual checkout route\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"max-w-5xl mx-auto p-4 sm:p-6 lg:p-8\">\r\n-      <h1 className=\"text-2xl sm:text-3xl font-bold mb-6 text-blue-700\">\r\n-        Your Cart\r\n-      </h1>\r\n-\r\n-      <BackButton />\r\n-\r\n-      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n-        <strong>Note:</strong> Please review your items before proceeding to checkout. Ensure quantities are correct and items are as expected !.\r\n-      </div>\r\n-\r\n-      {cartItems.length === 0 ? (\r\n-        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n-      ) : (\r\n-        <div className=\"space-y-6\">\r\n-          {cartItems.map(item => (\r\n-            <div\r\n-              key={item.id}\r\n-              className=\"flex flex-col sm:flex-row sm:items-center gap-4 p-4 rounded-lg shadow-md bg-white\"\r\n-            >\r\n-              <img\r\n-                src={item.imageSrc}\r\n-                alt={item.name}\r\n-                className=\"w-full sm:w-24 h-24 object-cover rounded-md\"\r\n-              />\r\n-\r\n-              <div className=\"flex-1 flex flex-col gap-1\">\r\n-                <h2 className=\"font-semibold text-lg sm:text-xl\">{item.name}</h2>\r\n-                <p className=\"text-gray-600\">Rs {item.price.toFixed(2)}</p>\r\n-\r\n-                <div className=\"flex items-center mt-2 space-x-3\">\r\n-                  <button\r\n-                    onClick={() => decreaseQty(item.id)}\r\n-                    className=\"p-2 rounded bg-gray-200 hover:bg-gray-300 transition\"\r\n-                    aria-label=\"Decrease quantity\"\r\n-                  >\r\n-                    <FaMinus />\r\n-                  </button>\r\n-                  <span className=\"text-md font-medium\">{item.quantity}</span>\r\n-                  <button\r\n-                    onClick={() => increaseQty(item.id)}\r\n-                    className=\"p-2 rounded bg-gray-200 hover:bg-gray-300 transition\"\r\n-                    aria-label=\"Increase quantity\"\r\n-                  >\r\n-                    <FaPlus />\r\n-                  </button>\r\n-                </div>\r\n-              </div>\r\n-\r\n-              <div className=\"flex flex-col items-end justify-between\">\r\n-                <p className=\"font-semibold text-lg\">\r\n-                  Rs {(item.price * item.quantity).toFixed(2)}\r\n-                </p>\r\n-                <button\r\n-                  onClick={() => removeItem(item.id)}\r\n-                  className=\"text-red-500 hover:text-red-700 mt-2 sm:mt-0 transition\"\r\n-                  aria-label=\"Remove item\"\r\n-                >\r\n-                  <FaTrash />\r\n-                </button>\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-\r\n-          {/* Checkout Section */}\r\n-          <div className=\"text-right mt-8 border-t pt-4\">\r\n-            <p className=\"text-xl sm:text-2xl font-bold text-gray-800\">\r\n-              Total: Rs {totalPrice.toFixed(2)}\r\n-            </p>\r\n-            <button\r\n-              disabled={cartItems.length === 0}\r\n-              onClick={gotoCheckout}\r\n-              className=\"mt-3 bg-blue-600 text-white px-6 py-3 rounded hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\r\n-            >\r\n-              Proceed to Checkout\r\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n"
                }
            ],
            "date": 1748774659039,
            "name": "Commit-0",
            "content": ""
        }
    ]
}