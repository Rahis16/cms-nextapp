{
    "sourceFile": "app/checkout/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 62,
            "patches": [
                {
                    "date": 1748772985947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748775786295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n 'use client';\r\n \r\n-import { useState } from 'react';\r\n+import { useState, useEffect } from 'react';\r\n \r\n interface CartItem {\r\n   id: number;\r\n   name: string;\r\n@@ -9,26 +9,39 @@\n   quantity: number;\r\n   image: string;\r\n }\r\n \r\n+import CheckoutSkeleton from './CheckoutSkeleton';\r\n+\r\n export default function CheckoutPage() {\r\n-  const [cartItems, setCartItems] = useState<CartItem[]>([\r\n-    {\r\n-      id: 1,\r\n-      name: 'Margherita Pizza',\r\n-      price: 299,\r\n-      quantity: 1,\r\n-      image: '/images/pizza.jpg',\r\n-    },\r\n-    {\r\n-      id: 2,\r\n-      name: 'Cheeseburger',\r\n-      price: 199,\r\n-      quantity: 2,\r\n-      image: '/images/burger.jpg',\r\n-    },\r\n-  ]);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n \r\n+  useEffect(() => {\r\n+    // Simulate loading delay\r\n+    const timer = setTimeout(() => {\r\n+      setCartItems([\r\n+        {\r\n+          id: 1,\r\n+          name: 'Margherita Pizza',\r\n+          price: 299,\r\n+          quantity: 1,\r\n+          image: '/images/pizza.jpg',\r\n+        },\r\n+        {\r\n+          id: 2,\r\n+          name: 'Cheeseburger',\r\n+          price: 199,\r\n+          quantity: 2,\r\n+          image: '/images/burger.jpg',\r\n+        },\r\n+      ]);\r\n+      setLoading(false);\r\n+    }, 2000); // 2 seconds delay\r\n+\r\n+    return () => clearTimeout(timer);\r\n+  }, []);\r\n+\r\n   const handleQuantityChange = (id: number, delta: number) => {\r\n     setCartItems((prevItems) =>\r\n       prevItems.map((item) =>\r\n         item.id === id\r\n@@ -42,8 +55,12 @@\n   };\r\n \r\n   const total = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);\r\n \r\n+  if (loading) {\r\n+    return <CheckoutSkeleton />;\r\n+  }\r\n+\r\n   return (\r\n     <div className=\"max-w-4xl mx-auto p-6\">\r\n       <h1 className=\"text-2xl font-semibold mb-6\">Checkout</h1>\r\n \r\n"
                },
                {
                    "date": 1748775798175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,114 @@\n+'use client';\r\n+\r\n+import { useState, useEffect } from 'react';\r\n+\r\n+interface CartItem {\r\n+  id: number;\r\n+  name: string;\r\n+  price: number;\r\n+  quantity: number;\r\n+  image: string;\r\n+}\r\n+\r\n+import CheckoutSkeleton from '@';\r\n+\r\n+export default function CheckoutPage() {\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n+\r\n+  useEffect(() => {\r\n+    // Simulate loading delay\r\n+    const timer = setTimeout(() => {\r\n+      setCartItems([\r\n+        {\r\n+          id: 1,\r\n+          name: 'Margherita Pizza',\r\n+          price: 299,\r\n+          quantity: 1,\r\n+          image: '/images/pizza.jpg',\r\n+        },\r\n+        {\r\n+          id: 2,\r\n+          name: 'Cheeseburger',\r\n+          price: 199,\r\n+          quantity: 2,\r\n+          image: '/images/burger.jpg',\r\n+        },\r\n+      ]);\r\n+      setLoading(false);\r\n+    }, 2000); // 2 seconds delay\r\n+\r\n+    return () => clearTimeout(timer);\r\n+  }, []);\r\n+\r\n+  const handleQuantityChange = (id: number, delta: number) => {\r\n+    setCartItems((prevItems) =>\r\n+      prevItems.map((item) =>\r\n+        item.id === id\r\n+          ? {\r\n+              ...item,\r\n+              quantity: Math.max(item.quantity + delta, 1),\r\n+            }\r\n+          : item\r\n+      )\r\n+    );\r\n+  };\r\n+\r\n+  const total = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);\r\n+\r\n+  if (loading) {\r\n+    return <CheckoutSkeleton />;\r\n+  }\r\n+\r\n+  return (\r\n+    <div className=\"max-w-4xl mx-auto p-6\">\r\n+      <h1 className=\"text-2xl font-semibold mb-6\">Checkout</h1>\r\n+\r\n+      <div className=\"space-y-4\">\r\n+        {cartItems.map((item) => (\r\n+          <div\r\n+            key={item.id}\r\n+            className=\"flex items-center justify-between bg-white rounded-lg shadow p-4\"\r\n+          >\r\n+            <div className=\"flex items-center space-x-4\">\r\n+              <img src={item.image} alt={item.name} className=\"h-16 w-16 object-cover rounded\" />\r\n+              <div>\r\n+                <h2 className=\"text-lg font-medium\">{item.name}</h2>\r\n+                <p className=\"text-gray-500\">₹{item.price}</p>\r\n+              </div>\r\n+            </div>\r\n+            <div className=\"flex items-center space-x-3\">\r\n+              <button\r\n+                onClick={() => handleQuantityChange(item.id, -1)}\r\n+                className=\"bg-gray-200 px-2 rounded\"\r\n+              >\r\n+                −\r\n+              </button>\r\n+              <span>{item.quantity}</span>\r\n+              <button\r\n+                onClick={() => handleQuantityChange(item.id, 1)}\r\n+                className=\"bg-gray-200 px-2 rounded\"\r\n+              >\r\n+                +\r\n+              </button>\r\n+            </div>\r\n+            <div className=\"text-right\">\r\n+              <p className=\"text-sm text-gray-600\">Subtotal</p>\r\n+              <p className=\"font-semibold\">₹{item.price * item.quantity}</p>\r\n+            </div>\r\n+          </div>\r\n+        ))}\r\n+      </div>\r\n+\r\n+      <div className=\"mt-8 border-t pt-6 flex justify-between items-center\">\r\n+        <div>\r\n+          <h2 className=\"text-xl font-semibold\">Total:</h2>\r\n+          <p className=\"text-lg text-green-600 font-bold\">₹{total}</p>\r\n+        </div>\r\n+        <button className=\"bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-md text-lg\">\r\n+          Proceed to Payment\r\n+        </button>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1748775806114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n   quantity: number;\r\n   image: string;\r\n }\r\n \r\n-import CheckoutSkeleton from '@';\r\n+import CheckoutSkeleton from '@/components/CheckoutSkeleton';\r\n \r\n export default function CheckoutPage() {\r\n   const [loading, setLoading] = useState(true);\r\n   const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n@@ -111,118 +111,4 @@\n       </div>\r\n     </div>\r\n   );\r\n }\r\n-'use client';\r\n-\r\n-import { useState, useEffect } from 'react';\r\n-\r\n-interface CartItem {\r\n-  id: number;\r\n-  name: string;\r\n-  price: number;\r\n-  quantity: number;\r\n-  image: string;\r\n-}\r\n-\r\n-import CheckoutSkeleton from './CheckoutSkeleton';\r\n-\r\n-export default function CheckoutPage() {\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n-\r\n-  useEffect(() => {\r\n-    // Simulate loading delay\r\n-    const timer = setTimeout(() => {\r\n-      setCartItems([\r\n-        {\r\n-          id: 1,\r\n-          name: 'Margherita Pizza',\r\n-          price: 299,\r\n-          quantity: 1,\r\n-          image: '/images/pizza.jpg',\r\n-        },\r\n-        {\r\n-          id: 2,\r\n-          name: 'Cheeseburger',\r\n-          price: 199,\r\n-          quantity: 2,\r\n-          image: '/images/burger.jpg',\r\n-        },\r\n-      ]);\r\n-      setLoading(false);\r\n-    }, 2000); // 2 seconds delay\r\n-\r\n-    return () => clearTimeout(timer);\r\n-  }, []);\r\n-\r\n-  const handleQuantityChange = (id: number, delta: number) => {\r\n-    setCartItems((prevItems) =>\r\n-      prevItems.map((item) =>\r\n-        item.id === id\r\n-          ? {\r\n-              ...item,\r\n-              quantity: Math.max(item.quantity + delta, 1),\r\n-            }\r\n-          : item\r\n-      )\r\n-    );\r\n-  };\r\n-\r\n-  const total = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);\r\n-\r\n-  if (loading) {\r\n-    return <CheckoutSkeleton />;\r\n-  }\r\n-\r\n-  return (\r\n-    <div className=\"max-w-4xl mx-auto p-6\">\r\n-      <h1 className=\"text-2xl font-semibold mb-6\">Checkout</h1>\r\n-\r\n-      <div className=\"space-y-4\">\r\n-        {cartItems.map((item) => (\r\n-          <div\r\n-            key={item.id}\r\n-            className=\"flex items-center justify-between bg-white rounded-lg shadow p-4\"\r\n-          >\r\n-            <div className=\"flex items-center space-x-4\">\r\n-              <img src={item.image} alt={item.name} className=\"h-16 w-16 object-cover rounded\" />\r\n-              <div>\r\n-                <h2 className=\"text-lg font-medium\">{item.name}</h2>\r\n-                <p className=\"text-gray-500\">₹{item.price}</p>\r\n-              </div>\r\n-            </div>\r\n-            <div className=\"flex items-center space-x-3\">\r\n-              <button\r\n-                onClick={() => handleQuantityChange(item.id, -1)}\r\n-                className=\"bg-gray-200 px-2 rounded\"\r\n-              >\r\n-                −\r\n-              </button>\r\n-              <span>{item.quantity}</span>\r\n-              <button\r\n-                onClick={() => handleQuantityChange(item.id, 1)}\r\n-                className=\"bg-gray-200 px-2 rounded\"\r\n-              >\r\n-                +\r\n-              </button>\r\n-            </div>\r\n-            <div className=\"text-right\">\r\n-              <p className=\"text-sm text-gray-600\">Subtotal</p>\r\n-              <p className=\"font-semibold\">₹{item.price * item.quantity}</p>\r\n-            </div>\r\n-          </div>\r\n-        ))}\r\n-      </div>\r\n-\r\n-      <div className=\"mt-8 border-t pt-6 flex justify-between items-center\">\r\n-        <div>\r\n-          <h2 className=\"text-xl font-semibold\">Total:</h2>\r\n-          <p className=\"text-lg text-green-600 font-bold\">₹{total}</p>\r\n-        </div>\r\n-        <button className=\"bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-md text-lg\">\r\n-          Proceed to Payment\r\n-        </button>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1748784130696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,114 @@\n+'use client';\r\n+\r\n+import { useState, useEffect } from 'react';\r\n+\r\n+interface CartItem {\r\n+  id: number;\r\n+  name: string;\r\n+  price: number;\r\n+  quantity: number;\r\n+  image: string;\r\n+}\r\n+\r\n+import CheckoutSkeleton from '@/components/CheckoutSkeleton';\r\n+\r\n+export default function CheckoutPage() {\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n+\r\n+  useEffect(() => {\r\n+    // Simulate loading delay\r\n+    const timer = setTimeout(() => {\r\n+      setCartItems([\r\n+        {\r\n+          id: 1,\r\n+          name: 'Margherita Pizza',\r\n+          price: 299,\r\n+          quantity: 1,\r\n+          image: '/images/pizza.jpg',\r\n+        },\r\n+        {\r\n+          id: 2,\r\n+          name: 'Cheeseburger',\r\n+          price: 199,\r\n+          quantity: 2,\r\n+          image: '/images/burger.jpg',\r\n+        },\r\n+      ]);\r\n+      setLoading(false);\r\n+    }, 2000); // 2 seconds delay\r\n+\r\n+    return () => clearTimeout(timer);\r\n+  }, []);\r\n+\r\n+  const handleQuantityChange = (id: number, delta: number) => {\r\n+    setCartItems((prevItems) =>\r\n+      prevItems.map((item) =>\r\n+        item.id === id\r\n+          ? {\r\n+              ...item,\r\n+              quantity: Math.max(item.quantity + delta, 1),\r\n+            }\r\n+          : item\r\n+      )\r\n+    );\r\n+  };\r\n+\r\n+  const total = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);\r\n+\r\n+  if (loading) {\r\n+    return <CheckoutSkeleton />;\r\n+  }\r\n+\r\n+  return (\r\n+    <div className=\"max-w-4xl mx-auto p-1\">\r\n+      <h1 className=\"text-2xl font-semibold mb-6\">Checkout</h1>\r\n+\r\n+      <div className=\"space-y-4\">\r\n+        {cartItems.map((item) => (\r\n+          <div\r\n+            key={item.id}\r\n+            className=\"flex items-center justify-between bg-white rounded-lg shadow p-4\"\r\n+          >\r\n+            <div className=\"flex items-center space-x-4\">\r\n+              <img src={item.image} alt={item.name} className=\"h-16 w-16 object-cover rounded\" />\r\n+              <div>\r\n+                <h2 className=\"text-lg font-medium\">{item.name}</h2>\r\n+                <p className=\"text-gray-500\">₹{item.price}</p>\r\n+              </div>\r\n+            </div>\r\n+            <div className=\"flex items-center space-x-3\">\r\n+              <button\r\n+                onClick={() => handleQuantityChange(item.id, -1)}\r\n+                className=\"bg-gray-200 px-2 rounded\"\r\n+              >\r\n+                −\r\n+              </button>\r\n+              <span>{item.quantity}</span>\r\n+              <button\r\n+                onClick={() => handleQuantityChange(item.id, 1)}\r\n+                className=\"bg-gray-200 px-2 rounded\"\r\n+              >\r\n+                +\r\n+              </button>\r\n+            </div>\r\n+            <div className=\"text-right\">\r\n+              <p className=\"text-sm text-gray-600\">Subtotal</p>\r\n+              <p className=\"font-semibold\">₹{item.price * item.quantity}</p>\r\n+            </div>\r\n+          </div>\r\n+        ))}\r\n+      </div>\r\n+\r\n+      <div className=\"mt-8 border-t pt-6 flex justify-between items-center\">\r\n+        <div>\r\n+          <h2 className=\"text-xl font-semibold\">Total:</h2>\r\n+          <p className=\"text-lg text-green-600 font-bold\">₹{total}</p>\r\n+        </div>\r\n+        <button className=\"bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-md text-lg\">\r\n+          Proceed to Payment\r\n+        </button>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1748784226867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n     return <CheckoutSkeleton />;\r\n   }\r\n \r\n   return (\r\n-    <div className=\"max-w-4xl mx-auto p-1\">\r\n+    <div className=\"max-w-4xl mx-auto p-2\">\r\n       <h1 className=\"text-2xl font-semibold mb-6\">Checkout</h1>\r\n \r\n       <div className=\"space-y-4\">\r\n         {cartItems.map((item) => (\r\n@@ -111,118 +111,4 @@\n       </div>\r\n     </div>\r\n   );\r\n }\r\n-'use client';\r\n-\r\n-import { useState, useEffect } from 'react';\r\n-\r\n-interface CartItem {\r\n-  id: number;\r\n-  name: string;\r\n-  price: number;\r\n-  quantity: number;\r\n-  image: string;\r\n-}\r\n-\r\n-import CheckoutSkeleton from '@/components/CheckoutSkeleton';\r\n-\r\n-export default function CheckoutPage() {\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n-\r\n-  useEffect(() => {\r\n-    // Simulate loading delay\r\n-    const timer = setTimeout(() => {\r\n-      setCartItems([\r\n-        {\r\n-          id: 1,\r\n-          name: 'Margherita Pizza',\r\n-          price: 299,\r\n-          quantity: 1,\r\n-          image: '/images/pizza.jpg',\r\n-        },\r\n-        {\r\n-          id: 2,\r\n-          name: 'Cheeseburger',\r\n-          price: 199,\r\n-          quantity: 2,\r\n-          image: '/images/burger.jpg',\r\n-        },\r\n-      ]);\r\n-      setLoading(false);\r\n-    }, 2000); // 2 seconds delay\r\n-\r\n-    return () => clearTimeout(timer);\r\n-  }, []);\r\n-\r\n-  const handleQuantityChange = (id: number, delta: number) => {\r\n-    setCartItems((prevItems) =>\r\n-      prevItems.map((item) =>\r\n-        item.id === id\r\n-          ? {\r\n-              ...item,\r\n-              quantity: Math.max(item.quantity + delta, 1),\r\n-            }\r\n-          : item\r\n-      )\r\n-    );\r\n-  };\r\n-\r\n-  const total = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);\r\n-\r\n-  if (loading) {\r\n-    return <CheckoutSkeleton />;\r\n-  }\r\n-\r\n-  return (\r\n-    <div className=\"max-w-4xl mx-auto p-6\">\r\n-      <h1 className=\"text-2xl font-semibold mb-6\">Checkout</h1>\r\n-\r\n-      <div className=\"space-y-4\">\r\n-        {cartItems.map((item) => (\r\n-          <div\r\n-            key={item.id}\r\n-            className=\"flex items-center justify-between bg-white rounded-lg shadow p-4\"\r\n-          >\r\n-            <div className=\"flex items-center space-x-4\">\r\n-              <img src={item.image} alt={item.name} className=\"h-16 w-16 object-cover rounded\" />\r\n-              <div>\r\n-                <h2 className=\"text-lg font-medium\">{item.name}</h2>\r\n-                <p className=\"text-gray-500\">₹{item.price}</p>\r\n-              </div>\r\n-            </div>\r\n-            <div className=\"flex items-center space-x-3\">\r\n-              <button\r\n-                onClick={() => handleQuantityChange(item.id, -1)}\r\n-                className=\"bg-gray-200 px-2 rounded\"\r\n-              >\r\n-                −\r\n-              </button>\r\n-              <span>{item.quantity}</span>\r\n-              <button\r\n-                onClick={() => handleQuantityChange(item.id, 1)}\r\n-                className=\"bg-gray-200 px-2 rounded\"\r\n-              >\r\n-                +\r\n-              </button>\r\n-            </div>\r\n-            <div className=\"text-right\">\r\n-              <p className=\"text-sm text-gray-600\">Subtotal</p>\r\n-              <p className=\"font-semibold\">₹{item.price * item.quantity}</p>\r\n-            </div>\r\n-          </div>\r\n-        ))}\r\n-      </div>\r\n-\r\n-      <div className=\"mt-8 border-t pt-6 flex justify-between items-center\">\r\n-        <div>\r\n-          <h2 className=\"text-xl font-semibold\">Total:</h2>\r\n-          <p className=\"text-lg text-green-600 font-bold\">₹{total}</p>\r\n-        </div>\r\n-        <button className=\"bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-md text-lg\">\r\n-          Proceed to Payment\r\n-        </button>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1748784507276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n 'use client';\r\n \r\n import { useState, useEffect } from 'react';\r\n+import CheckoutSkeleton from '@/components/CheckoutSkeleton';\r\n \r\n interface CartItem {\r\n   id: number;\r\n   name: string;\r\n@@ -9,16 +10,13 @@\n   quantity: number;\r\n   image: string;\r\n }\r\n \r\n-import CheckoutSkeleton from '@/components/CheckoutSkeleton';\r\n-\r\n export default function CheckoutPage() {\r\n   const [loading, setLoading] = useState(true);\r\n   const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n \r\n   useEffect(() => {\r\n-    // Simulate loading delay\r\n     const timer = setTimeout(() => {\r\n       setCartItems([\r\n         {\r\n           id: 1,\r\n@@ -35,9 +33,9 @@\n           image: '/images/burger.jpg',\r\n         },\r\n       ]);\r\n       setLoading(false);\r\n-    }, 2000); // 2 seconds delay\r\n+    }, 2000);\r\n \r\n     return () => clearTimeout(timer);\r\n   }, []);\r\n \r\n@@ -53,60 +51,71 @@\n       )\r\n     );\r\n   };\r\n \r\n-  const total = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);\r\n+  const total = cartItems.reduce(\r\n+    (sum, item) => sum + item.price * item.quantity,\r\n+    0\r\n+  );\r\n \r\n   if (loading) {\r\n     return <CheckoutSkeleton />;\r\n   }\r\n \r\n   return (\r\n-    <div className=\"max-w-4xl mx-auto p-2\">\r\n-      <h1 className=\"text-2xl font-semibold mb-6\">Checkout</h1>\r\n+    <div className=\"max-w-4xl mx-auto px-2 sm:px-4 py-4\">\r\n+      <h1 className=\"text-2xl sm:text-3xl font-bold mb-6 text-blue-700 text-center sm:text-left\">Checkout</h1>\r\n \r\n       <div className=\"space-y-4\">\r\n         {cartItems.map((item) => (\r\n           <div\r\n             key={item.id}\r\n-            className=\"flex items-center justify-between bg-white rounded-lg shadow p-4\"\r\n+            className=\"flex flex-col sm:flex-row items-center sm:items-start justify-between bg-white rounded-lg shadow-md p-4 gap-y-4 sm:gap-y-0 sm:gap-x-6\"\r\n           >\r\n-            <div className=\"flex items-center space-x-4\">\r\n-              <img src={item.image} alt={item.name} className=\"h-16 w-16 object-cover rounded\" />\r\n+            <div className=\"flex items-center space-x-4 w-full sm:w-1/2\">\r\n+              <img\r\n+                src={item.image}\r\n+                alt={item.name}\r\n+                className=\"h-16 w-16 sm:h-20 sm:w-20 object-cover rounded\"\r\n+              />\r\n               <div>\r\n-                <h2 className=\"text-lg font-medium\">{item.name}</h2>\r\n-                <p className=\"text-gray-500\">₹{item.price}</p>\r\n+                <h2 className=\"text-base sm:text-lg font-medium\">{item.name}</h2>\r\n+                <p className=\"text-gray-500 text-sm sm:text-base\">₹{item.price}</p>\r\n               </div>\r\n             </div>\r\n-            <div className=\"flex items-center space-x-3\">\r\n+\r\n+            <div className=\"flex items-center space-x-3 sm:space-x-4\">\r\n               <button\r\n                 onClick={() => handleQuantityChange(item.id, -1)}\r\n-                className=\"bg-gray-200 px-2 rounded\"\r\n+                className=\"bg-gray-200 text-lg px-2 rounded hover:bg-gray-300\"\r\n               >\r\n                 −\r\n               </button>\r\n-              <span>{item.quantity}</span>\r\n+              <span className=\"text-sm sm:text-base\">{item.quantity}</span>\r\n               <button\r\n                 onClick={() => handleQuantityChange(item.id, 1)}\r\n-                className=\"bg-gray-200 px-2 rounded\"\r\n+                className=\"bg-gray-200 text-lg px-2 rounded hover:bg-gray-300\"\r\n               >\r\n                 +\r\n               </button>\r\n             </div>\r\n-            <div className=\"text-right\">\r\n-              <p className=\"text-sm text-gray-600\">Subtotal</p>\r\n-              <p className=\"font-semibold\">₹{item.price * item.quantity}</p>\r\n+\r\n+            <div className=\"text-right sm:text-left mt-2 sm:mt-0\">\r\n+              <p className=\"text-xs text-gray-500\">Subtotal</p>\r\n+              <p className=\"font-semibold text-sm sm:text-base\">\r\n+                ₹{item.price * item.quantity}\r\n+              </p>\r\n             </div>\r\n           </div>\r\n         ))}\r\n       </div>\r\n \r\n-      <div className=\"mt-8 border-t pt-6 flex justify-between items-center\">\r\n+      <div className=\"mt-8 border-t pt-6 flex flex-col sm:flex-row justify-between items-center gap-4\">\r\n         <div>\r\n-          <h2 className=\"text-xl font-semibold\">Total:</h2>\r\n-          <p className=\"text-lg text-green-600 font-bold\">₹{total}</p>\r\n+          <h2 className=\"text-lg sm:text-xl font-semibold text-gray-700\">Total:</h2>\r\n+          <p className=\"text-green-600 text-xl font-bold\">₹{total}</p>\r\n         </div>\r\n-        <button className=\"bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-md text-lg\">\r\n+        <button className=\"w-full sm:w-auto bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-md text-base sm:text-lg transition\">\r\n           Proceed to Payment\r\n         </button>\r\n       </div>\r\n     </div>\r\n"
                },
                {
                    "date": 1748790107795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n \r\n       <div className=\"mt-8 border-t pt-6 flex flex-col sm:flex-row justify-between items-center gap-4\">\r\n         <div>\r\n           <h2 className=\"text-lg sm:text-xl font-semibold text-gray-700\">Total:</h2>\r\n-          <p className=\"text-green-600 text-xl font-bold\">₹{total}</p>\r\n+          <p className=\"text-green-600 text-xl font-bold\">Rs {total}</p>\r\n         </div>\r\n         <button className=\"w-full sm:w-auto bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-md text-base sm:text-lg transition\">\r\n           Proceed to Payment\r\n         </button>\r\n"
                },
                {
                    "date": 1748790177202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n \r\n             <div className=\"text-right sm:text-left mt-2 sm:mt-0\">\r\n               <p className=\"text-xs text-gray-500\">Subtotal</p>\r\n               <p className=\"font-semibold text-sm sm:text-base\">\r\n-                ₹{item.price * item.quantity}\r\n+                Rs {item.price * item.quantity}\r\n               </p>\r\n             </div>\r\n           </div>\r\n         ))}\r\n"
                },
                {
                    "date": 1749071256190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n 'use client';\r\n \r\n import { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n import CheckoutSkeleton from '@/components/CheckoutSkeleton';\r\n+import { toast } from 'react-hot-toast';\r\n \r\n interface CartItem {\r\n   id: number;\r\n   name: string;\r\n@@ -14,43 +16,46 @@\n export default function CheckoutPage() {\r\n   const [loading, setLoading] = useState(true);\r\n   const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n \r\n+  // Fetch cart items using your correct API path\r\n   useEffect(() => {\r\n-    const timer = setTimeout(() => {\r\n-      setCartItems([\r\n-        {\r\n-          id: 1,\r\n-          name: 'Margherita Pizza',\r\n-          price: 299,\r\n-          quantity: 1,\r\n-          image: '/images/pizza.jpg',\r\n-        },\r\n-        {\r\n-          id: 2,\r\n-          name: 'Cheeseburger',\r\n-          price: 199,\r\n-          quantity: 2,\r\n-          image: '/images/burger.jpg',\r\n-        },\r\n-      ]);\r\n-      setLoading(false);\r\n-    }, 2000);\r\n+    const fetchCartItems = async () => {\r\n+      try {\r\n+        const res = await axios.get('/api/cart/items/');\r\n+        setCartItems(res.data);\r\n+        setLoading(false);\r\n+      } catch (err) {\r\n+        toast.error('Failed to load cart items.');\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n \r\n-    return () => clearTimeout(timer);\r\n+    fetchCartItems();\r\n   }, []);\r\n \r\n-  const handleQuantityChange = (id: number, delta: number) => {\r\n-    setCartItems((prevItems) =>\r\n-      prevItems.map((item) =>\r\n-        item.id === id\r\n-          ? {\r\n-              ...item,\r\n-              quantity: Math.max(item.quantity + delta, 1),\r\n-            }\r\n-          : item\r\n-      )\r\n-    );\r\n+  // Update quantity using your correct API path\r\n+  const handleQuantityChange = async (id: number, delta: number) => {\r\n+    const item = cartItems.find((item) => item.id === id);\r\n+    if (!item) return;\r\n+\r\n+    const newQuantity = item.quantity + delta;\r\n+    if (newQuantity < 1) return;\r\n+\r\n+    try {\r\n+      await axios.post('/api/cart/update/', {\r\n+        cart_item_id: id,\r\n+        quantity: newQuantity,\r\n+      });\r\n+\r\n+      setCartItems((prevItems) =>\r\n+        prevItems.map((item) =>\r\n+          item.id === id ? { ...item, quantity: newQuantity } : item\r\n+        )\r\n+      );\r\n+    } catch (error) {\r\n+      toast.error('Failed to update quantity.');\r\n+    }\r\n   };\r\n \r\n   const total = cartItems.reduce(\r\n     (sum, item) => sum + item.price * item.quantity,\r\n@@ -62,9 +67,11 @@\n   }\r\n \r\n   return (\r\n     <div className=\"max-w-4xl mx-auto px-2 sm:px-4 py-4\">\r\n-      <h1 className=\"text-2xl sm:text-3xl font-bold mb-6 text-blue-700 text-center sm:text-left\">Checkout</h1>\r\n+      <h1 className=\"text-2xl sm:text-3xl font-bold mb-6 text-blue-700 text-center sm:text-left\">\r\n+        Checkout\r\n+      </h1>\r\n \r\n       <div className=\"space-y-4\">\r\n         {cartItems.map((item) => (\r\n           <div\r\n@@ -78,9 +85,9 @@\n                 className=\"h-16 w-16 sm:h-20 sm:w-20 object-cover rounded\"\r\n               />\r\n               <div>\r\n                 <h2 className=\"text-base sm:text-lg font-medium\">{item.name}</h2>\r\n-                <p className=\"text-gray-500 text-sm sm:text-base\">₹{item.price}</p>\r\n+                <p className=\"text-gray-500 text-sm sm:text-base\">Rs {item.price}</p>\r\n               </div>\r\n             </div>\r\n \r\n             <div className=\"flex items-center space-x-3 sm:space-x-4\">\r\n"
                },
                {
                    "date": 1749071286612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n import { useState, useEffect } from 'react';\r\n import axios from 'axios';\r\n import CheckoutSkeleton from '@/components/CheckoutSkeleton';\r\n-import { toast } from 'react-hot-toast';\r\n+// import { toast } from 'react-hot-toast';\r\n \r\n interface CartItem {\r\n   id: number;\r\n   name: string;\r\n"
                },
                {
                    "date": 1749071316889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,130 @@\n+'use client';\r\n+\r\n+import { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+import CheckoutSkeleton from '@/components/CheckoutSkeleton';\r\n+import { toast } from 'react-hot-toast';\r\n+\r\n+interface CartItem {\r\n+  id: number;\r\n+  name: string;\r\n+  price: number;\r\n+  quantity: number;\r\n+  image: string;\r\n+}\r\n+\r\n+export default function CheckoutPage() {\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n+\r\n+  // Fetch cart items using your correct API path\r\n+  useEffect(() => {\r\n+    const fetchCartItems = async () => {\r\n+      try {\r\n+        const res = await axios.get('/api/cart/items/');\r\n+        setCartItems(res.data);\r\n+        setLoading(false);\r\n+      } catch (err) {\r\n+        toast.error('Failed to load cart items.');\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchCartItems();\r\n+  }, []);\r\n+\r\n+  // Update quantity using your correct API path\r\n+  const handleQuantityChange = async (id: number, delta: number) => {\r\n+    const item = cartItems.find((item) => item.id === id);\r\n+    if (!item) return;\r\n+\r\n+    const newQuantity = item.quantity + delta;\r\n+    if (newQuantity < 1) return;\r\n+\r\n+    try {\r\n+      await axios.post('/api/cart/update/', {\r\n+        cart_item_id: id,\r\n+        quantity: newQuantity,\r\n+      });\r\n+\r\n+      setCartItems((prevItems) =>\r\n+        prevItems.map((item) =>\r\n+          item.id === id ? { ...item, quantity: newQuantity } : item\r\n+        )\r\n+      );\r\n+    } catch (error) {\r\n+      toast.error('Failed to update quantity.');\r\n+    }\r\n+  };\r\n+\r\n+  const total = cartItems.reduce(\r\n+    (sum, item) => sum + item.price * item.quantity,\r\n+    0\r\n+  );\r\n+\r\n+  if (loading) {\r\n+    return <CheckoutSkeleton />;\r\n+  }\r\n+\r\n+  return (\r\n+    <div className=\"max-w-4xl mx-auto px-2 sm:px-4 py-4\">\r\n+      <h1 className=\"text-2xl sm:text-3xl font-bold mb-6 text-blue-700 text-center sm:text-left\">\r\n+        Checkout\r\n+      </h1>\r\n+\r\n+      <div className=\"space-y-4\">\r\n+        {cartItems.map((item) => (\r\n+          <div\r\n+            key={item.id}\r\n+            className=\"flex flex-col sm:flex-row items-center sm:items-start justify-between bg-white rounded-lg shadow-md p-4 gap-y-4 sm:gap-y-0 sm:gap-x-6\"\r\n+          >\r\n+            <div className=\"flex items-center space-x-4 w-full sm:w-1/2\">\r\n+              <img\r\n+                src={item.image}\r\n+                alt={item.name}\r\n+                className=\"h-16 w-16 sm:h-20 sm:w-20 object-cover rounded\"\r\n+              />\r\n+              <div>\r\n+                <h2 className=\"text-base sm:text-lg font-medium\">{item.name}</h2>\r\n+                <p className=\"text-gray-500 text-sm sm:text-base\">Rs {item.price}</p>\r\n+              </div>\r\n+            </div>\r\n+\r\n+            <div className=\"flex items-center space-x-3 sm:space-x-4\">\r\n+              <button\r\n+                onClick={() => handleQuantityChange(item.id, -1)}\r\n+                className=\"bg-gray-200 text-lg px-2 rounded hover:bg-gray-300\"\r\n+              >\r\n+                −\r\n+              </button>\r\n+              <span className=\"text-sm sm:text-base\">{item.quantity}</span>\r\n+              <button\r\n+                onClick={() => handleQuantityChange(item.id, 1)}\r\n+                className=\"bg-gray-200 text-lg px-2 rounded hover:bg-gray-300\"\r\n+              >\r\n+                +\r\n+              </button>\r\n+            </div>\r\n+\r\n+            <div className=\"text-right sm:text-left mt-2 sm:mt-0\">\r\n+              <p className=\"text-xs text-gray-500\">Subtotal</p>\r\n+              <p className=\"font-semibold text-sm sm:text-base\">\r\n+                Rs {item.price * item.quantity}\r\n+              </p>\r\n+            </div>\r\n+          </div>\r\n+        ))}\r\n+      </div>\r\n+\r\n+      <div className=\"mt-8 border-t pt-6 flex flex-col sm:flex-row justify-between items-center gap-4\">\r\n+        <div>\r\n+          <h2 className=\"text-lg sm:text-xl font-semibold text-gray-700\">Total:</h2>\r\n+          <p className=\"text-green-600 text-xl font-bold\">Rs {total}</p>\r\n+        </div>\r\n+        <button className=\"w-full sm:w-auto bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-md text-base sm:text-lg transition\">\r\n+          Proceed to Payment\r\n+        </button>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1749071326096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,8 @@\n 'use client';\r\n \r\n import { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n import CheckoutSkeleton from '@/components/CheckoutSkeleton';\r\n-import { toast } from 'react-hot-toast';\r\n \r\n interface CartItem {\r\n   id: number;\r\n   name: string;\r\n@@ -16,46 +14,43 @@\n export default function CheckoutPage() {\r\n   const [loading, setLoading] = useState(true);\r\n   const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n \r\n-  // Fetch cart items using your correct API path\r\n   useEffect(() => {\r\n-    const fetchCartItems = async () => {\r\n-      try {\r\n-        const res = await axios.get('/api/cart/items/');\r\n-        setCartItems(res.data);\r\n-        setLoading(false);\r\n-      } catch (err) {\r\n-        toast.error('Failed to load cart items.');\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n+    const timer = setTimeout(() => {\r\n+      setCartItems([\r\n+        {\r\n+          id: 1,\r\n+          name: 'Margherita Pizza',\r\n+          price: 299,\r\n+          quantity: 1,\r\n+          image: '/images/pizza.jpg',\r\n+        },\r\n+        {\r\n+          id: 2,\r\n+          name: 'Cheeseburger',\r\n+          price: 199,\r\n+          quantity: 2,\r\n+          image: '/images/burger.jpg',\r\n+        },\r\n+      ]);\r\n+      setLoading(false);\r\n+    }, 2000);\r\n \r\n-    fetchCartItems();\r\n+    return () => clearTimeout(timer);\r\n   }, []);\r\n \r\n-  // Update quantity using your correct API path\r\n-  const handleQuantityChange = async (id: number, delta: number) => {\r\n-    const item = cartItems.find((item) => item.id === id);\r\n-    if (!item) return;\r\n-\r\n-    const newQuantity = item.quantity + delta;\r\n-    if (newQuantity < 1) return;\r\n-\r\n-    try {\r\n-      await axios.post('/api/cart/update/', {\r\n-        cart_item_id: id,\r\n-        quantity: newQuantity,\r\n-      });\r\n-\r\n-      setCartItems((prevItems) =>\r\n-        prevItems.map((item) =>\r\n-          item.id === id ? { ...item, quantity: newQuantity } : item\r\n-        )\r\n-      );\r\n-    } catch (error) {\r\n-      toast.error('Failed to update quantity.');\r\n-    }\r\n+  const handleQuantityChange = (id: number, delta: number) => {\r\n+    setCartItems((prevItems) =>\r\n+      prevItems.map((item) =>\r\n+        item.id === id\r\n+          ? {\r\n+              ...item,\r\n+              quantity: Math.max(item.quantity + delta, 1),\r\n+            }\r\n+          : item\r\n+      )\r\n+    );\r\n   };\r\n \r\n   const total = cartItems.reduce(\r\n     (sum, item) => sum + item.price * item.quantity,\r\n@@ -67,11 +62,9 @@\n   }\r\n \r\n   return (\r\n     <div className=\"max-w-4xl mx-auto px-2 sm:px-4 py-4\">\r\n-      <h1 className=\"text-2xl sm:text-3xl font-bold mb-6 text-blue-700 text-center sm:text-left\">\r\n-        Checkout\r\n-      </h1>\r\n+      <h1 className=\"text-2xl sm:text-3xl font-bold mb-6 text-blue-700 text-center sm:text-left\">Checkout</h1>\r\n \r\n       <div className=\"space-y-4\">\r\n         {cartItems.map((item) => (\r\n           <div\r\n@@ -127,134 +120,4 @@\n       </div>\r\n     </div>\r\n   );\r\n }\r\n-'use client';\r\n-\r\n-import { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-import CheckoutSkeleton from '@/components/CheckoutSkeleton';\r\n-// import { toast } from 'react-hot-toast';\r\n-\r\n-interface CartItem {\r\n-  id: number;\r\n-  name: string;\r\n-  price: number;\r\n-  quantity: number;\r\n-  image: string;\r\n-}\r\n-\r\n-export default function CheckoutPage() {\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n-\r\n-  // Fetch cart items using your correct API path\r\n-  useEffect(() => {\r\n-    const fetchCartItems = async () => {\r\n-      try {\r\n-        const res = await axios.get('/api/cart/items/');\r\n-        setCartItems(res.data);\r\n-        setLoading(false);\r\n-      } catch (err) {\r\n-        toast.error('Failed to load cart items.');\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchCartItems();\r\n-  }, []);\r\n-\r\n-  // Update quantity using your correct API path\r\n-  const handleQuantityChange = async (id: number, delta: number) => {\r\n-    const item = cartItems.find((item) => item.id === id);\r\n-    if (!item) return;\r\n-\r\n-    const newQuantity = item.quantity + delta;\r\n-    if (newQuantity < 1) return;\r\n-\r\n-    try {\r\n-      await axios.post('/api/cart/update/', {\r\n-        cart_item_id: id,\r\n-        quantity: newQuantity,\r\n-      });\r\n-\r\n-      setCartItems((prevItems) =>\r\n-        prevItems.map((item) =>\r\n-          item.id === id ? { ...item, quantity: newQuantity } : item\r\n-        )\r\n-      );\r\n-    } catch (error) {\r\n-      toast.error('Failed to update quantity.');\r\n-    }\r\n-  };\r\n-\r\n-  const total = cartItems.reduce(\r\n-    (sum, item) => sum + item.price * item.quantity,\r\n-    0\r\n-  );\r\n-\r\n-  if (loading) {\r\n-    return <CheckoutSkeleton />;\r\n-  }\r\n-\r\n-  return (\r\n-    <div className=\"max-w-4xl mx-auto px-2 sm:px-4 py-4\">\r\n-      <h1 className=\"text-2xl sm:text-3xl font-bold mb-6 text-blue-700 text-center sm:text-left\">\r\n-        Checkout\r\n-      </h1>\r\n-\r\n-      <div className=\"space-y-4\">\r\n-        {cartItems.map((item) => (\r\n-          <div\r\n-            key={item.id}\r\n-            className=\"flex flex-col sm:flex-row items-center sm:items-start justify-between bg-white rounded-lg shadow-md p-4 gap-y-4 sm:gap-y-0 sm:gap-x-6\"\r\n-          >\r\n-            <div className=\"flex items-center space-x-4 w-full sm:w-1/2\">\r\n-              <img\r\n-                src={item.image}\r\n-                alt={item.name}\r\n-                className=\"h-16 w-16 sm:h-20 sm:w-20 object-cover rounded\"\r\n-              />\r\n-              <div>\r\n-                <h2 className=\"text-base sm:text-lg font-medium\">{item.name}</h2>\r\n-                <p className=\"text-gray-500 text-sm sm:text-base\">Rs {item.price}</p>\r\n-              </div>\r\n-            </div>\r\n-\r\n-            <div className=\"flex items-center space-x-3 sm:space-x-4\">\r\n-              <button\r\n-                onClick={() => handleQuantityChange(item.id, -1)}\r\n-                className=\"bg-gray-200 text-lg px-2 rounded hover:bg-gray-300\"\r\n-              >\r\n-                −\r\n-              </button>\r\n-              <span className=\"text-sm sm:text-base\">{item.quantity}</span>\r\n-              <button\r\n-                onClick={() => handleQuantityChange(item.id, 1)}\r\n-                className=\"bg-gray-200 text-lg px-2 rounded hover:bg-gray-300\"\r\n-              >\r\n-                +\r\n-              </button>\r\n-            </div>\r\n-\r\n-            <div className=\"text-right sm:text-left mt-2 sm:mt-0\">\r\n-              <p className=\"text-xs text-gray-500\">Subtotal</p>\r\n-              <p className=\"font-semibold text-sm sm:text-base\">\r\n-                Rs {item.price * item.quantity}\r\n-              </p>\r\n-            </div>\r\n-          </div>\r\n-        ))}\r\n-      </div>\r\n-\r\n-      <div className=\"mt-8 border-t pt-6 flex flex-col sm:flex-row justify-between items-center gap-4\">\r\n-        <div>\r\n-          <h2 className=\"text-lg sm:text-xl font-semibold text-gray-700\">Total:</h2>\r\n-          <p className=\"text-green-600 text-xl font-bold\">Rs {total}</p>\r\n-        </div>\r\n-        <button className=\"w-full sm:w-auto bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-md text-base sm:text-lg transition\">\r\n-          Proceed to Payment\r\n-        </button>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1749071426442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,123 +1,149 @@\n 'use client';\r\n \r\n import { useState, useEffect } from 'react';\r\n import CheckoutSkeleton from '@/components/CheckoutSkeleton';\r\n+import { axiosWithCsrf } from '@/lib/axiosWithCsrf';\r\n \r\n interface CartItem {\r\n   id: number;\r\n   name: string;\r\n   price: number;\r\n   quantity: number;\r\n-  image: string;\r\n+  imageSrc: string;\r\n }\r\n \r\n export default function CheckoutPage() {\r\n   const [loading, setLoading] = useState(true);\r\n   const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n+  const [error, setError] = useState<string | null>(null);\r\n \r\n   useEffect(() => {\r\n-    const timer = setTimeout(() => {\r\n-      setCartItems([\r\n-        {\r\n-          id: 1,\r\n-          name: 'Margherita Pizza',\r\n-          price: 299,\r\n-          quantity: 1,\r\n-          image: '/images/pizza.jpg',\r\n-        },\r\n-        {\r\n-          id: 2,\r\n-          name: 'Cheeseburger',\r\n-          price: 199,\r\n-          quantity: 2,\r\n-          image: '/images/burger.jpg',\r\n-        },\r\n-      ]);\r\n-      setLoading(false);\r\n-    }, 2000);\r\n+    const fetchCart = async () => {\r\n+      try {\r\n+        const res = await axiosWithCsrf.get('/api/cart/items/');\r\n+        const mappedItems = res.data.map((item: any) => ({\r\n+          id: item.id,\r\n+          name: item.product_name,\r\n+          price: parseFloat(item.price),\r\n+          quantity: item.quantity,\r\n+          imageSrc: item.product_image,\r\n+        }));\r\n+        setCartItems(mappedItems);\r\n+      } catch (err: any) {\r\n+        setError(err.message || 'Failed to fetch cart');\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n \r\n-    return () => clearTimeout(timer);\r\n+    fetchCart();\r\n   }, []);\r\n \r\n+  const updateQuantity = async (id: number, newQty: number) => {\r\n+    if (newQty < 1) return;\r\n+    try {\r\n+      await axiosWithCsrf.post('/api/cart/update/', {\r\n+        cart_item_id: id,\r\n+        quantity: newQty,\r\n+      });\r\n+      setCartItems(prev =>\r\n+        prev.map(item =>\r\n+          item.id === id ? { ...item, quantity: newQty } : item\r\n+        )\r\n+      );\r\n+    } catch (err) {\r\n+      console.error('Failed to update quantity:', err);\r\n+    }\r\n+  };\r\n+\r\n   const handleQuantityChange = (id: number, delta: number) => {\r\n-    setCartItems((prevItems) =>\r\n-      prevItems.map((item) =>\r\n-        item.id === id\r\n-          ? {\r\n-              ...item,\r\n-              quantity: Math.max(item.quantity + delta, 1),\r\n-            }\r\n-          : item\r\n-      )\r\n-    );\r\n+    const item = cartItems.find(item => item.id === id);\r\n+    if (!item) return;\r\n+    const newQty = item.quantity + delta;\r\n+    if (newQty < 1) return;\r\n+    updateQuantity(id, newQty);\r\n   };\r\n \r\n   const total = cartItems.reduce(\r\n     (sum, item) => sum + item.price * item.quantity,\r\n     0\r\n   );\r\n \r\n-  if (loading) {\r\n-    return <CheckoutSkeleton />;\r\n-  }\r\n+  if (loading) return <CheckoutSkeleton />;\r\n \r\n+  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n+\r\n   return (\r\n     <div className=\"max-w-4xl mx-auto px-2 sm:px-4 py-4\">\r\n-      <h1 className=\"text-2xl sm:text-3xl font-bold mb-6 text-blue-700 text-center sm:text-left\">Checkout</h1>\r\n+      <h1 className=\"text-2xl sm:text-3xl font-bold mb-6 text-blue-700 text-center sm:text-left\">\r\n+        Checkout\r\n+      </h1>\r\n \r\n-      <div className=\"space-y-4\">\r\n-        {cartItems.map((item) => (\r\n-          <div\r\n-            key={item.id}\r\n-            className=\"flex flex-col sm:flex-row items-center sm:items-start justify-between bg-white rounded-lg shadow-md p-4 gap-y-4 sm:gap-y-0 sm:gap-x-6\"\r\n-          >\r\n-            <div className=\"flex items-center space-x-4 w-full sm:w-1/2\">\r\n-              <img\r\n-                src={item.image}\r\n-                alt={item.name}\r\n-                className=\"h-16 w-16 sm:h-20 sm:w-20 object-cover rounded\"\r\n-              />\r\n-              <div>\r\n-                <h2 className=\"text-base sm:text-lg font-medium\">{item.name}</h2>\r\n-                <p className=\"text-gray-500 text-sm sm:text-base\">Rs {item.price}</p>\r\n+      {cartItems.length === 0 ? (\r\n+        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n+      ) : (\r\n+        <>\r\n+          <div className=\"space-y-4\">\r\n+            {cartItems.map((item) => (\r\n+              <div\r\n+                key={item.id}\r\n+                className=\"flex flex-col sm:flex-row items-center sm:items-start justify-between bg-white rounded-lg shadow-md p-4 gap-y-4 sm:gap-y-0 sm:gap-x-6\"\r\n+              >\r\n+                <div className=\"flex items-center space-x-4 w-full sm:w-1/2\">\r\n+                  <img\r\n+                    src={item.imageSrc}\r\n+                    alt={item.name}\r\n+                    className=\"h-16 w-16 sm:h-20 sm:w-20 object-cover rounded\"\r\n+                  />\r\n+                  <div>\r\n+                    <h2 className=\"text-base sm:text-lg font-medium\">{item.name}</h2>\r\n+                    <p className=\"text-gray-500 text-sm sm:text-base\">\r\n+                      Rs {item.price.toFixed(2)}\r\n+                    </p>\r\n+                  </div>\r\n+                </div>\r\n+\r\n+                <div className=\"flex items-center space-x-3 sm:space-x-4\">\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, -1)}\r\n+                    className=\"bg-gray-200 text-lg px-2 rounded hover:bg-gray-300\"\r\n+                  >\r\n+                    −\r\n+                  </button>\r\n+                  <span className=\"text-sm sm:text-base\">{item.quantity}</span>\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, 1)}\r\n+                    className=\"bg-gray-200 text-lg px-2 rounded hover:bg-gray-300\"\r\n+                  >\r\n+                    +\r\n+                  </button>\r\n+                </div>\r\n+\r\n+                <div className=\"text-right sm:text-left mt-2 sm:mt-0\">\r\n+                  <p className=\"text-xs text-gray-500\">Subtotal</p>\r\n+                  <p className=\"font-semibold text-sm sm:text-base\">\r\n+                    Rs {(item.price * item.quantity).toFixed(2)}\r\n+                  </p>\r\n+                </div>\r\n               </div>\r\n-            </div>\r\n+            ))}\r\n+          </div>\r\n \r\n-            <div className=\"flex items-center space-x-3 sm:space-x-4\">\r\n-              <button\r\n-                onClick={() => handleQuantityChange(item.id, -1)}\r\n-                className=\"bg-gray-200 text-lg px-2 rounded hover:bg-gray-300\"\r\n-              >\r\n-                −\r\n-              </button>\r\n-              <span className=\"text-sm sm:text-base\">{item.quantity}</span>\r\n-              <button\r\n-                onClick={() => handleQuantityChange(item.id, 1)}\r\n-                className=\"bg-gray-200 text-lg px-2 rounded hover:bg-gray-300\"\r\n-              >\r\n-                +\r\n-              </button>\r\n-            </div>\r\n-\r\n-            <div className=\"text-right sm:text-left mt-2 sm:mt-0\">\r\n-              <p className=\"text-xs text-gray-500\">Subtotal</p>\r\n-              <p className=\"font-semibold text-sm sm:text-base\">\r\n-                Rs {item.price * item.quantity}\r\n+          <div className=\"mt-8 border-t pt-6 flex flex-col sm:flex-row justify-between items-center gap-4\">\r\n+            <div>\r\n+              <h2 className=\"text-lg sm:text-xl font-semibold text-gray-700\">\r\n+                Total:\r\n+              </h2>\r\n+              <p className=\"text-green-600 text-xl font-bold\">\r\n+                Rs {total.toFixed(2)}\r\n               </p>\r\n             </div>\r\n+            <button className=\"w-full sm:w-auto bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-md text-base sm:text-lg transition\">\r\n+              Proceed to Payment\r\n+            </button>\r\n           </div>\r\n-        ))}\r\n-      </div>\r\n-\r\n-      <div className=\"mt-8 border-t pt-6 flex flex-col sm:flex-row justify-between items-center gap-4\">\r\n-        <div>\r\n-          <h2 className=\"text-lg sm:text-xl font-semibold text-gray-700\">Total:</h2>\r\n-          <p className=\"text-green-600 text-xl font-bold\">Rs {total}</p>\r\n-        </div>\r\n-        <button className=\"w-full sm:w-auto bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-md text-base sm:text-lg transition\">\r\n-          Proceed to Payment\r\n-        </button>\r\n-      </div>\r\n+        </>\r\n+      )}\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1749071589352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,77 +69,76 @@\n     0\r\n   );\r\n \r\n   if (loading) return <CheckoutSkeleton />;\r\n-\r\n   if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n \r\n   return (\r\n-    <div className=\"max-w-4xl mx-auto px-2 sm:px-4 py-4\">\r\n-      <h1 className=\"text-2xl sm:text-3xl font-bold mb-6 text-blue-700 text-center sm:text-left\">\r\n+    <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n+      <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n         Checkout\r\n       </h1>\r\n \r\n+      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n+        <strong>Note:</strong> You are about to place your order. Please double-check your items. Once placed, the order cannot be changed.\r\n+      </div>\r\n+\r\n       {cartItems.length === 0 ? (\r\n         <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n       ) : (\r\n         <>\r\n           <div className=\"space-y-4\">\r\n-            {cartItems.map((item) => (\r\n+            {cartItems.map(item => (\r\n               <div\r\n                 key={item.id}\r\n-                className=\"flex flex-col sm:flex-row items-center sm:items-start justify-between bg-white rounded-lg shadow-md p-4 gap-y-4 sm:gap-y-0 sm:gap-x-6\"\r\n+                className=\"flex flex-col sm:flex-row items-center justify-between bg-white rounded-lg shadow p-4 gap-y-4 sm:gap-x-6\"\r\n               >\r\n-                <div className=\"flex items-center space-x-4 w-full sm:w-1/2\">\r\n+                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n                   <img\r\n                     src={item.imageSrc}\r\n                     alt={item.name}\r\n                     className=\"h-16 w-16 sm:h-20 sm:w-20 object-cover rounded\"\r\n                   />\r\n                   <div>\r\n-                    <h2 className=\"text-base sm:text-lg font-medium\">{item.name}</h2>\r\n-                    <p className=\"text-gray-500 text-sm sm:text-base\">\r\n-                      Rs {item.price.toFixed(2)}\r\n-                    </p>\r\n+                    <h2 className=\"text-lg font-semibold\">{item.name}</h2>\r\n+                    <p className=\"text-gray-500\">Rs {item.price.toFixed(2)}</p>\r\n                   </div>\r\n                 </div>\r\n \r\n-                <div className=\"flex items-center space-x-3 sm:space-x-4\">\r\n+                <div className=\"flex items-center space-x-3\">\r\n                   <button\r\n                     onClick={() => handleQuantityChange(item.id, -1)}\r\n-                    className=\"bg-gray-200 text-lg px-2 rounded hover:bg-gray-300\"\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded\"\r\n                   >\r\n                     −\r\n                   </button>\r\n-                  <span className=\"text-sm sm:text-base\">{item.quantity}</span>\r\n+                  <span className=\"text-base\">{item.quantity}</span>\r\n                   <button\r\n                     onClick={() => handleQuantityChange(item.id, 1)}\r\n-                    className=\"bg-gray-200 text-lg px-2 rounded hover:bg-gray-300\"\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded\"\r\n                   >\r\n                     +\r\n                   </button>\r\n                 </div>\r\n \r\n                 <div className=\"text-right sm:text-left mt-2 sm:mt-0\">\r\n-                  <p className=\"text-xs text-gray-500\">Subtotal</p>\r\n-                  <p className=\"font-semibold text-sm sm:text-base\">\r\n+                  <p className=\"text-sm text-gray-500\">Subtotal</p>\r\n+                  <p className=\"text-base font-semibold\">\r\n                     Rs {(item.price * item.quantity).toFixed(2)}\r\n                   </p>\r\n                 </div>\r\n               </div>\r\n             ))}\r\n           </div>\r\n \r\n-          <div className=\"mt-8 border-t pt-6 flex flex-col sm:flex-row justify-between items-center gap-4\">\r\n+          <div className=\"mt-8 border-t pt-6 flex flex-col sm:flex-row justify-between items-center gap-6\">\r\n             <div>\r\n-              <h2 className=\"text-lg sm:text-xl font-semibold text-gray-700\">\r\n-                Total:\r\n-              </h2>\r\n-              <p className=\"text-green-600 text-xl font-bold\">\r\n+              <h2 className=\"text-xl font-semibold text-gray-700\">Total:</h2>\r\n+              <p className=\"text-green-600 text-2xl font-bold\">\r\n                 Rs {total.toFixed(2)}\r\n               </p>\r\n             </div>\r\n-            <button className=\"w-full sm:w-auto bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-md text-base sm:text-lg transition\">\r\n+            <button className=\"w-full sm:w-auto bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg text-lg transition\">\r\n               Proceed to Payment\r\n             </button>\r\n           </div>\r\n         </>\r\n"
                },
                {
                    "date": 1749071727772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,148 +1,73 @@\n-'use client';\r\n+return (\r\n+  <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n+    <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n+      Checkout\r\n+    </h1>\r\n \r\n-import { useState, useEffect } from 'react';\r\n-import CheckoutSkeleton from '@/components/CheckoutSkeleton';\r\n-import { axiosWithCsrf } from '@/lib/axiosWithCsrf';\r\n+    <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n+      <strong>Note:</strong> You are about to place your order. Please double-check your items. Once placed, the order cannot be changed.\r\n+    </div>\r\n \r\n-interface CartItem {\r\n-  id: number;\r\n-  name: string;\r\n-  price: number;\r\n-  quantity: number;\r\n-  imageSrc: string;\r\n-}\r\n-\r\n-export default function CheckoutPage() {\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n-  const [error, setError] = useState<string | null>(null);\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCart = async () => {\r\n-      try {\r\n-        const res = await axiosWithCsrf.get('/api/cart/items/');\r\n-        const mappedItems = res.data.map((item: any) => ({\r\n-          id: item.id,\r\n-          name: item.product_name,\r\n-          price: parseFloat(item.price),\r\n-          quantity: item.quantity,\r\n-          imageSrc: item.product_image,\r\n-        }));\r\n-        setCartItems(mappedItems);\r\n-      } catch (err: any) {\r\n-        setError(err.message || 'Failed to fetch cart');\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchCart();\r\n-  }, []);\r\n-\r\n-  const updateQuantity = async (id: number, newQty: number) => {\r\n-    if (newQty < 1) return;\r\n-    try {\r\n-      await axiosWithCsrf.post('/api/cart/update/', {\r\n-        cart_item_id: id,\r\n-        quantity: newQty,\r\n-      });\r\n-      setCartItems(prev =>\r\n-        prev.map(item =>\r\n-          item.id === id ? { ...item, quantity: newQty } : item\r\n-        )\r\n-      );\r\n-    } catch (err) {\r\n-      console.error('Failed to update quantity:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleQuantityChange = (id: number, delta: number) => {\r\n-    const item = cartItems.find(item => item.id === id);\r\n-    if (!item) return;\r\n-    const newQty = item.quantity + delta;\r\n-    if (newQty < 1) return;\r\n-    updateQuantity(id, newQty);\r\n-  };\r\n-\r\n-  const total = cartItems.reduce(\r\n-    (sum, item) => sum + item.price * item.quantity,\r\n-    0\r\n-  );\r\n-\r\n-  if (loading) return <CheckoutSkeleton />;\r\n-  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n-\r\n-  return (\r\n-    <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n-      <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n-        Checkout\r\n-      </h1>\r\n-\r\n-      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n-        <strong>Note:</strong> You are about to place your order. Please double-check your items. Once placed, the order cannot be changed.\r\n-      </div>\r\n-\r\n-      {cartItems.length === 0 ? (\r\n-        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n-      ) : (\r\n-        <>\r\n-          <div className=\"space-y-4\">\r\n-            {cartItems.map(item => (\r\n-              <div\r\n-                key={item.id}\r\n-                className=\"flex flex-col sm:flex-row items-center justify-between bg-white rounded-lg shadow p-4 gap-y-4 sm:gap-x-6\"\r\n-              >\r\n-                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n-                  <img\r\n-                    src={item.imageSrc}\r\n-                    alt={item.name}\r\n-                    className=\"h-16 w-16 sm:h-20 sm:w-20 object-cover rounded\"\r\n-                  />\r\n-                  <div>\r\n-                    <h2 className=\"text-lg font-semibold\">{item.name}</h2>\r\n-                    <p className=\"text-gray-500\">Rs {item.price.toFixed(2)}</p>\r\n-                  </div>\r\n+    {cartItems.length === 0 ? (\r\n+      <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n+    ) : (\r\n+      <>\r\n+        <div className=\"space-y-4\">\r\n+          {cartItems.map(item => (\r\n+            <div\r\n+              key={item.id}\r\n+              className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n+            >\r\n+              <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n+                <img\r\n+                  src={item.imageSrc}\r\n+                  alt={item.name}\r\n+                  className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n+                />\r\n+                <div>\r\n+                  <h2 className=\"text-lg font-semibold text-gray-800\">{item.name}</h2>\r\n+                  <p className=\"text-sm text-gray-500\">Rs {item.price.toFixed(2)}</p>\r\n                 </div>\r\n+              </div>\r\n \r\n-                <div className=\"flex items-center space-x-3\">\r\n-                  <button\r\n-                    onClick={() => handleQuantityChange(item.id, -1)}\r\n-                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded\"\r\n-                  >\r\n-                    −\r\n-                  </button>\r\n-                  <span className=\"text-base\">{item.quantity}</span>\r\n-                  <button\r\n-                    onClick={() => handleQuantityChange(item.id, 1)}\r\n-                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded\"\r\n-                  >\r\n-                    +\r\n-                  </button>\r\n-                </div>\r\n+              <div className=\"flex items-center space-x-3\">\r\n+                <button\r\n+                  onClick={() => handleQuantityChange(item.id, -1)}\r\n+                  className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded-full font-bold\"\r\n+                >\r\n+                  −\r\n+                </button>\r\n+                <span className=\"text-base font-medium\">{item.quantity}</span>\r\n+                <button\r\n+                  onClick={() => handleQuantityChange(item.id, 1)}\r\n+                  className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded-full font-bold\"\r\n+                >\r\n+                  +\r\n+                </button>\r\n+              </div>\r\n \r\n-                <div className=\"text-right sm:text-left mt-2 sm:mt-0\">\r\n-                  <p className=\"text-sm text-gray-500\">Subtotal</p>\r\n-                  <p className=\"text-base font-semibold\">\r\n-                    Rs {(item.price * item.quantity).toFixed(2)}\r\n-                  </p>\r\n-                </div>\r\n+              <div className=\"mt-2 sm:mt-0 text-center sm:text-right\">\r\n+                <span className=\"text-sm text-gray-500 block mb-1\">Subtotal</span>\r\n+                <span className=\"inline-block bg-green-100 text-green-800 font-semibold text-sm px-3 py-1 rounded-full\">\r\n+                  Rs {(item.price * item.quantity).toFixed(2)}\r\n+                </span>\r\n               </div>\r\n-            ))}\r\n-          </div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n \r\n-          <div className=\"mt-8 border-t pt-6 flex flex-col sm:flex-row justify-between items-center gap-6\">\r\n-            <div>\r\n-              <h2 className=\"text-xl font-semibold text-gray-700\">Total:</h2>\r\n-              <p className=\"text-green-600 text-2xl font-bold\">\r\n-                Rs {total.toFixed(2)}\r\n-              </p>\r\n-            </div>\r\n-            <button className=\"w-full sm:w-auto bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg text-lg transition\">\r\n-              Proceed to Payment\r\n-            </button>\r\n+        <div className=\"mt-10 border-t pt-6 flex flex-col sm:flex-row justify-between items-center gap-6\">\r\n+          <div className=\"text-center sm:text-left\">\r\n+            <h2 className=\"text-xl font-semibold text-gray-700 mb-1\">Total:</h2>\r\n+            <span className=\"inline-block text-2xl text-green-700 bg-green-100 font-bold px-4 py-2 rounded-xl\">\r\n+              Rs {total.toFixed(2)}\r\n+            </span>\r\n           </div>\r\n-        </>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n+          <button className=\"w-full sm:w-auto bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-xl text-lg shadow transition\">\r\n+            Proceed to Payment\r\n+          </button>\r\n+        </div>\r\n+      </>\r\n+    )}\r\n+  </div>\r\n+);\r\n"
                },
                {
                    "date": 1749071736985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+'use client';\r\n+\r\n+import { useState, useEffect } from 'react';\r\n+import CheckoutSkeleton from '@/components/CheckoutSkeleton';\r\n+import { axiosWithCsrf } from '@/lib/axiosWithCsrf';\r\n+\r\n+interface CartItem {\r\n+  id: number;\r\n+  name: string;\r\n+  price: number;\r\n+  quantity: number;\r\n+  imageSrc: string;\r\n+}\r\n+\r\n+export default function CheckoutPage() {\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n+  const [error, setError] = useState<string | null>(null);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCart = async () => {\r\n+      try {\r\n+        const res = await axiosWithCsrf.get('/api/cart/items/');\r\n+        const mappedItems = res.data.map((item: any) => ({\r\n+          id: item.id,\r\n+          name: item.product_name,\r\n+          price: parseFloat(item.price),\r\n+          quantity: item.quantity,\r\n+          imageSrc: item.product_image,\r\n+        }));\r\n+        setCartItems(mappedItems);\r\n+      } catch (err: any) {\r\n+        setError(err.message || 'Failed to fetch cart');\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchCart();\r\n+  }, []);\r\n+\r\n+  const updateQuantity = async (id: number, newQty: number) => {\r\n+    if (newQty < 1) return;\r\n+    try {\r\n+      await axiosWithCsrf.post('/api/cart/update/', {\r\n+        cart_item_id: id,\r\n+        quantity: newQty,\r\n+      });\r\n+      setCartItems(prev =>\r\n+        prev.map(item =>\r\n+          item.id === id ? { ...item, quantity: newQty } : item\r\n+        )\r\n+      );\r\n+    } catch (err) {\r\n+      console.error('Failed to update quantity:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleQuantityChange = (id: number, delta: number) => {\r\n+    const item = cartItems.find(item => item.id === id);\r\n+    if (!item) return;\r\n+    const newQty = item.quantity + delta;\r\n+    if (newQty < 1) return;\r\n+    updateQuantity(id, newQty);\r\n+  };\r\n+\r\n+  const total = cartItems.reduce(\r\n+    (sum, item) => sum + item.price * item.quantity,\r\n+    0\r\n+  );\r\n+\r\n+  if (loading) return <CheckoutSkeleton />;\r\n+  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n+\r\n+  return (\r\n+    <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n+      <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n+        Checkout\r\n+      </h1>\r\n+\r\n+      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n+        <strong>Note:</strong> You are about to place your order. Please double-check your items. Once placed, the order cannot be changed.\r\n+      </div>\r\n+\r\n+      {cartItems.length === 0 ? (\r\n+        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n+      ) : (\r\n+        <>\r\n+          <div className=\"space-y-4\">\r\n+            {cartItems.map(item => (\r\n+              <div\r\n+                key={item.id}\r\n+                className=\"flex flex-col sm:flex-row items-center justify-between bg-white rounded-lg shadow p-4 gap-y-4 sm:gap-x-6\"\r\n+              >\r\n+                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n+                  <img\r\n+                    src={item.imageSrc}\r\n+                    alt={item.name}\r\n+                    className=\"h-16 w-16 sm:h-20 sm:w-20 object-cover rounded\"\r\n+                  />\r\n+                  <div>\r\n+                    <h2 className=\"text-lg font-semibold\">{item.name}</h2>\r\n+                    <p className=\"text-gray-500\">Rs {item.price.toFixed(2)}</p>\r\n+                  </div>\r\n+                </div>\r\n+\r\n+                <div className=\"flex items-center space-x-3\">\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, -1)}\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded\"\r\n+                  >\r\n+                    −\r\n+                  </button>\r\n+                  <span className=\"text-base\">{item.quantity}</span>\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, 1)}\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded\"\r\n+                  >\r\n+                    +\r\n+                  </button>\r\n+                </div>\r\n+\r\n+                <div className=\"text-right sm:text-left mt-2 sm:mt-0\">\r\n+                  <p className=\"text-sm text-gray-500\">Subtotal</p>\r\n+                  <p className=\"text-base font-semibold\">\r\n+                    Rs {(item.price * item.quantity).toFixed(2)}\r\n+                  </p>\r\n+                </div>\r\n+              </div>\r\n+            ))}\r\n+          </div>\r\n+\r\n+          <div className=\"mt-8 border-t pt-6 flex flex-col sm:flex-row justify-between items-center gap-6\">\r\n+            <div>\r\n+              <h2 className=\"text-xl font-semibold text-gray-700\">Total:</h2>\r\n+              <p className=\"text-green-600 text-2xl font-bold\">\r\n+                Rs {total.toFixed(2)}\r\n+              </p>\r\n+            </div>\r\n+            <button className=\"w-full sm:w-auto bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg text-lg transition\">\r\n+              Proceed to Payment\r\n+            </button>\r\n+          </div>\r\n+        </>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1749071757566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,82 +72,8 @@\n   if (loading) return <CheckoutSkeleton />;\r\n   if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n \r\n   return (\r\n-    <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n-      <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n-        Checkout\r\n-      </h1>\r\n-\r\n-      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n-        <strong>Note:</strong> You are about to place your order. Please double-check your items. Once placed, the order cannot be changed.\r\n-      </div>\r\n-\r\n-      {cartItems.length === 0 ? (\r\n-        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n-      ) : (\r\n-        <>\r\n-          <div className=\"space-y-4\">\r\n-            {cartItems.map(item => (\r\n-              <div\r\n-                key={item.id}\r\n-                className=\"flex flex-col sm:flex-row items-center justify-between bg-white rounded-lg shadow p-4 gap-y-4 sm:gap-x-6\"\r\n-              >\r\n-                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n-                  <img\r\n-                    src={item.imageSrc}\r\n-                    alt={item.name}\r\n-                    className=\"h-16 w-16 sm:h-20 sm:w-20 object-cover rounded\"\r\n-                  />\r\n-                  <div>\r\n-                    <h2 className=\"text-lg font-semibold\">{item.name}</h2>\r\n-                    <p className=\"text-gray-500\">Rs {item.price.toFixed(2)}</p>\r\n-                  </div>\r\n-                </div>\r\n-\r\n-                <div className=\"flex items-center space-x-3\">\r\n-                  <button\r\n-                    onClick={() => handleQuantityChange(item.id, -1)}\r\n-                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded\"\r\n-                  >\r\n-                    −\r\n-                  </button>\r\n-                  <span className=\"text-base\">{item.quantity}</span>\r\n-                  <button\r\n-                    onClick={() => handleQuantityChange(item.id, 1)}\r\n-                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded\"\r\n-                  >\r\n-                    +\r\n-                  </button>\r\n-                </div>\r\n-\r\n-                <div className=\"text-right sm:text-left mt-2 sm:mt-0\">\r\n-                  <p className=\"text-sm text-gray-500\">Subtotal</p>\r\n-                  <p className=\"text-base font-semibold\">\r\n-                    Rs {(item.price * item.quantity).toFixed(2)}\r\n-                  </p>\r\n-                </div>\r\n-              </div>\r\n-            ))}\r\n-          </div>\r\n-\r\n-          <div className=\"mt-8 border-t pt-6 flex flex-col sm:flex-row justify-between items-center gap-6\">\r\n-            <div>\r\n-              <h2 className=\"text-xl font-semibold text-gray-700\">Total:</h2>\r\n-              <p className=\"text-green-600 text-2xl font-bold\">\r\n-                Rs {total.toFixed(2)}\r\n-              </p>\r\n-            </div>\r\n-            <button className=\"w-full sm:w-auto bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg text-lg transition\">\r\n-              Proceed to Payment\r\n-            </button>\r\n-          </div>\r\n-        </>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n-return (\r\n   <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n     <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n       Checkout\r\n     </h1>\r\n@@ -218,4 +144,5 @@\n       </>\r\n     )}\r\n   </div>\r\n );\r\n+}\r\n"
                },
                {
                    "date": 1749071952339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,14 +119,31 @@\n                   +\r\n                 </button>\r\n               </div>\r\n \r\n-              <div className=\"mt-2 sm:mt-0 text-center sm:text-right\">\r\n-                <span className=\"text-sm text-gray-500 block mb-1\">Subtotal</span>\r\n-                <span className=\"inline-block bg-green-100 text-green-800 font-semibold text-sm px-3 py-1 rounded-full\">\r\n-                  Rs {(item.price * item.quantity).toFixed(2)}\r\n-                </span>\r\n-              </div>\r\n+             <div className=\"mt-10 border-t pt-6 grid gap-6 sm:grid-cols-2\">\r\n+  <div className=\"w-full bg-gray-50 border border-gray-200 rounded-xl p-4\">\r\n+    <h3 className=\"text-lg font-semibold text-gray-700 mb-2\">Subtotal</h3>\r\n+    <p className=\"text-xl font-bold text-gray-800\">\r\n+      Rs {total.toFixed(2)}\r\n+    </p>\r\n+    <p className=\"text-sm text-gray-500 mt-1\">Based on item prices and quantity.</p>\r\n+  </div>\r\n+\r\n+  <div className=\"w-full bg-green-50 border border-green-200 rounded-xl p-4 shadow-md\">\r\n+    <h3 className=\"text-lg font-semibold text-green-800 mb-2\">Total Amount</h3>\r\n+    <p className=\"text-2xl font-extrabold text-green-700\">\r\n+      Rs {total.toFixed(2)}\r\n+    </p>\r\n+    <p className=\"text-sm text-green-600 mt-1\">Including all items added to cart</p>\r\n+  </div>\r\n+\r\n+  <div className=\"sm:col-span-2\">\r\n+    <button className=\"w-full bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-xl text-lg transition shadow\">\r\n+      Proceed to Payment\r\n+    </button>\r\n+  </div>\r\n+</div>\r\n             </div>\r\n           ))}\r\n         </div>\r\n \r\n"
                },
                {
                    "date": 1749071965499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+'use client';\r\n+\r\n+import { useState, useEffect } from 'react';\r\n+import CheckoutSkeleton from '@/components/CheckoutSkeleton';\r\n+import { axiosWithCsrf } from '@/lib/axiosWithCsrf';\r\n+\r\n+interface CartItem {\r\n+  id: number;\r\n+  name: string;\r\n+  price: number;\r\n+  quantity: number;\r\n+  imageSrc: string;\r\n+}\r\n+\r\n+export default function CheckoutPage() {\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n+  const [error, setError] = useState<string | null>(null);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCart = async () => {\r\n+      try {\r\n+        const res = await axiosWithCsrf.get('/api/cart/items/');\r\n+        const mappedItems = res.data.map((item: any) => ({\r\n+          id: item.id,\r\n+          name: item.product_name,\r\n+          price: parseFloat(item.price),\r\n+          quantity: item.quantity,\r\n+          imageSrc: item.product_image,\r\n+        }));\r\n+        setCartItems(mappedItems);\r\n+      } catch (err: any) {\r\n+        setError(err.message || 'Failed to fetch cart');\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchCart();\r\n+  }, []);\r\n+\r\n+  const updateQuantity = async (id: number, newQty: number) => {\r\n+    if (newQty < 1) return;\r\n+    try {\r\n+      await axiosWithCsrf.post('/api/cart/update/', {\r\n+        cart_item_id: id,\r\n+        quantity: newQty,\r\n+      });\r\n+      setCartItems(prev =>\r\n+        prev.map(item =>\r\n+          item.id === id ? { ...item, quantity: newQty } : item\r\n+        )\r\n+      );\r\n+    } catch (err) {\r\n+      console.error('Failed to update quantity:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleQuantityChange = (id: number, delta: number) => {\r\n+    const item = cartItems.find(item => item.id === id);\r\n+    if (!item) return;\r\n+    const newQty = item.quantity + delta;\r\n+    if (newQty < 1) return;\r\n+    updateQuantity(id, newQty);\r\n+  };\r\n+\r\n+  const total = cartItems.reduce(\r\n+    (sum, item) => sum + item.price * item.quantity,\r\n+    0\r\n+  );\r\n+\r\n+  if (loading) return <CheckoutSkeleton />;\r\n+  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n+\r\n+  return (\r\n+  <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n+    <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n+      Checkout\r\n+    </h1>\r\n+\r\n+    <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n+      <strong>Note:</strong> You are about to place your order. Please double-check your items. Once placed, the order cannot be changed.\r\n+    </div>\r\n+\r\n+    {cartItems.length === 0 ? (\r\n+      <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n+    ) : (\r\n+      <>\r\n+        <div className=\"space-y-4\">\r\n+          {cartItems.map(item => (\r\n+            <div\r\n+              key={item.id}\r\n+              className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n+            >\r\n+              <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n+                <img\r\n+                  src={item.imageSrc}\r\n+                  alt={item.name}\r\n+                  className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n+                />\r\n+                <div>\r\n+                  <h2 className=\"text-lg font-semibold text-gray-800\">{item.name}</h2>\r\n+                  <p className=\"text-sm text-gray-500\">Rs {item.price.toFixed(2)}</p>\r\n+                </div>\r\n+              </div>\r\n+\r\n+              <div className=\"flex items-center space-x-3\">\r\n+                <button\r\n+                  onClick={() => handleQuantityChange(item.id, -1)}\r\n+                  className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded-full font-bold\"\r\n+                >\r\n+                  −\r\n+                </button>\r\n+                <span className=\"text-base font-medium\">{item.quantity}</span>\r\n+                <button\r\n+                  onClick={() => handleQuantityChange(item.id, 1)}\r\n+                  className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded-full font-bold\"\r\n+                >\r\n+                  +\r\n+                </button>\r\n+              </div>\r\n+\r\n+              <div className=\"mt-2 sm:mt-0 text-center sm:text-right\">\r\n+                <span className=\"text-sm text-gray-500 block mb-1\">Subtotal</span>\r\n+                <span className=\"inline-block bg-green-100 text-green-800 font-semibold text-sm px-3 py-1 rounded-full\">\r\n+                  Rs {(item.price * item.quantity).toFixed(2)}\r\n+                </span>\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+\r\n+        <div className=\"mt-10 border-t pt-6 flex flex-col sm:flex-row justify-between items-center gap-6\">\r\n+          <div className=\"text-center sm:text-left\">\r\n+            <h2 className=\"text-xl font-semibold text-gray-700 mb-1\">Total:</h2>\r\n+            <span className=\"inline-block text-2xl text-green-700 bg-green-100 font-bold px-4 py-2 rounded-xl\">\r\n+              Rs {total.toFixed(2)}\r\n+            </span>\r\n+          </div>\r\n+          <button className=\"w-full sm:w-auto bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-xl text-lg shadow transition\">\r\n+            Proceed to Payment\r\n+          </button>\r\n+        </div>\r\n+      </>\r\n+    )}\r\n+  </div>\r\n+);\r\n+}\r\n"
                },
                {
                    "date": 1749072010863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,242 +72,90 @@\n   if (loading) return <CheckoutSkeleton />;\r\n   if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n \r\n   return (\r\n-  <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n-    <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n-      Checkout\r\n-    </h1>\r\n+    <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n+      <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n+        Checkout\r\n+      </h1>\r\n \r\n-    <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n-      <strong>Note:</strong> You are about to place your order. Please double-check your items. Once placed, the order cannot be changed.\r\n-    </div>\r\n+      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n+        <strong>Note:</strong> You are about to place your order. Please double-check your items. Once placed, the order cannot be changed.\r\n+      </div>\r\n \r\n-    {cartItems.length === 0 ? (\r\n-      <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n-    ) : (\r\n-      <>\r\n-        <div className=\"space-y-4\">\r\n-          {cartItems.map(item => (\r\n-            <div\r\n-              key={item.id}\r\n-              className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n-            >\r\n-              <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n-                <img\r\n-                  src={item.imageSrc}\r\n-                  alt={item.name}\r\n-                  className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n-                />\r\n-                <div>\r\n-                  <h2 className=\"text-lg font-semibold text-gray-800\">{item.name}</h2>\r\n-                  <p className=\"text-sm text-gray-500\">Rs {item.price.toFixed(2)}</p>\r\n+      {cartItems.length === 0 ? (\r\n+        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n+      ) : (\r\n+        <>\r\n+          <div className=\"space-y-4\">\r\n+            {cartItems.map(item => (\r\n+              <div\r\n+                key={item.id}\r\n+                className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n+              >\r\n+                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n+                  <img\r\n+                    src={item.imageSrc}\r\n+                    alt={item.name}\r\n+                    className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n+                  />\r\n+                  <div>\r\n+                    <h2 className=\"text-lg font-semibold text-gray-800\">{item.name}</h2>\r\n+                    <p className=\"text-sm text-gray-500\">Rs {item.price.toFixed(2)}</p>\r\n+                  </div>\r\n                 </div>\r\n-              </div>\r\n \r\n-              <div className=\"flex items-center space-x-3\">\r\n-                <button\r\n-                  onClick={() => handleQuantityChange(item.id, -1)}\r\n-                  className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded-full font-bold\"\r\n-                >\r\n-                  −\r\n-                </button>\r\n-                <span className=\"text-base font-medium\">{item.quantity}</span>\r\n-                <button\r\n-                  onClick={() => handleQuantityChange(item.id, 1)}\r\n-                  className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded-full font-bold\"\r\n-                >\r\n-                  +\r\n-                </button>\r\n-              </div>\r\n+                <div className=\"flex items-center space-x-3\">\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, -1)}\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded-full font-bold\"\r\n+                  >\r\n+                    −\r\n+                  </button>\r\n+                  <span className=\"text-base font-medium\">{item.quantity}</span>\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, 1)}\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded-full font-bold\"\r\n+                  >\r\n+                    +\r\n+                  </button>\r\n+                </div>\r\n \r\n-              <div className=\"mt-2 sm:mt-0 text-center sm:text-right\">\r\n-                <span className=\"text-sm text-gray-500 block mb-1\">Subtotal</span>\r\n-                <span className=\"inline-block bg-green-100 text-green-800 font-semibold text-sm px-3 py-1 rounded-full\">\r\n-                  Rs {(item.price * item.quantity).toFixed(2)}\r\n-                </span>\r\n+                <div className=\"mt-2 sm:mt-0 text-center sm:text-right\">\r\n+                  <span className=\"text-sm text-gray-500 block mb-1\">Subtotal</span>\r\n+                  <span className=\"inline-block bg-green-100 text-green-800 font-semibold text-sm px-3 py-1 rounded-full\">\r\n+                    Rs {(item.price * item.quantity).toFixed(2)}\r\n+                  </span>\r\n+                </div>\r\n               </div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-\r\n-        <div className=\"mt-10 border-t pt-6 flex flex-col sm:flex-row justify-between items-center gap-6\">\r\n-          <div className=\"text-center sm:text-left\">\r\n-            <h2 className=\"text-xl font-semibold text-gray-700 mb-1\">Total:</h2>\r\n-            <span className=\"inline-block text-2xl text-green-700 bg-green-100 font-bold px-4 py-2 rounded-xl\">\r\n-              Rs {total.toFixed(2)}\r\n-            </span>\r\n+            ))}\r\n           </div>\r\n-          <button className=\"w-full sm:w-auto bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-xl text-lg shadow transition\">\r\n-            Proceed to Payment\r\n-          </button>\r\n-        </div>\r\n-      </>\r\n-    )}\r\n-  </div>\r\n-);\r\n-}\r\n-'use client';\r\n \r\n-import { useState, useEffect } from 'react';\r\n-import CheckoutSkeleton from '@/components/CheckoutSkeleton';\r\n-import { axiosWithCsrf } from '@/lib/axiosWithCsrf';\r\n+          {/* MODERN TOTAL SECTION */}\r\n+          <div className=\"mt-10 grid gap-6 sm:grid-cols-2\">\r\n+            <div className=\"w-full bg-gray-50 border border-gray-200 rounded-xl p-4\">\r\n+              <h3 className=\"text-lg font-semibold text-gray-700 mb-2\">Subtotal</h3>\r\n+              <p className=\"text-xl font-bold text-gray-800\">\r\n+                Rs {total.toFixed(2)}\r\n+              </p>\r\n+              <p className=\"text-sm text-gray-500 mt-1\">Based on item prices and quantity.</p>\r\n+            </div>\r\n \r\n-interface CartItem {\r\n-  id: number;\r\n-  name: string;\r\n-  price: number;\r\n-  quantity: number;\r\n-  imageSrc: string;\r\n-}\r\n+            <div className=\"w-full bg-green-50 border border-green-200 rounded-xl p-4 shadow-md\">\r\n+              <h3 className=\"text-lg font-semibold text-green-800 mb-2\">Total Amount</h3>\r\n+              <p className=\"text-2xl font-extrabold text-green-700\">\r\n+                Rs {total.toFixed(2)}\r\n+              </p>\r\n+              <p className=\"text-sm text-green-600 mt-1\">Including all items added to cart</p>\r\n+            </div>\r\n \r\n-export default function CheckoutPage() {\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n-  const [error, setError] = useState<string | null>(null);\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCart = async () => {\r\n-      try {\r\n-        const res = await axiosWithCsrf.get('/api/cart/items/');\r\n-        const mappedItems = res.data.map((item: any) => ({\r\n-          id: item.id,\r\n-          name: item.product_name,\r\n-          price: parseFloat(item.price),\r\n-          quantity: item.quantity,\r\n-          imageSrc: item.product_image,\r\n-        }));\r\n-        setCartItems(mappedItems);\r\n-      } catch (err: any) {\r\n-        setError(err.message || 'Failed to fetch cart');\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchCart();\r\n-  }, []);\r\n-\r\n-  const updateQuantity = async (id: number, newQty: number) => {\r\n-    if (newQty < 1) return;\r\n-    try {\r\n-      await axiosWithCsrf.post('/api/cart/update/', {\r\n-        cart_item_id: id,\r\n-        quantity: newQty,\r\n-      });\r\n-      setCartItems(prev =>\r\n-        prev.map(item =>\r\n-          item.id === id ? { ...item, quantity: newQty } : item\r\n-        )\r\n-      );\r\n-    } catch (err) {\r\n-      console.error('Failed to update quantity:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleQuantityChange = (id: number, delta: number) => {\r\n-    const item = cartItems.find(item => item.id === id);\r\n-    if (!item) return;\r\n-    const newQty = item.quantity + delta;\r\n-    if (newQty < 1) return;\r\n-    updateQuantity(id, newQty);\r\n-  };\r\n-\r\n-  const total = cartItems.reduce(\r\n-    (sum, item) => sum + item.price * item.quantity,\r\n-    0\r\n-  );\r\n-\r\n-  if (loading) return <CheckoutSkeleton />;\r\n-  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n-\r\n-  return (\r\n-  <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n-    <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n-      Checkout\r\n-    </h1>\r\n-\r\n-    <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n-      <strong>Note:</strong> You are about to place your order. Please double-check your items. Once placed, the order cannot be changed.\r\n-    </div>\r\n-\r\n-    {cartItems.length === 0 ? (\r\n-      <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n-    ) : (\r\n-      <>\r\n-        <div className=\"space-y-4\">\r\n-          {cartItems.map(item => (\r\n-            <div\r\n-              key={item.id}\r\n-              className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n-            >\r\n-              <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n-                <img\r\n-                  src={item.imageSrc}\r\n-                  alt={item.name}\r\n-                  className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n-                />\r\n-                <div>\r\n-                  <h2 className=\"text-lg font-semibold text-gray-800\">{item.name}</h2>\r\n-                  <p className=\"text-sm text-gray-500\">Rs {item.price.toFixed(2)}</p>\r\n-                </div>\r\n-              </div>\r\n-\r\n-              <div className=\"flex items-center space-x-3\">\r\n-                <button\r\n-                  onClick={() => handleQuantityChange(item.id, -1)}\r\n-                  className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded-full font-bold\"\r\n-                >\r\n-                  −\r\n-                </button>\r\n-                <span className=\"text-base font-medium\">{item.quantity}</span>\r\n-                <button\r\n-                  onClick={() => handleQuantityChange(item.id, 1)}\r\n-                  className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded-full font-bold\"\r\n-                >\r\n-                  +\r\n-                </button>\r\n-              </div>\r\n-\r\n-             <div className=\"mt-10 border-t pt-6 grid gap-6 sm:grid-cols-2\">\r\n-  <div className=\"w-full bg-gray-50 border border-gray-200 rounded-xl p-4\">\r\n-    <h3 className=\"text-lg font-semibold text-gray-700 mb-2\">Subtotal</h3>\r\n-    <p className=\"text-xl font-bold text-gray-800\">\r\n-      Rs {total.toFixed(2)}\r\n-    </p>\r\n-    <p className=\"text-sm text-gray-500 mt-1\">Based on item prices and quantity.</p>\r\n-  </div>\r\n-\r\n-  <div className=\"w-full bg-green-50 border border-green-200 rounded-xl p-4 shadow-md\">\r\n-    <h3 className=\"text-lg font-semibold text-green-800 mb-2\">Total Amount</h3>\r\n-    <p className=\"text-2xl font-extrabold text-green-700\">\r\n-      Rs {total.toFixed(2)}\r\n-    </p>\r\n-    <p className=\"text-sm text-green-600 mt-1\">Including all items added to cart</p>\r\n-  </div>\r\n-\r\n-  <div className=\"sm:col-span-2\">\r\n-    <button className=\"w-full bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-xl text-lg transition shadow\">\r\n-      Proceed to Payment\r\n-    </button>\r\n-  </div>\r\n-</div>\r\n+            <div className=\"sm:col-span-2\">\r\n+              <button className=\"w-full bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-xl text-lg transition shadow\">\r\n+                Proceed to Payment\r\n+              </button>\r\n             </div>\r\n-          ))}\r\n-        </div>\r\n-\r\n-        <div className=\"mt-10 border-t pt-6 flex flex-col sm:flex-row justify-between items-center gap-6\">\r\n-          <div className=\"text-center sm:text-left\">\r\n-            <h2 className=\"text-xl font-semibold text-gray-700 mb-1\">Total:</h2>\r\n-            <span className=\"inline-block text-2xl text-green-700 bg-green-100 font-bold px-4 py-2 rounded-xl\">\r\n-              Rs {total.toFixed(2)}\r\n-            </span>\r\n           </div>\r\n-          <button className=\"w-full sm:w-auto bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-xl text-lg shadow transition\">\r\n-            Proceed to Payment\r\n-          </button>\r\n-        </div>\r\n-      </>\r\n-    )}\r\n-  </div>\r\n-);\r\n+        </>\r\n+      )}\r\n+    </div>\r\n+  );\r\n }\r\n"
                },
                {
                    "date": 1749072127838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+'use client';\r\n+\r\n+import { useState, useEffect } from 'react';\r\n+import CheckoutSkeleton from '@/components/CheckoutSkeleton';\r\n+import { axiosWithCsrf } from '@/lib/axiosWithCsrf';\r\n+\r\n+interface CartItem {\r\n+  id: number;\r\n+  name: string;\r\n+  price: number;\r\n+  quantity: number;\r\n+  imageSrc: string;\r\n+}\r\n+\r\n+export default function CheckoutPage() {\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n+  const [error, setError] = useState<string | null>(null);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCart = async () => {\r\n+      try {\r\n+        const res = await axiosWithCsrf.get('/api/cart/items/');\r\n+        const mappedItems = res.data.map((item: any) => ({\r\n+          id: item.id,\r\n+          name: item.product_name,\r\n+          price: parseFloat(item.price),\r\n+          quantity: item.quantity,\r\n+          imageSrc: item.product_image,\r\n+        }));\r\n+        setCartItems(mappedItems);\r\n+      } catch (err: any) {\r\n+        setError(err.message || 'Failed to fetch cart');\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchCart();\r\n+  }, []);\r\n+\r\n+  const updateQuantity = async (id: number, newQty: number) => {\r\n+    if (newQty < 1) return;\r\n+    try {\r\n+      await axiosWithCsrf.post('/api/cart/update/', {\r\n+        cart_item_id: id,\r\n+        quantity: newQty,\r\n+      });\r\n+      setCartItems(prev =>\r\n+        prev.map(item =>\r\n+          item.id === id ? { ...item, quantity: newQty } : item\r\n+        )\r\n+      );\r\n+    } catch (err) {\r\n+      console.error('Failed to update quantity:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleQuantityChange = (id: number, delta: number) => {\r\n+    const item = cartItems.find(item => item.id === id);\r\n+    if (!item) return;\r\n+    const newQty = item.quantity + delta;\r\n+    if (newQty < 1) return;\r\n+    updateQuantity(id, newQty);\r\n+  };\r\n+\r\n+  const total = cartItems.reduce(\r\n+    (sum, item) => sum + item.price * item.quantity,\r\n+    0\r\n+  );\r\n+\r\n+  if (loading) return <CheckoutSkeleton />;\r\n+  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n+\r\n+  return (\r\n+  <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n+    <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n+      Checkout\r\n+    </h1>\r\n+\r\n+    <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n+      <strong>Note:</strong> You are about to place your order. Please double-check your items. Once placed, the order cannot be changed.\r\n+    </div>\r\n+\r\n+    {cartItems.length === 0 ? (\r\n+      <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n+    ) : (\r\n+      <>\r\n+        <div className=\"space-y-4\">\r\n+          {cartItems.map(item => (\r\n+            <div\r\n+              key={item.id}\r\n+              className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n+            >\r\n+              <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n+                <img\r\n+                  src={item.imageSrc}\r\n+                  alt={item.name}\r\n+                  className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n+                />\r\n+                <div>\r\n+                  <h2 className=\"text-lg font-semibold text-gray-800\">{item.name}</h2>\r\n+                  <p className=\"text-sm text-gray-500\">Unit Price: Rs {item.price.toFixed(2)}</p>\r\n+                  <p className=\"text-sm text-gray-600 mt-1\">\r\n+                    Subtotal:{\" \"}\r\n+                    <span className=\"font-semibold text-green-700\">\r\n+                      Rs {(item.price * item.quantity).toFixed(2)}\r\n+                    </span>\r\n+                  </p>\r\n+                </div>\r\n+              </div>\r\n+\r\n+              <div className=\"flex items-center space-x-3\">\r\n+                <button\r\n+                  onClick={() => handleQuantityChange(item.id, -1)}\r\n+                  className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded-full font-bold\"\r\n+                >\r\n+                  −\r\n+                </button>\r\n+                <span className=\"text-base font-medium\">{item.quantity}</span>\r\n+                <button\r\n+                  onClick={() => handleQuantityChange(item.id, 1)}\r\n+                  className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded-full font-bold\"\r\n+                >\r\n+                  +\r\n+                </button>\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+\r\n+        {/* Total section only shows grand total */}\r\n+        <div className=\"mt-10 w-full bg-green-50 border border-green-200 rounded-xl p-6 shadow-md text-center sm:text-left\">\r\n+          <h3 className=\"text-lg font-semibold text-green-800 mb-2\">Total Amount</h3>\r\n+          <p className=\"text-3xl font-extrabold text-green-700 mb-1\">Rs {total.toFixed(2)}</p>\r\n+          <p className=\"text-sm text-green-600\">Includes all item subtotals</p>\r\n+        </div>\r\n+\r\n+        <div className=\"mt-6\">\r\n+          <button className=\"w-full bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-xl text-lg transition shadow\">\r\n+            Proceed to Payment\r\n+          </button>\r\n+        </div>\r\n+      </>\r\n+    )}\r\n+  </div>\r\n+);\r\n+}\r\n"
                },
                {
                    "date": 1749072201548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,9 +112,9 @@\n \r\n               <div className=\"flex items-center space-x-3\">\r\n                 <button\r\n                   onClick={() => handleQuantityChange(item.id, -1)}\r\n-                  className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded-full font-bold\"\r\n+                  className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n                 >\r\n                   −\r\n                 </button>\r\n                 <span className=\"text-base font-medium\">{item.quantity}</span>\r\n@@ -145,165 +145,4 @@\n     )}\r\n   </div>\r\n );\r\n }\r\n-'use client';\r\n-\r\n-import { useState, useEffect } from 'react';\r\n-import CheckoutSkeleton from '@/components/CheckoutSkeleton';\r\n-import { axiosWithCsrf } from '@/lib/axiosWithCsrf';\r\n-\r\n-interface CartItem {\r\n-  id: number;\r\n-  name: string;\r\n-  price: number;\r\n-  quantity: number;\r\n-  imageSrc: string;\r\n-}\r\n-\r\n-export default function CheckoutPage() {\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n-  const [error, setError] = useState<string | null>(null);\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCart = async () => {\r\n-      try {\r\n-        const res = await axiosWithCsrf.get('/api/cart/items/');\r\n-        const mappedItems = res.data.map((item: any) => ({\r\n-          id: item.id,\r\n-          name: item.product_name,\r\n-          price: parseFloat(item.price),\r\n-          quantity: item.quantity,\r\n-          imageSrc: item.product_image,\r\n-        }));\r\n-        setCartItems(mappedItems);\r\n-      } catch (err: any) {\r\n-        setError(err.message || 'Failed to fetch cart');\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchCart();\r\n-  }, []);\r\n-\r\n-  const updateQuantity = async (id: number, newQty: number) => {\r\n-    if (newQty < 1) return;\r\n-    try {\r\n-      await axiosWithCsrf.post('/api/cart/update/', {\r\n-        cart_item_id: id,\r\n-        quantity: newQty,\r\n-      });\r\n-      setCartItems(prev =>\r\n-        prev.map(item =>\r\n-          item.id === id ? { ...item, quantity: newQty } : item\r\n-        )\r\n-      );\r\n-    } catch (err) {\r\n-      console.error('Failed to update quantity:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleQuantityChange = (id: number, delta: number) => {\r\n-    const item = cartItems.find(item => item.id === id);\r\n-    if (!item) return;\r\n-    const newQty = item.quantity + delta;\r\n-    if (newQty < 1) return;\r\n-    updateQuantity(id, newQty);\r\n-  };\r\n-\r\n-  const total = cartItems.reduce(\r\n-    (sum, item) => sum + item.price * item.quantity,\r\n-    0\r\n-  );\r\n-\r\n-  if (loading) return <CheckoutSkeleton />;\r\n-  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n-\r\n-  return (\r\n-    <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n-      <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n-        Checkout\r\n-      </h1>\r\n-\r\n-      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n-        <strong>Note:</strong> You are about to place your order. Please double-check your items. Once placed, the order cannot be changed.\r\n-      </div>\r\n-\r\n-      {cartItems.length === 0 ? (\r\n-        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n-      ) : (\r\n-        <>\r\n-          <div className=\"space-y-4\">\r\n-            {cartItems.map(item => (\r\n-              <div\r\n-                key={item.id}\r\n-                className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n-              >\r\n-                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n-                  <img\r\n-                    src={item.imageSrc}\r\n-                    alt={item.name}\r\n-                    className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n-                  />\r\n-                  <div>\r\n-                    <h2 className=\"text-lg font-semibold text-gray-800\">{item.name}</h2>\r\n-                    <p className=\"text-sm text-gray-500\">Rs {item.price.toFixed(2)}</p>\r\n-                  </div>\r\n-                </div>\r\n-\r\n-                <div className=\"flex items-center space-x-3\">\r\n-                  <button\r\n-                    onClick={() => handleQuantityChange(item.id, -1)}\r\n-                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded-full font-bold\"\r\n-                  >\r\n-                    −\r\n-                  </button>\r\n-                  <span className=\"text-base font-medium\">{item.quantity}</span>\r\n-                  <button\r\n-                    onClick={() => handleQuantityChange(item.id, 1)}\r\n-                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded-full font-bold\"\r\n-                  >\r\n-                    +\r\n-                  </button>\r\n-                </div>\r\n-\r\n-                <div className=\"mt-2 sm:mt-0 text-center sm:text-right\">\r\n-                  <span className=\"text-sm text-gray-500 block mb-1\">Subtotal</span>\r\n-                  <span className=\"inline-block bg-green-100 text-green-800 font-semibold text-sm px-3 py-1 rounded-full\">\r\n-                    Rs {(item.price * item.quantity).toFixed(2)}\r\n-                  </span>\r\n-                </div>\r\n-              </div>\r\n-            ))}\r\n-          </div>\r\n-\r\n-          {/* MODERN TOTAL SECTION */}\r\n-          <div className=\"mt-10 grid gap-6 sm:grid-cols-2\">\r\n-            <div className=\"w-full bg-gray-50 border border-gray-200 rounded-xl p-4\">\r\n-              <h3 className=\"text-lg font-semibold text-gray-700 mb-2\">Subtotal</h3>\r\n-              <p className=\"text-xl font-bold text-gray-800\">\r\n-                Rs {total.toFixed(2)}\r\n-              </p>\r\n-              <p className=\"text-sm text-gray-500 mt-1\">Based on item prices and quantity.</p>\r\n-            </div>\r\n-\r\n-            <div className=\"w-full bg-green-50 border border-green-200 rounded-xl p-4 shadow-md\">\r\n-              <h3 className=\"text-lg font-semibold text-green-800 mb-2\">Total Amount</h3>\r\n-              <p className=\"text-2xl font-extrabold text-green-700\">\r\n-                Rs {total.toFixed(2)}\r\n-              </p>\r\n-              <p className=\"text-sm text-green-600 mt-1\">Including all items added to cart</p>\r\n-            </div>\r\n-\r\n-            <div className=\"sm:col-span-2\">\r\n-              <button className=\"w-full bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-xl text-lg transition shadow\">\r\n-                Proceed to Payment\r\n-              </button>\r\n-            </div>\r\n-          </div>\r\n-        </>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1749072209233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,9 +119,9 @@\n                 </button>\r\n                 <span className=\"text-base font-medium\">{item.quantity}</span>\r\n                 <button\r\n                   onClick={() => handleQuantityChange(item.id, 1)}\r\n-                  className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded-full font-bold\"\r\n+                  className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n                 >\r\n                   +\r\n                 </button>\r\n               </div>\r\n"
                },
                {
                    "date": 1749072839776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,11 @@\n export default function CheckoutPage() {\r\n   const [loading, setLoading] = useState(true);\r\n   const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n   const [error, setError] = useState<string | null>(null);\r\n+  const [checkoutLoading, setCheckoutLoading] = useState(false);\r\n+  const [checkoutError, setCheckoutError] = useState<string | null>(null);\r\n+  const [checkoutSuccess, setCheckoutSuccess] = useState<string | null>(null);\r\n \r\n   useEffect(() => {\r\n     const fetchCart = async () => {\r\n       try {\r\n@@ -68,81 +71,107 @@\n     (sum, item) => sum + item.price * item.quantity,\r\n     0\r\n   );\r\n \r\n+  const handleCheckout = async () => {\r\n+    setCheckoutLoading(true);\r\n+    setCheckoutError(null);\r\n+    setCheckoutSuccess(null);\r\n+\r\n+    try {\r\n+      const res = await axiosWithCsrf.post('/api/checkout/');\r\n+      setCheckoutSuccess(`Order placed successfully! Order ID: ${res.data.order.id}`);\r\n+      // Optionally clear the cart here or refetch cart items:\r\n+      setCartItems([]);\r\n+    } catch (err: any) {\r\n+      setCheckoutError(err.response?.data?.error || 'Checkout failed');\r\n+    } finally {\r\n+      setCheckoutLoading(false);\r\n+    }\r\n+  };\r\n+\r\n   if (loading) return <CheckoutSkeleton />;\r\n   if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n \r\n   return (\r\n-  <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n-    <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n-      Checkout\r\n-    </h1>\r\n+    <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n+      <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n+        Checkout\r\n+      </h1>\r\n \r\n-    <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n-      <strong>Note:</strong> You are about to place your order. Please double-check your items. Once placed, the order cannot be changed.\r\n-    </div>\r\n+      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n+        <strong>Note:</strong> You are about to place your order. Please double-check your items. Once placed, the order cannot be changed.\r\n+      </div>\r\n \r\n-    {cartItems.length === 0 ? (\r\n-      <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n-    ) : (\r\n-      <>\r\n-        <div className=\"space-y-4\">\r\n-          {cartItems.map(item => (\r\n-            <div\r\n-              key={item.id}\r\n-              className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n-            >\r\n-              <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n-                <img\r\n-                  src={item.imageSrc}\r\n-                  alt={item.name}\r\n-                  className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n-                />\r\n-                <div>\r\n-                  <h2 className=\"text-lg font-semibold text-gray-800\">{item.name}</h2>\r\n-                  <p className=\"text-sm text-gray-500\">Unit Price: Rs {item.price.toFixed(2)}</p>\r\n-                  <p className=\"text-sm text-gray-600 mt-1\">\r\n-                    Subtotal:{\" \"}\r\n-                    <span className=\"font-semibold text-green-700\">\r\n-                      Rs {(item.price * item.quantity).toFixed(2)}\r\n-                    </span>\r\n-                  </p>\r\n+      {cartItems.length === 0 ? (\r\n+        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n+      ) : (\r\n+        <>\r\n+          <div className=\"space-y-4\">\r\n+            {cartItems.map(item => (\r\n+              <div\r\n+                key={item.id}\r\n+                className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n+              >\r\n+                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n+                  <img\r\n+                    src={item.imageSrc}\r\n+                    alt={item.name}\r\n+                    className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n+                  />\r\n+                  <div>\r\n+                    <h2 className=\"text-lg font-semibold text-gray-800\">{item.name}</h2>\r\n+                    <p className=\"text-sm text-gray-500\">Unit Price: Rs {item.price.toFixed(2)}</p>\r\n+                    <p className=\"text-sm text-gray-600 mt-1\">\r\n+                      Subtotal:{\" \"}\r\n+                      <span className=\"font-semibold text-green-700\">\r\n+                        Rs {(item.price * item.quantity).toFixed(2)}\r\n+                      </span>\r\n+                    </p>\r\n+                  </div>\r\n                 </div>\r\n-              </div>\r\n \r\n-              <div className=\"flex items-center space-x-3\">\r\n-                <button\r\n-                  onClick={() => handleQuantityChange(item.id, -1)}\r\n-                  className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n-                >\r\n-                  −\r\n-                </button>\r\n-                <span className=\"text-base font-medium\">{item.quantity}</span>\r\n-                <button\r\n-                  onClick={() => handleQuantityChange(item.id, 1)}\r\n-                  className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n-                >\r\n-                  +\r\n-                </button>\r\n+                <div className=\"flex items-center space-x-3\">\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, -1)}\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n+                  >\r\n+                    −\r\n+                  </button>\r\n+                  <span className=\"text-base font-medium\">{item.quantity}</span>\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, 1)}\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n+                  >\r\n+                    +\r\n+                  </button>\r\n+                </div>\r\n               </div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n+            ))}\r\n+          </div>\r\n \r\n-        {/* Total section only shows grand total */}\r\n-        <div className=\"mt-10 w-full bg-green-50 border border-green-200 rounded-xl p-6 shadow-md text-center sm:text-left\">\r\n-          <h3 className=\"text-lg font-semibold text-green-800 mb-2\">Total Amount</h3>\r\n-          <p className=\"text-3xl font-extrabold text-green-700 mb-1\">Rs {total.toFixed(2)}</p>\r\n-          <p className=\"text-sm text-green-600\">Includes all item subtotals</p>\r\n-        </div>\r\n+          {/* Total section only shows grand total */}\r\n+          <div className=\"mt-10 w-full bg-green-50 border border-green-200 rounded-xl p-6 shadow-md text-center sm:text-left\">\r\n+            <h3 className=\"text-lg font-semibold text-green-800 mb-2\">Total Amount</h3>\r\n+            <p className=\"text-3xl font-extrabold text-green-700 mb-1\">Rs {total.toFixed(2)}</p>\r\n+            <p className=\"text-sm text-green-600\">Includes all item subtotals</p>\r\n+          </div>\r\n \r\n-        <div className=\"mt-6\">\r\n-          <button className=\"w-full bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-xl text-lg transition shadow\">\r\n-            Proceed to Payment\r\n-          </button>\r\n-        </div>\r\n-      </>\r\n-    )}\r\n-  </div>\r\n-);\r\n+          <div className=\"mt-6\">\r\n+            <button\r\n+              onClick={handleCheckout}\r\n+              disabled={checkoutLoading}\r\n+              className={`w-full text-white px-6 py-3 rounded-xl text-lg transition shadow ${\r\n+                checkoutLoading ? 'bg-green-400 cursor-not-allowed' : 'bg-green-600 hover:bg-green-700'\r\n+              }`}\r\n+            >\r\n+              {checkoutLoading ? 'Processing...' : 'Proceed to Payment'}\r\n+            </button>\r\n+\r\n+            {checkoutError && <p className=\"text-red-600 mt-2\">{checkoutError}</p>}\r\n+            {checkoutSuccess && <p className=\"text-green-600 mt-2\">{checkoutSuccess}</p>}\r\n+          </div>\r\n+        </>\r\n+      )}\r\n+    </div>\r\n+  );\r\n }\r\n"
                },
                {
                    "date": 1749073541062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,193 @@\n+'use client';\r\n+\r\n+import { useState, useEffect } from 'react';\r\n+import CheckoutSkeleton from '@/components/CheckoutSkeleton';\r\n+import { axiosWithCsrf } from '@/lib/axiosWithCsrf';\r\n+\r\n+interface CartItem {\r\n+  id: number;\r\n+  name: string;\r\n+  price: number;\r\n+  quantity: number;\r\n+  imageSrc: string;\r\n+}\r\n+\r\n+export default function CheckoutPage() {\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n+  const [error, setError] = useState<string | null>(null);\r\n+  const [checkoutLoading, setCheckoutLoading] = useState(false);\r\n+  const [checkoutError, setCheckoutError] = useState<string | null>(null);\r\n+  const [checkoutSuccess, setCheckoutSuccess] = useState<string | null>(null);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCart = async () => {\r\n+      try {\r\n+        const res = await axiosWithCsrf.get('/api/cart/items/');\r\n+        const mappedItems = res.data.map((item: any) => ({\r\n+          id: item.id,\r\n+          name: item.product_name,\r\n+          price: parseFloat(item.price),\r\n+          quantity: item.quantity,\r\n+          imageSrc: item.product_image,\r\n+        }));\r\n+        setCartItems(mappedItems);\r\n+      } catch (err: any) {\r\n+        setError(err.message || 'Failed to fetch cart');\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchCart();\r\n+  }, []);\r\n+\r\n+  const updateQuantity = async (id: number, newQty: number) => {\r\n+    if (newQty < 1) return;\r\n+    try {\r\n+      await axiosWithCsrf.post('/api/cart/update/', {\r\n+        cart_item_id: id,\r\n+        quantity: newQty,\r\n+      });\r\n+      setCartItems(prev =>\r\n+        prev.map(item =>\r\n+          item.id === id ? { ...item, quantity: newQty } : item\r\n+        )\r\n+      );\r\n+    } catch (err) {\r\n+      console.error('Failed to update quantity:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleQuantityChange = (id: number, delta: number) => {\r\n+    const item = cartItems.find(item => item.id === id);\r\n+    if (!item) return;\r\n+    const newQty = item.quantity + delta;\r\n+    if (newQty < 1) return;\r\n+    updateQuantity(id, newQty);\r\n+  };\r\n+\r\n+  const total = cartItems.reduce(\r\n+    (sum, item) => sum + item.price * item.quantity,\r\n+    0\r\n+  );\r\n+\r\n+  const handleCheckout = async () => {\r\n+    setCheckoutLoading(true);\r\n+    setCheckoutError(null);\r\n+    setCheckoutSuccess(null);\r\n+\r\n+    try {\r\n+      const res = await axiosWithCsrf.post('/api/checkout/');\r\n+      setCheckoutSuccess(`Order placed successfully! Order ID: ${res.data.order.id}`);\r\n+      // Optionally clear the cart here or refetch cart items:\r\n+      setCartItems([]);\r\n+    } catch (err: any) {\r\n+      setCheckoutError(err.response?.data?.error || 'Checkout failed');\r\n+    } finally {\r\n+      setCheckoutLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  if (loading) return <CheckoutSkeleton />;\r\n+  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n+\r\n+  return (\r\n+    <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n+      <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n+        Checkout\r\n+      </h1>\r\n+\r\n+      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n+        <strong>Note:</strong> You are about to place your order. Please double-check your items. Once placed, the order cannot be changed.\r\n+      </div>\r\n+\r\n+      {cartItems.length === 0 ? (\r\n+        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n+      ) : (\r\n+        <>\r\n+          <div className=\"space-y-4\">\r\n+            {cartItems.map(item => (\r\n+              <div\r\n+                key={item.id}\r\n+                className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n+              >\r\n+                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n+                  <img\r\n+                    src={item.imageSrc}\r\n+                    alt={item.name}\r\n+                    className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n+                  />\r\n+                  <div>\r\n+                    <h2 className=\"text-lg font-semibold text-gray-800\">{item.name}</h2>\r\n+                    <p className=\"text-sm text-gray-500\">Unit Price: Rs {item.price.toFixed(2)}</p>\r\n+                    <p className=\"text-sm text-gray-600 mt-1\">\r\n+                      Subtotal:{\" \"}\r\n+                      <span className=\"font-semibold text-green-700\">\r\n+                        Rs {(item.price * item.quantity).toFixed(2)}\r\n+                      </span>\r\n+                    </p>\r\n+                  </div>\r\n+                </div>\r\n+\r\n+                <div className=\"flex items-center space-x-3\">\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, -1)}\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n+                  >\r\n+                    −\r\n+                  </button>\r\n+                  <span className=\"text-base font-medium\">{item.quantity}</span>\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, 1)}\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n+                  >\r\n+                    +\r\n+                  </button>\r\n+                </div>\r\n+              </div>\r\n+            ))}\r\n+          </div>\r\n+\r\n+          {/* Total section only shows grand total */}\r\n+          <div className=\"mt-10 w-full bg-green-50 border border-green-200 rounded-xl p-6 shadow-md text-center sm:text-left\">\r\n+            <h3 className=\"text-lg font-semibold text-green-800 mb-2\">Total Amount</h3>\r\n+            <p className=\"text-3xl font-extrabold text-green-700 mb-1\">Rs {total.toFixed(2)}</p>\r\n+            <p className=\"text-sm text-green-600\">Includes all item subtotals</p>\r\n+          </div>\r\n+\r\n+          <div className=\"mt-6\">\r\n+            <button\r\n+              onClick={handleCheckout}\r\n+              disabled={checkoutLoading}\r\n+              className={`w-full text-white px-6 py-3 rounded-xl text-lg transition shadow ${\r\n+                checkoutLoading ? 'bg-green-400 cursor-not-allowed' : 'bg-green-600 hover:bg-green-700'\r\n+              }`}\r\n+            >\r\n+              {checkoutLoading ? 'Processing...' : 'Proceed to Payment'}\r\n+            </button>\r\n+\r\n+            {checkoutError && <p className=\"text-red-600 mt-2\">{checkoutError}</p>}\r\n+            {checkoutSuccess && <p className=\"text-green-600 mt-2\">{checkoutSuccess}</p>}\r\n+          </div>\r\n+\r\n+          {checkoutSuccess && (\r\n+  <PopupMessage\r\n+    type=\"success\"\r\n+    message={checkoutSuccess}\r\n+    onClose={() => setCheckoutSuccess(null)}\r\n+  />\r\n+)}\r\n+\r\n+{checkoutError && (\r\n+  <PopupMessage\r\n+    type=\"error\"\r\n+    message={checkoutError}\r\n+    onClose={() => setCheckoutError(null)}\r\n+  />\r\n+)}\r\n+        </>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1749073546379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,202 +169,9 @@\n \r\n             {checkoutError && <p className=\"text-red-600 mt-2\">{checkoutError}</p>}\r\n             {checkoutSuccess && <p className=\"text-green-600 mt-2\">{checkoutSuccess}</p>}\r\n           </div>\r\n-\r\n-          {checkoutSuccess && (\r\n-  <PopupMessage\r\n-    type=\"success\"\r\n-    message={checkoutSuccess}\r\n-    onClose={() => setCheckoutSuccess(null)}\r\n-  />\r\n-)}\r\n-\r\n-{checkoutError && (\r\n-  <PopupMessage\r\n-    type=\"error\"\r\n-    message={checkoutError}\r\n-    onClose={() => setCheckoutError(null)}\r\n-  />\r\n-)}\r\n         </>\r\n       )}\r\n     </div>\r\n   );\r\n }\r\n-'use client';\r\n-\r\n-import { useState, useEffect } from 'react';\r\n-import CheckoutSkeleton from '@/components/CheckoutSkeleton';\r\n-import { axiosWithCsrf } from '@/lib/axiosWithCsrf';\r\n-\r\n-interface CartItem {\r\n-  id: number;\r\n-  name: string;\r\n-  price: number;\r\n-  quantity: number;\r\n-  imageSrc: string;\r\n-}\r\n-\r\n-export default function CheckoutPage() {\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n-  const [error, setError] = useState<string | null>(null);\r\n-  const [checkoutLoading, setCheckoutLoading] = useState(false);\r\n-  const [checkoutError, setCheckoutError] = useState<string | null>(null);\r\n-  const [checkoutSuccess, setCheckoutSuccess] = useState<string | null>(null);\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCart = async () => {\r\n-      try {\r\n-        const res = await axiosWithCsrf.get('/api/cart/items/');\r\n-        const mappedItems = res.data.map((item: any) => ({\r\n-          id: item.id,\r\n-          name: item.product_name,\r\n-          price: parseFloat(item.price),\r\n-          quantity: item.quantity,\r\n-          imageSrc: item.product_image,\r\n-        }));\r\n-        setCartItems(mappedItems);\r\n-      } catch (err: any) {\r\n-        setError(err.message || 'Failed to fetch cart');\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchCart();\r\n-  }, []);\r\n-\r\n-  const updateQuantity = async (id: number, newQty: number) => {\r\n-    if (newQty < 1) return;\r\n-    try {\r\n-      await axiosWithCsrf.post('/api/cart/update/', {\r\n-        cart_item_id: id,\r\n-        quantity: newQty,\r\n-      });\r\n-      setCartItems(prev =>\r\n-        prev.map(item =>\r\n-          item.id === id ? { ...item, quantity: newQty } : item\r\n-        )\r\n-      );\r\n-    } catch (err) {\r\n-      console.error('Failed to update quantity:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleQuantityChange = (id: number, delta: number) => {\r\n-    const item = cartItems.find(item => item.id === id);\r\n-    if (!item) return;\r\n-    const newQty = item.quantity + delta;\r\n-    if (newQty < 1) return;\r\n-    updateQuantity(id, newQty);\r\n-  };\r\n-\r\n-  const total = cartItems.reduce(\r\n-    (sum, item) => sum + item.price * item.quantity,\r\n-    0\r\n-  );\r\n-\r\n-  const handleCheckout = async () => {\r\n-    setCheckoutLoading(true);\r\n-    setCheckoutError(null);\r\n-    setCheckoutSuccess(null);\r\n-\r\n-    try {\r\n-      const res = await axiosWithCsrf.post('/api/checkout/');\r\n-      setCheckoutSuccess(`Order placed successfully! Order ID: ${res.data.order.id}`);\r\n-      // Optionally clear the cart here or refetch cart items:\r\n-      setCartItems([]);\r\n-    } catch (err: any) {\r\n-      setCheckoutError(err.response?.data?.error || 'Checkout failed');\r\n-    } finally {\r\n-      setCheckoutLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  if (loading) return <CheckoutSkeleton />;\r\n-  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n-\r\n-  return (\r\n-    <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n-      <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n-        Checkout\r\n-      </h1>\r\n-\r\n-      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n-        <strong>Note:</strong> You are about to place your order. Please double-check your items. Once placed, the order cannot be changed.\r\n-      </div>\r\n-\r\n-      {cartItems.length === 0 ? (\r\n-        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n-      ) : (\r\n-        <>\r\n-          <div className=\"space-y-4\">\r\n-            {cartItems.map(item => (\r\n-              <div\r\n-                key={item.id}\r\n-                className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n-              >\r\n-                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n-                  <img\r\n-                    src={item.imageSrc}\r\n-                    alt={item.name}\r\n-                    className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n-                  />\r\n-                  <div>\r\n-                    <h2 className=\"text-lg font-semibold text-gray-800\">{item.name}</h2>\r\n-                    <p className=\"text-sm text-gray-500\">Unit Price: Rs {item.price.toFixed(2)}</p>\r\n-                    <p className=\"text-sm text-gray-600 mt-1\">\r\n-                      Subtotal:{\" \"}\r\n-                      <span className=\"font-semibold text-green-700\">\r\n-                        Rs {(item.price * item.quantity).toFixed(2)}\r\n-                      </span>\r\n-                    </p>\r\n-                  </div>\r\n-                </div>\r\n-\r\n-                <div className=\"flex items-center space-x-3\">\r\n-                  <button\r\n-                    onClick={() => handleQuantityChange(item.id, -1)}\r\n-                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n-                  >\r\n-                    −\r\n-                  </button>\r\n-                  <span className=\"text-base font-medium\">{item.quantity}</span>\r\n-                  <button\r\n-                    onClick={() => handleQuantityChange(item.id, 1)}\r\n-                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n-                  >\r\n-                    +\r\n-                  </button>\r\n-                </div>\r\n-              </div>\r\n-            ))}\r\n-          </div>\r\n-\r\n-          {/* Total section only shows grand total */}\r\n-          <div className=\"mt-10 w-full bg-green-50 border border-green-200 rounded-xl p-6 shadow-md text-center sm:text-left\">\r\n-            <h3 className=\"text-lg font-semibold text-green-800 mb-2\">Total Amount</h3>\r\n-            <p className=\"text-3xl font-extrabold text-green-700 mb-1\">Rs {total.toFixed(2)}</p>\r\n-            <p className=\"text-sm text-green-600\">Includes all item subtotals</p>\r\n-          </div>\r\n-\r\n-          <div className=\"mt-6\">\r\n-            <button\r\n-              onClick={handleCheckout}\r\n-              disabled={checkoutLoading}\r\n-              className={`w-full text-white px-6 py-3 rounded-xl text-lg transition shadow ${\r\n-                checkoutLoading ? 'bg-green-400 cursor-not-allowed' : 'bg-green-600 hover:bg-green-700'\r\n-              }`}\r\n-            >\r\n-              {checkoutLoading ? 'Processing...' : 'Proceed to Payment'}\r\n-            </button>\r\n-\r\n-            {checkoutError && <p className=\"text-red-600 mt-2\">{checkoutError}</p>}\r\n-            {checkoutSuccess && <p className=\"text-green-600 mt-2\">{checkoutSuccess}</p>}\r\n-          </div>\r\n-        </>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1749073579356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,8 +170,9 @@\n             {checkoutError && <p className=\"text-red-600 mt-2\">{checkoutError}</p>}\r\n             {checkoutSuccess && <p className=\"text-green-600 mt-2\">{checkoutSuccess}</p>}\r\n           </div>\r\n         </>\r\n+        \r\n       )}\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1749073585471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,7 +172,23 @@\n           </div>\r\n         </>\r\n         \r\n       )}\r\n+      {checkoutSuccess && (\r\n+  <PopupMessage\r\n+    type=\"success\"\r\n+    message={checkoutSuccess}\r\n+    onClose={() => setCheckoutSuccess(null)}\r\n+  />\r\n+)}\r\n+\r\n+{checkoutError && (\r\n+  <PopupMessage\r\n+    type=\"error\"\r\n+    message={checkoutError}\r\n+    onClose={() => setCheckoutError(null)}\r\n+  />\r\n+)}\r\n+\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1749073612905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \r\n import { useState, useEffect } from 'react';\r\n import CheckoutSkeleton from '@/components/CheckoutSkeleton';\r\n import { axiosWithCsrf } from '@/lib/axiosWithCsrf';\r\n+import PopupMessage from '@/components/PopupMessage';\r\n \r\n interface CartItem {\r\n   id: number;\r\n   name: string;\r\n"
                },
                {
                    "date": 1749073635894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+'use client';\r\n+\r\n+import { useState, useEffect } from 'react';\r\n+import CheckoutSkeleton from '@/components/CheckoutSkeleton';\r\n+import { axiosWithCsrf } from '@/lib/axiosWithCsrf';\r\n+import PopupMessage from '@/components/PopupMessage';\r\n+\r\n+interface CartItem {\r\n+  id: number;\r\n+  name: string;\r\n+  price: number;\r\n+  quantity: number;\r\n+  imageSrc: string;\r\n+}\r\n+\r\n+export default function CheckoutPage() {\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n+  const [error, setError] = useState<string | null>(null);\r\n+  const [checkoutLoading, setCheckoutLoading] = useState(false);\r\n+  const [checkoutError, setCheckoutError] = useState<string | null>(null);\r\n+  const [checkoutSuccess, setCheckoutSuccess] = useState<string | null>(null);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCart = async () => {\r\n+      try {\r\n+        const res = await axiosWithCsrf.get('/api/cart/items/');\r\n+        const mappedItems = res.data.map((item: any) => ({\r\n+          id: item.id,\r\n+          name: item.product_name,\r\n+          price: parseFloat(item.price),\r\n+          quantity: item.quantity,\r\n+          imageSrc: item.product_image,\r\n+        }));\r\n+        setCartItems(mappedItems);\r\n+      } catch (err: any) {\r\n+        setError(err.message || 'Failed to fetch cart');\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchCart();\r\n+  }, []);\r\n+\r\n+  const updateQuantity = async (id: number, newQty: number) => {\r\n+    if (newQty < 1) return;\r\n+    try {\r\n+      await axiosWithCsrf.post('/api/cart/update/', {\r\n+        cart_item_id: id,\r\n+        quantity: newQty,\r\n+      });\r\n+      setCartItems(prev =>\r\n+        prev.map(item =>\r\n+          item.id === id ? { ...item, quantity: newQty } : item\r\n+        )\r\n+      );\r\n+    } catch (err) {\r\n+      console.error('Failed to update quantity:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleQuantityChange = (id: number, delta: number) => {\r\n+    const item = cartItems.find(item => item.id === id);\r\n+    if (!item) return;\r\n+    const newQty = item.quantity + delta;\r\n+    if (newQty < 1) return;\r\n+    updateQuantity(id, newQty);\r\n+  };\r\n+\r\n+  const total = cartItems.reduce(\r\n+    (sum, item) => sum + item.price * item.quantity,\r\n+    0\r\n+  );\r\n+\r\n+  const handleCheckout = async () => {\r\n+    setCheckoutLoading(true);\r\n+    setCheckoutError(null);\r\n+    setCheckoutSuccess(null);\r\n+\r\n+    try {\r\n+      const res = await axiosWithCsrf.post('/api/checkout/');\r\n+      setCheckoutSuccess(`Order placed successfully! Order ID: ${res.data.order.id}`);\r\n+      // Optionally clear the cart here or refetch cart items:\r\n+      setCartItems([]);\r\n+    } catch (err: any) {\r\n+      setCheckoutError(err.response?.data?.error || 'Checkout failed');\r\n+    } finally {\r\n+      setCheckoutLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  if (loading) return <CheckoutSkeleton />;\r\n+  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n+\r\n+  return (\r\n+    <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n+      <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n+        Checkout\r\n+      </h1>\r\n+\r\n+      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n+        <strong>Note:</strong> You are about to place your order. Please double-check your items. Once placed, the order cannot be changed.\r\n+      </div>\r\n+\r\n+      {cartItems.length === 0 ? (\r\n+        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n+      ) : (\r\n+        <>\r\n+          <div className=\"space-y-4\">\r\n+            {cartItems.map(item => (\r\n+              <div\r\n+                key={item.id}\r\n+                className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n+              >\r\n+                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n+                  <img\r\n+                    src={item.imageSrc}\r\n+                    alt={item.name}\r\n+                    className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n+                  />\r\n+                  <div>\r\n+                    <h2 className=\"text-lg font-semibold text-gray-800\">{item.name}</h2>\r\n+                    <p className=\"text-sm text-gray-500\">Unit Price: Rs {item.price.toFixed(2)}</p>\r\n+                    <p className=\"text-sm text-gray-600 mt-1\">\r\n+                      Subtotal:{\" \"}\r\n+                      <span className=\"font-semibold text-green-700\">\r\n+                        Rs {(item.price * item.quantity).toFixed(2)}\r\n+                      </span>\r\n+                    </p>\r\n+                  </div>\r\n+                </div>\r\n+\r\n+                <div className=\"flex items-center space-x-3\">\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, -1)}\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n+                  >\r\n+                    −\r\n+                  </button>\r\n+                  <span className=\"text-base font-medium\">{item.quantity}</span>\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, 1)}\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n+                  >\r\n+                    +\r\n+                  </button>\r\n+                </div>\r\n+              </div>\r\n+            ))}\r\n+          </div>\r\n+\r\n+          {/* Total section only shows grand total */}\r\n+          <div className=\"mt-10 w-full bg-green-50 border border-green-200 rounded-xl p-6 shadow-md text-center sm:text-left\">\r\n+            <h3 className=\"text-lg font-semibold text-green-800 mb-2\">Total Amount</h3>\r\n+            <p className=\"text-3xl font-extrabold text-green-700 mb-1\">Rs {total.toFixed(2)}</p>\r\n+            <p className=\"text-sm text-green-600\">Includes all item subtotals</p>\r\n+          </div>\r\n+\r\n+          <div className=\"mt-6\">\r\n+            <button\r\n+              onClick={handleCheckout}\r\n+              disabled={checkoutLoading}\r\n+              className={`w-full text-white px-6 py-3 rounded-xl text-lg transition shadow ${\r\n+                checkoutLoading ? 'bg-green-400 cursor-not-allowed' : 'bg-green-600 hover:bg-green-700'\r\n+              }`}\r\n+            >\r\n+              {checkoutLoading ? 'Processing...' : 'Proceed to Payment'}\r\n+            </button>\r\n+\r\n+            {checkoutError && <p className=\"text-red-600 mt-2\">{checkoutError}</p>}\r\n+            {checkoutSuccess && <p className=\"text-green-600 mt-2\">{checkoutSuccess}</p>}\r\n+          </div>\r\n+        </>\r\n+        \r\n+      )}\r\n+      {checkoutSuccess && (\r\n+  <PopupMessage\r\n+    type=\"success\"\r\n+    message={checkoutSuccess}\r\n+    onClose={() => setCheckoutSuccess(null)}\r\n+  />\r\n+)}\r\n+\r\n+{checkoutError && (\r\n+  <PopupMessage\r\n+    type=\"error\"\r\n+    message={checkoutError}\r\n+    onClose={() => setCheckoutError(null)}\r\n+  />\r\n+)}\r\n+\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1749073642223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,212 @@\n+\"use client\";\r\n+\r\n+import { useState, useEffect } from \"react\";\r\n+import CheckoutSkeleton from \"@/components/CheckoutSkeleton\";\r\n+import { axiosWithCsrf } from \"@/lib/axiosWithCsrf\";\r\n+import PopupMessage from \"@/components/PopupMessage\";\r\n+\r\n+interface CartItem {\r\n+  id: number;\r\n+  name: string;\r\n+  price: number;\r\n+  quantity: number;\r\n+  imageSrc: string;\r\n+}\r\n+\r\n+export default function CheckoutPage() {\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n+  const [error, setError] = useState<string | null>(null);\r\n+  const [checkoutLoading, setCheckoutLoading] = useState(false);\r\n+  const [checkoutError, setCheckoutError] = useState<string | null>(null);\r\n+  const [checkoutSuccess, setCheckoutSuccess] = useState<string | null>(null);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCart = async () => {\r\n+      try {\r\n+        const res = await axiosWithCsrf.get(\"/api/cart/items/\");\r\n+        const mappedItems = res.data.map((item: any) => ({\r\n+          id: item.id,\r\n+          name: item.product_name,\r\n+          price: parseFloat(item.price),\r\n+          quantity: item.quantity,\r\n+          imageSrc: item.product_image,\r\n+        }));\r\n+        setCartItems(mappedItems);\r\n+      } catch (err: any) {\r\n+        setError(err.message || \"Failed to fetch cart\");\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchCart();\r\n+  }, []);\r\n+\r\n+  const updateQuantity = async (id: number, newQty: number) => {\r\n+    if (newQty < 1) return;\r\n+    try {\r\n+      await axiosWithCsrf.post(\"/api/cart/update/\", {\r\n+        cart_item_id: id,\r\n+        quantity: newQty,\r\n+      });\r\n+      setCartItems((prev) =>\r\n+        prev.map((item) =>\r\n+          item.id === id ? { ...item, quantity: newQty } : item\r\n+        )\r\n+      );\r\n+    } catch (err) {\r\n+      console.error(\"Failed to update quantity:\", err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleQuantityChange = (id: number, delta: number) => {\r\n+    const item = cartItems.find((item) => item.id === id);\r\n+    if (!item) return;\r\n+    const newQty = item.quantity + delta;\r\n+    if (newQty < 1) return;\r\n+    updateQuantity(id, newQty);\r\n+  };\r\n+\r\n+  const total = cartItems.reduce(\r\n+    (sum, item) => sum + item.price * item.quantity,\r\n+    0\r\n+  );\r\n+\r\n+  const handleCheckout = async () => {\r\n+    setCheckoutLoading(true);\r\n+    setCheckoutError(null);\r\n+    setCheckoutSuccess(null);\r\n+\r\n+    try {\r\n+      const res = await axiosWithCsrf.post(\"/api/checkout/\");\r\n+      setCheckoutSuccess(\r\n+        `Order placed successfully! Order ID: ${res.data.order.id}`\r\n+      );\r\n+      // Optionally clear the cart here or refetch cart items:\r\n+      setCartItems([]);\r\n+    } catch (err: any) {\r\n+      setCheckoutError(err.response?.data?.error || \"Checkout failed\");\r\n+    } finally {\r\n+      setCheckoutLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  if (loading) return <CheckoutSkeleton />;\r\n+  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n+\r\n+  return (\r\n+    <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n+      <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n+        Checkout\r\n+      </h1>\r\n+\r\n+      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n+        <strong>Note:</strong> You are about to place your order. Please\r\n+        double-check your items. Once placed, the order cannot be changed.\r\n+      </div>\r\n+\r\n+      {cartItems.length === 0 ? (\r\n+        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n+      ) : (\r\n+        <>\r\n+          <div className=\"space-y-4\">\r\n+            {cartItems.map((item) => (\r\n+              <div\r\n+                key={item.id}\r\n+                className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n+              >\r\n+                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n+                  <img\r\n+                    src={item.imageSrc}\r\n+                    alt={item.name}\r\n+                    className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n+                  />\r\n+                  <div>\r\n+                    <h2 className=\"text-lg font-semibold text-gray-800\">\r\n+                      {item.name}\r\n+                    </h2>\r\n+                    <p className=\"text-sm text-gray-500\">\r\n+                      Unit Price: Rs {item.price.toFixed(2)}\r\n+                    </p>\r\n+                    <p className=\"text-sm text-gray-600 mt-1\">\r\n+                      Subtotal:{\" \"}\r\n+                      <span className=\"font-semibold text-green-700\">\r\n+                        Rs {(item.price * item.quantity).toFixed(2)}\r\n+                      </span>\r\n+                    </p>\r\n+                  </div>\r\n+                </div>\r\n+\r\n+                <div className=\"flex items-center space-x-3\">\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, -1)}\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n+                  >\r\n+                    −\r\n+                  </button>\r\n+                  <span className=\"text-base font-medium\">{item.quantity}</span>\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, 1)}\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n+                  >\r\n+                    +\r\n+                  </button>\r\n+                </div>\r\n+              </div>\r\n+            ))}\r\n+          </div>\r\n+\r\n+          {/* Total section only shows grand total */}\r\n+          <div className=\"mt-10 w-full bg-green-50 border border-green-200 rounded-xl p-6 shadow-md text-center sm:text-left\">\r\n+            <h3 className=\"text-lg font-semibold text-green-800 mb-2\">\r\n+              Total Amount\r\n+            </h3>\r\n+            <p className=\"text-3xl font-extrabold text-green-700 mb-1\">\r\n+              Rs {total.toFixed(2)}\r\n+            </p>\r\n+            <p className=\"text-sm text-green-600\">\r\n+              Includes all item subtotals\r\n+            </p>\r\n+          </div>\r\n+\r\n+          <div className=\"mt-6\">\r\n+            <button\r\n+              onClick={handleCheckout}\r\n+              disabled={checkoutLoading}\r\n+              className={`w-full text-white px-6 py-3 rounded-xl text-lg transition shadow ${\r\n+                checkoutLoading\r\n+                  ? \"bg-green-400 cursor-not-allowed\"\r\n+                  : \"bg-green-600 hover:bg-green-700\"\r\n+              }`}\r\n+            >\r\n+              {checkoutLoading ? \"Processing...\" : \"Proceed to Payment\"}\r\n+            </button>\r\n+\r\n+            {checkoutError && (\r\n+              <p className=\"text-red-600 mt-2\">{checkoutError}</p>\r\n+            )}\r\n+            {checkoutSuccess && (\r\n+              <p className=\"text-green-600 mt-2\">{checkoutSuccess}</p>\r\n+            )}\r\n+          </div>\r\n+        </>\r\n+      )}\r\n+      {checkoutSuccess && (\r\n+        <PopupMessage\r\n+          type=\"success\"\r\n+          message={checkoutSuccess}\r\n+          onClose={() => setCheckoutSuccess(null)}\r\n+        />\r\n+      )}\r\n+\r\n+      {checkoutError && (\r\n+        <PopupMessage\r\n+          type=\"error\"\r\n+          message={checkoutError}\r\n+          onClose={() => setCheckoutError(null)}\r\n+        />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1749073895289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,220 @@\n+\"use client\";\r\n+\r\n+import { useState, useEffect } from \"react\";\r\n+import CheckoutSkeleton from \"@/components/CheckoutSkeleton\";\r\n+import { axiosWithCsrf } from \"@/lib/axiosWithCsrf\";\r\n+import PopupMessage from \"@/components/PopupMessage\";\r\n+\r\n+interface CartItem {\r\n+  id: number;\r\n+  name: string;\r\n+  price: number;\r\n+  quantity: number;\r\n+  imageSrc: string;\r\n+}\r\n+\r\n+export default function CheckoutPage() {\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n+  const [error, setError] = useState<string | null>(null);\r\n+  const [checkoutLoading, setCheckoutLoading] = useState(false);\r\n+  const [checkoutError, setCheckoutError] = useState<string | null>(null);\r\n+  const [checkoutSuccess, setCheckoutSuccess] = useState<string | null>(null);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCart = async () => {\r\n+      try {\r\n+        const res = await axiosWithCsrf.get(\"/api/cart/items/\");\r\n+        const mappedItems = res.data.map((item: any) => ({\r\n+          id: item.id,\r\n+          name: item.product_name,\r\n+          price: parseFloat(item.price),\r\n+          quantity: item.quantity,\r\n+          imageSrc: item.product_image,\r\n+        }));\r\n+        setCartItems(mappedItems);\r\n+      } catch (err: any) {\r\n+        setError(err.message || \"Failed to fetch cart\");\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchCart();\r\n+  }, []);\r\n+\r\n+  const updateQuantity = async (id: number, newQty: number) => {\r\n+    if (newQty < 1) return;\r\n+    try {\r\n+      await axiosWithCsrf.post(\"/api/cart/update/\", {\r\n+        cart_item_id: id,\r\n+        quantity: newQty,\r\n+      });\r\n+      setCartItems((prev) =>\r\n+        prev.map((item) =>\r\n+          item.id === id ? { ...item, quantity: newQty } : item\r\n+        )\r\n+      );\r\n+    } catch (err) {\r\n+      console.error(\"Failed to update quantity:\", err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleQuantityChange = (id: number, delta: number) => {\r\n+    const item = cartItems.find((item) => item.id === id);\r\n+    if (!item) return;\r\n+    const newQty = item.quantity + delta;\r\n+    if (newQty < 1) return;\r\n+    updateQuantity(id, newQty);\r\n+  };\r\n+\r\n+  const total = cartItems.reduce(\r\n+    (sum, item) => sum + item.price * item.quantity,\r\n+    0\r\n+  );\r\n+\r\n+  const handleCheckout = async () => {\r\n+    setCheckoutLoading(true);\r\n+    setCheckoutError(null);\r\n+    setCheckoutSuccess(null);\r\n+\r\n+    try {\r\n+      const res = await axiosWithCsrf.post(\"/api/checkout/\");\r\n+      setCheckoutSuccess(\r\n+        `Order placed successfully! Order ID: ${res.data.order.id}`\r\n+      );\r\n+      // Optionally clear the cart here or refetch cart items:\r\n+      setCartItems([]);\r\n+    } catch (err: any) {\r\n+      setCheckoutError(err.response?.data?.error || \"Checkout failed\");\r\n+    } finally {\r\n+      setCheckoutLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  if (loading) return <CheckoutSkeleton />;\r\n+  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n+\r\n+  return (\r\n+    <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n+      <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n+        Checkout\r\n+      </h1>\r\n+\r\n+      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n+        <strong>Note:</strong> You are about to place your order. Please\r\n+        double-check your items. Once placed, the order cannot be changed.\r\n+      </div>\r\n+\r\n+      {cartItems.length === 0 ? (\r\n+        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n+      ) : (\r\n+        <>\r\n+          <div className=\"space-y-4\">\r\n+            {cartItems.map((item) => (\r\n+              <div\r\n+                key={item.id}\r\n+                className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n+              >\r\n+                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n+                  <img\r\n+                    src={item.imageSrc}\r\n+                    alt={item.name}\r\n+                    className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n+                  />\r\n+                  <div>\r\n+                    <h2 className=\"text-lg font-semibold text-gray-800\">\r\n+                      {item.name}\r\n+                    </h2>\r\n+                    <p className=\"text-sm text-gray-500\">\r\n+                      Unit Price: Rs {item.price.toFixed(2)}\r\n+                    </p>\r\n+                    <p className=\"text-sm text-gray-600 mt-1\">\r\n+                      Subtotal:{\" \"}\r\n+                      <span className=\"font-semibold text-green-700\">\r\n+                        Rs {(item.price * item.quantity).toFixed(2)}\r\n+                      </span>\r\n+                    </p>\r\n+                  </div>\r\n+                </div>\r\n+\r\n+                <div className=\"flex items-center space-x-3\">\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, -1)}\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n+                  >\r\n+                    −\r\n+                  </button>\r\n+                  <span className=\"text-base font-medium\">{item.quantity}</span>\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, 1)}\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n+                  >\r\n+                    +\r\n+                  </button>\r\n+                </div>\r\n+              </div>\r\n+            ))}\r\n+          </div>\r\n+\r\n+          {/* Total section only shows grand total */}\r\n+          <div className=\"mt-10 w-full bg-green-50 border border-green-200 rounded-xl p-6 shadow-md text-center sm:text-left\">\r\n+            <h3 className=\"text-lg font-semibold text-green-800 mb-2\">\r\n+              Total Amount\r\n+            </h3>\r\n+            <p className=\"text-3xl font-extrabold text-green-700 mb-1\">\r\n+              Rs {total.toFixed(2)}\r\n+            </p>\r\n+            <p className=\"text-sm text-green-600\">\r\n+              Includes all item subtotals\r\n+            </p>\r\n+          </div>\r\n+\r\n+          <div className=\"mt-6\">\r\n+            {/* Back Button - fixed top right */}\r\n+      <button\r\n+        onClick={() => router.back()}\r\n+        className=\"absolute top-4 right-4 bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded shadow transition\"\r\n+        aria-label=\"Go back\"\r\n+      >\r\n+        ← Back\r\n+      </button>\r\n+            <button\r\n+              onClick={handleCheckout}\r\n+              disabled={checkoutLoading}\r\n+              className={`w-full text-white px-6 py-3 rounded-xl text-lg transition shadow ${\r\n+                checkoutLoading\r\n+                  ? \"bg-green-400 cursor-not-allowed\"\r\n+                  : \"bg-green-600 hover:bg-green-700\"\r\n+              }`}\r\n+            >\r\n+              {checkoutLoading ? \"Processing...\" : \"Proceed to Payment\"}\r\n+            </button>\r\n+\r\n+            {checkoutError && (\r\n+              <p className=\"text-red-600 mt-2\">{checkoutError}</p>\r\n+            )}\r\n+            {checkoutSuccess && (\r\n+              <p className=\"text-green-600 mt-2\">{checkoutSuccess}</p>\r\n+            )}\r\n+          </div>\r\n+        </>\r\n+      )}\r\n+      {checkoutSuccess && (\r\n+        <PopupMessage\r\n+          type=\"success\"\r\n+          message={checkoutSuccess}\r\n+          onClose={() => setCheckoutSuccess(null)}\r\n+        />\r\n+      )}\r\n+\r\n+      {checkoutError && (\r\n+        <PopupMessage\r\n+          type=\"error\"\r\n+          message={checkoutError}\r\n+          onClose={() => setCheckoutError(null)}\r\n+        />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1749073925608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,10 @@\n   const [checkoutLoading, setCheckoutLoading] = useState(false);\r\n   const [checkoutError, setCheckoutError] = useState<string | null>(null);\r\n   const [checkoutSuccess, setCheckoutSuccess] = useState<string | null>(null);\r\n \r\n+  const router = useRouter();\r\n+\r\n   useEffect(() => {\r\n     const fetchCart = async () => {\r\n       try {\r\n         const res = await axiosWithCsrf.get(\"/api/cart/items/\");\r\n@@ -217,606 +219,4 @@\n       )}\r\n     </div>\r\n   );\r\n }\r\n-\"use client\";\r\n-\r\n-import { useState, useEffect } from \"react\";\r\n-import CheckoutSkeleton from \"@/components/CheckoutSkeleton\";\r\n-import { axiosWithCsrf } from \"@/lib/axiosWithCsrf\";\r\n-import PopupMessage from \"@/components/PopupMessage\";\r\n-\r\n-interface CartItem {\r\n-  id: number;\r\n-  name: string;\r\n-  price: number;\r\n-  quantity: number;\r\n-  imageSrc: string;\r\n-}\r\n-\r\n-export default function CheckoutPage() {\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n-  const [error, setError] = useState<string | null>(null);\r\n-  const [checkoutLoading, setCheckoutLoading] = useState(false);\r\n-  const [checkoutError, setCheckoutError] = useState<string | null>(null);\r\n-  const [checkoutSuccess, setCheckoutSuccess] = useState<string | null>(null);\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCart = async () => {\r\n-      try {\r\n-        const res = await axiosWithCsrf.get(\"/api/cart/items/\");\r\n-        const mappedItems = res.data.map((item: any) => ({\r\n-          id: item.id,\r\n-          name: item.product_name,\r\n-          price: parseFloat(item.price),\r\n-          quantity: item.quantity,\r\n-          imageSrc: item.product_image,\r\n-        }));\r\n-        setCartItems(mappedItems);\r\n-      } catch (err: any) {\r\n-        setError(err.message || \"Failed to fetch cart\");\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchCart();\r\n-  }, []);\r\n-\r\n-  const updateQuantity = async (id: number, newQty: number) => {\r\n-    if (newQty < 1) return;\r\n-    try {\r\n-      await axiosWithCsrf.post(\"/api/cart/update/\", {\r\n-        cart_item_id: id,\r\n-        quantity: newQty,\r\n-      });\r\n-      setCartItems((prev) =>\r\n-        prev.map((item) =>\r\n-          item.id === id ? { ...item, quantity: newQty } : item\r\n-        )\r\n-      );\r\n-    } catch (err) {\r\n-      console.error(\"Failed to update quantity:\", err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleQuantityChange = (id: number, delta: number) => {\r\n-    const item = cartItems.find((item) => item.id === id);\r\n-    if (!item) return;\r\n-    const newQty = item.quantity + delta;\r\n-    if (newQty < 1) return;\r\n-    updateQuantity(id, newQty);\r\n-  };\r\n-\r\n-  const total = cartItems.reduce(\r\n-    (sum, item) => sum + item.price * item.quantity,\r\n-    0\r\n-  );\r\n-\r\n-  const handleCheckout = async () => {\r\n-    setCheckoutLoading(true);\r\n-    setCheckoutError(null);\r\n-    setCheckoutSuccess(null);\r\n-\r\n-    try {\r\n-      const res = await axiosWithCsrf.post(\"/api/checkout/\");\r\n-      setCheckoutSuccess(\r\n-        `Order placed successfully! Order ID: ${res.data.order.id}`\r\n-      );\r\n-      // Optionally clear the cart here or refetch cart items:\r\n-      setCartItems([]);\r\n-    } catch (err: any) {\r\n-      setCheckoutError(err.response?.data?.error || \"Checkout failed\");\r\n-    } finally {\r\n-      setCheckoutLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  if (loading) return <CheckoutSkeleton />;\r\n-  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n-\r\n-  return (\r\n-    <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n-      <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n-        Checkout\r\n-      </h1>\r\n-\r\n-      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n-        <strong>Note:</strong> You are about to place your order. Please\r\n-        double-check your items. Once placed, the order cannot be changed.\r\n-      </div>\r\n-\r\n-      {cartItems.length === 0 ? (\r\n-        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n-      ) : (\r\n-        <>\r\n-          <div className=\"space-y-4\">\r\n-            {cartItems.map((item) => (\r\n-              <div\r\n-                key={item.id}\r\n-                className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n-              >\r\n-                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n-                  <img\r\n-                    src={item.imageSrc}\r\n-                    alt={item.name}\r\n-                    className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n-                  />\r\n-                  <div>\r\n-                    <h2 className=\"text-lg font-semibold text-gray-800\">\r\n-                      {item.name}\r\n-                    </h2>\r\n-                    <p className=\"text-sm text-gray-500\">\r\n-                      Unit Price: Rs {item.price.toFixed(2)}\r\n-                    </p>\r\n-                    <p className=\"text-sm text-gray-600 mt-1\">\r\n-                      Subtotal:{\" \"}\r\n-                      <span className=\"font-semibold text-green-700\">\r\n-                        Rs {(item.price * item.quantity).toFixed(2)}\r\n-                      </span>\r\n-                    </p>\r\n-                  </div>\r\n-                </div>\r\n-\r\n-                <div className=\"flex items-center space-x-3\">\r\n-                  <button\r\n-                    onClick={() => handleQuantityChange(item.id, -1)}\r\n-                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n-                  >\r\n-                    −\r\n-                  </button>\r\n-                  <span className=\"text-base font-medium\">{item.quantity}</span>\r\n-                  <button\r\n-                    onClick={() => handleQuantityChange(item.id, 1)}\r\n-                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n-                  >\r\n-                    +\r\n-                  </button>\r\n-                </div>\r\n-              </div>\r\n-            ))}\r\n-          </div>\r\n-\r\n-          {/* Total section only shows grand total */}\r\n-          <div className=\"mt-10 w-full bg-green-50 border border-green-200 rounded-xl p-6 shadow-md text-center sm:text-left\">\r\n-            <h3 className=\"text-lg font-semibold text-green-800 mb-2\">\r\n-              Total Amount\r\n-            </h3>\r\n-            <p className=\"text-3xl font-extrabold text-green-700 mb-1\">\r\n-              Rs {total.toFixed(2)}\r\n-            </p>\r\n-            <p className=\"text-sm text-green-600\">\r\n-              Includes all item subtotals\r\n-            </p>\r\n-          </div>\r\n-\r\n-          <div className=\"mt-6\">\r\n-            <button\r\n-              onClick={handleCheckout}\r\n-              disabled={checkoutLoading}\r\n-              className={`w-full text-white px-6 py-3 rounded-xl text-lg transition shadow ${\r\n-                checkoutLoading\r\n-                  ? \"bg-green-400 cursor-not-allowed\"\r\n-                  : \"bg-green-600 hover:bg-green-700\"\r\n-              }`}\r\n-            >\r\n-              {checkoutLoading ? \"Processing...\" : \"Proceed to Payment\"}\r\n-            </button>\r\n-\r\n-            {checkoutError && (\r\n-              <p className=\"text-red-600 mt-2\">{checkoutError}</p>\r\n-            )}\r\n-            {checkoutSuccess && (\r\n-              <p className=\"text-green-600 mt-2\">{checkoutSuccess}</p>\r\n-            )}\r\n-          </div>\r\n-        </>\r\n-      )}\r\n-      {checkoutSuccess && (\r\n-        <PopupMessage\r\n-          type=\"success\"\r\n-          message={checkoutSuccess}\r\n-          onClose={() => setCheckoutSuccess(null)}\r\n-        />\r\n-      )}\r\n-\r\n-      {checkoutError && (\r\n-        <PopupMessage\r\n-          type=\"error\"\r\n-          message={checkoutError}\r\n-          onClose={() => setCheckoutError(null)}\r\n-        />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n-'use client';\r\n-\r\n-import { useState, useEffect } from 'react';\r\n-import CheckoutSkeleton from '@/components/CheckoutSkeleton';\r\n-import { axiosWithCsrf } from '@/lib/axiosWithCsrf';\r\n-import PopupMessage from '@/components/PopupMessage';\r\n-\r\n-interface CartItem {\r\n-  id: number;\r\n-  name: string;\r\n-  price: number;\r\n-  quantity: number;\r\n-  imageSrc: string;\r\n-}\r\n-\r\n-export default function CheckoutPage() {\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n-  const [error, setError] = useState<string | null>(null);\r\n-  const [checkoutLoading, setCheckoutLoading] = useState(false);\r\n-  const [checkoutError, setCheckoutError] = useState<string | null>(null);\r\n-  const [checkoutSuccess, setCheckoutSuccess] = useState<string | null>(null);\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCart = async () => {\r\n-      try {\r\n-        const res = await axiosWithCsrf.get('/api/cart/items/');\r\n-        const mappedItems = res.data.map((item: any) => ({\r\n-          id: item.id,\r\n-          name: item.product_name,\r\n-          price: parseFloat(item.price),\r\n-          quantity: item.quantity,\r\n-          imageSrc: item.product_image,\r\n-        }));\r\n-        setCartItems(mappedItems);\r\n-      } catch (err: any) {\r\n-        setError(err.message || 'Failed to fetch cart');\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchCart();\r\n-  }, []);\r\n-\r\n-  const updateQuantity = async (id: number, newQty: number) => {\r\n-    if (newQty < 1) return;\r\n-    try {\r\n-      await axiosWithCsrf.post('/api/cart/update/', {\r\n-        cart_item_id: id,\r\n-        quantity: newQty,\r\n-      });\r\n-      setCartItems(prev =>\r\n-        prev.map(item =>\r\n-          item.id === id ? { ...item, quantity: newQty } : item\r\n-        )\r\n-      );\r\n-    } catch (err) {\r\n-      console.error('Failed to update quantity:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleQuantityChange = (id: number, delta: number) => {\r\n-    const item = cartItems.find(item => item.id === id);\r\n-    if (!item) return;\r\n-    const newQty = item.quantity + delta;\r\n-    if (newQty < 1) return;\r\n-    updateQuantity(id, newQty);\r\n-  };\r\n-\r\n-  const total = cartItems.reduce(\r\n-    (sum, item) => sum + item.price * item.quantity,\r\n-    0\r\n-  );\r\n-\r\n-  const handleCheckout = async () => {\r\n-    setCheckoutLoading(true);\r\n-    setCheckoutError(null);\r\n-    setCheckoutSuccess(null);\r\n-\r\n-    try {\r\n-      const res = await axiosWithCsrf.post('/api/checkout/');\r\n-      setCheckoutSuccess(`Order placed successfully! Order ID: ${res.data.order.id}`);\r\n-      // Optionally clear the cart here or refetch cart items:\r\n-      setCartItems([]);\r\n-    } catch (err: any) {\r\n-      setCheckoutError(err.response?.data?.error || 'Checkout failed');\r\n-    } finally {\r\n-      setCheckoutLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  if (loading) return <CheckoutSkeleton />;\r\n-  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n-\r\n-  return (\r\n-    <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n-      <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n-        Checkout\r\n-      </h1>\r\n-\r\n-      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n-        <strong>Note:</strong> You are about to place your order. Please double-check your items. Once placed, the order cannot be changed.\r\n-      </div>\r\n-\r\n-      {cartItems.length === 0 ? (\r\n-        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n-      ) : (\r\n-        <>\r\n-          <div className=\"space-y-4\">\r\n-            {cartItems.map(item => (\r\n-              <div\r\n-                key={item.id}\r\n-                className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n-              >\r\n-                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n-                  <img\r\n-                    src={item.imageSrc}\r\n-                    alt={item.name}\r\n-                    className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n-                  />\r\n-                  <div>\r\n-                    <h2 className=\"text-lg font-semibold text-gray-800\">{item.name}</h2>\r\n-                    <p className=\"text-sm text-gray-500\">Unit Price: Rs {item.price.toFixed(2)}</p>\r\n-                    <p className=\"text-sm text-gray-600 mt-1\">\r\n-                      Subtotal:{\" \"}\r\n-                      <span className=\"font-semibold text-green-700\">\r\n-                        Rs {(item.price * item.quantity).toFixed(2)}\r\n-                      </span>\r\n-                    </p>\r\n-                  </div>\r\n-                </div>\r\n-\r\n-                <div className=\"flex items-center space-x-3\">\r\n-                  <button\r\n-                    onClick={() => handleQuantityChange(item.id, -1)}\r\n-                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n-                  >\r\n-                    −\r\n-                  </button>\r\n-                  <span className=\"text-base font-medium\">{item.quantity}</span>\r\n-                  <button\r\n-                    onClick={() => handleQuantityChange(item.id, 1)}\r\n-                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n-                  >\r\n-                    +\r\n-                  </button>\r\n-                </div>\r\n-              </div>\r\n-            ))}\r\n-          </div>\r\n-\r\n-          {/* Total section only shows grand total */}\r\n-          <div className=\"mt-10 w-full bg-green-50 border border-green-200 rounded-xl p-6 shadow-md text-center sm:text-left\">\r\n-            <h3 className=\"text-lg font-semibold text-green-800 mb-2\">Total Amount</h3>\r\n-            <p className=\"text-3xl font-extrabold text-green-700 mb-1\">Rs {total.toFixed(2)}</p>\r\n-            <p className=\"text-sm text-green-600\">Includes all item subtotals</p>\r\n-          </div>\r\n-\r\n-          <div className=\"mt-6\">\r\n-            <button\r\n-              onClick={handleCheckout}\r\n-              disabled={checkoutLoading}\r\n-              className={`w-full text-white px-6 py-3 rounded-xl text-lg transition shadow ${\r\n-                checkoutLoading ? 'bg-green-400 cursor-not-allowed' : 'bg-green-600 hover:bg-green-700'\r\n-              }`}\r\n-            >\r\n-              {checkoutLoading ? 'Processing...' : 'Proceed to Payment'}\r\n-            </button>\r\n-\r\n-            {checkoutError && <p className=\"text-red-600 mt-2\">{checkoutError}</p>}\r\n-            {checkoutSuccess && <p className=\"text-green-600 mt-2\">{checkoutSuccess}</p>}\r\n-          </div>\r\n-        </>\r\n-        \r\n-      )}\r\n-      {checkoutSuccess && (\r\n-  <PopupMessage\r\n-    type=\"success\"\r\n-    message={checkoutSuccess}\r\n-    onClose={() => setCheckoutSuccess(null)}\r\n-  />\r\n-)}\r\n-\r\n-{checkoutError && (\r\n-  <PopupMessage\r\n-    type=\"error\"\r\n-    message={checkoutError}\r\n-    onClose={() => setCheckoutError(null)}\r\n-  />\r\n-)}\r\n-\r\n-    </div>\r\n-  );\r\n-}\r\n-'use client';\r\n-\r\n-import { useState, useEffect } from 'react';\r\n-import CheckoutSkeleton from '@/components/CheckoutSkeleton';\r\n-import { axiosWithCsrf } from '@/lib/axiosWithCsrf';\r\n-import PopupMessage from '@/components/PopupMessage';\r\n-\r\n-interface CartItem {\r\n-  id: number;\r\n-  name: string;\r\n-  price: number;\r\n-  quantity: number;\r\n-  imageSrc: string;\r\n-}\r\n-\r\n-export default function CheckoutPage() {\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n-  const [error, setError] = useState<string | null>(null);\r\n-  const [checkoutLoading, setCheckoutLoading] = useState(false);\r\n-  const [checkoutError, setCheckoutError] = useState<string | null>(null);\r\n-  const [checkoutSuccess, setCheckoutSuccess] = useState<string | null>(null);\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCart = async () => {\r\n-      try {\r\n-        const res = await axiosWithCsrf.get('/api/cart/items/');\r\n-        const mappedItems = res.data.map((item: any) => ({\r\n-          id: item.id,\r\n-          name: item.product_name,\r\n-          price: parseFloat(item.price),\r\n-          quantity: item.quantity,\r\n-          imageSrc: item.product_image,\r\n-        }));\r\n-        setCartItems(mappedItems);\r\n-      } catch (err: any) {\r\n-        setError(err.message || 'Failed to fetch cart');\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchCart();\r\n-  }, []);\r\n-\r\n-  const updateQuantity = async (id: number, newQty: number) => {\r\n-    if (newQty < 1) return;\r\n-    try {\r\n-      await axiosWithCsrf.post('/api/cart/update/', {\r\n-        cart_item_id: id,\r\n-        quantity: newQty,\r\n-      });\r\n-      setCartItems(prev =>\r\n-        prev.map(item =>\r\n-          item.id === id ? { ...item, quantity: newQty } : item\r\n-        )\r\n-      );\r\n-    } catch (err) {\r\n-      console.error('Failed to update quantity:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleQuantityChange = (id: number, delta: number) => {\r\n-    const item = cartItems.find(item => item.id === id);\r\n-    if (!item) return;\r\n-    const newQty = item.quantity + delta;\r\n-    if (newQty < 1) return;\r\n-    updateQuantity(id, newQty);\r\n-  };\r\n-\r\n-  const total = cartItems.reduce(\r\n-    (sum, item) => sum + item.price * item.quantity,\r\n-    0\r\n-  );\r\n-\r\n-  const handleCheckout = async () => {\r\n-    setCheckoutLoading(true);\r\n-    setCheckoutError(null);\r\n-    setCheckoutSuccess(null);\r\n-\r\n-    try {\r\n-      const res = await axiosWithCsrf.post('/api/checkout/');\r\n-      setCheckoutSuccess(`Order placed successfully! Order ID: ${res.data.order.id}`);\r\n-      // Optionally clear the cart here or refetch cart items:\r\n-      setCartItems([]);\r\n-    } catch (err: any) {\r\n-      setCheckoutError(err.response?.data?.error || 'Checkout failed');\r\n-    } finally {\r\n-      setCheckoutLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  if (loading) return <CheckoutSkeleton />;\r\n-  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n-\r\n-  return (\r\n-    <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n-      <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n-        Checkout\r\n-      </h1>\r\n-\r\n-      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n-        <strong>Note:</strong> You are about to place your order. Please double-check your items. Once placed, the order cannot be changed.\r\n-      </div>\r\n-\r\n-      {cartItems.length === 0 ? (\r\n-        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n-      ) : (\r\n-        <>\r\n-          <div className=\"space-y-4\">\r\n-            {cartItems.map(item => (\r\n-              <div\r\n-                key={item.id}\r\n-                className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n-              >\r\n-                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n-                  <img\r\n-                    src={item.imageSrc}\r\n-                    alt={item.name}\r\n-                    className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n-                  />\r\n-                  <div>\r\n-                    <h2 className=\"text-lg font-semibold text-gray-800\">{item.name}</h2>\r\n-                    <p className=\"text-sm text-gray-500\">Unit Price: Rs {item.price.toFixed(2)}</p>\r\n-                    <p className=\"text-sm text-gray-600 mt-1\">\r\n-                      Subtotal:{\" \"}\r\n-                      <span className=\"font-semibold text-green-700\">\r\n-                        Rs {(item.price * item.quantity).toFixed(2)}\r\n-                      </span>\r\n-                    </p>\r\n-                  </div>\r\n-                </div>\r\n-\r\n-                <div className=\"flex items-center space-x-3\">\r\n-                  <button\r\n-                    onClick={() => handleQuantityChange(item.id, -1)}\r\n-                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n-                  >\r\n-                    −\r\n-                  </button>\r\n-                  <span className=\"text-base font-medium\">{item.quantity}</span>\r\n-                  <button\r\n-                    onClick={() => handleQuantityChange(item.id, 1)}\r\n-                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n-                  >\r\n-                    +\r\n-                  </button>\r\n-                </div>\r\n-              </div>\r\n-            ))}\r\n-          </div>\r\n-\r\n-          {/* Total section only shows grand total */}\r\n-          <div className=\"mt-10 w-full bg-green-50 border border-green-200 rounded-xl p-6 shadow-md text-center sm:text-left\">\r\n-            <h3 className=\"text-lg font-semibold text-green-800 mb-2\">Total Amount</h3>\r\n-            <p className=\"text-3xl font-extrabold text-green-700 mb-1\">Rs {total.toFixed(2)}</p>\r\n-            <p className=\"text-sm text-green-600\">Includes all item subtotals</p>\r\n-          </div>\r\n-\r\n-          <div className=\"mt-6\">\r\n-            <button\r\n-              onClick={handleCheckout}\r\n-              disabled={checkoutLoading}\r\n-              className={`w-full text-white px-6 py-3 rounded-xl text-lg transition shadow ${\r\n-                checkoutLoading ? 'bg-green-400 cursor-not-allowed' : 'bg-green-600 hover:bg-green-700'\r\n-              }`}\r\n-            >\r\n-              {checkoutLoading ? 'Processing...' : 'Proceed to Payment'}\r\n-            </button>\r\n-\r\n-            {checkoutError && <p className=\"text-red-600 mt-2\">{checkoutError}</p>}\r\n-            {checkoutSuccess && <p className=\"text-green-600 mt-2\">{checkoutSuccess}</p>}\r\n-          </div>\r\n-        </>\r\n-        \r\n-      )}\r\n-      {checkoutSuccess && (\r\n-  <PopupMessage\r\n-    type=\"success\"\r\n-    message={checkoutSuccess}\r\n-    onClose={() => setCheckoutSuccess(null)}\r\n-  />\r\n-)}\r\n-\r\n-{checkoutError && (\r\n-  <PopupMessage\r\n-    type=\"error\"\r\n-    message={checkoutError}\r\n-    onClose={() => setCheckoutError(null)}\r\n-  />\r\n-)}\r\n-\r\n-    </div>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1749073946561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { useState, useEffect } from \"react\";\r\n import CheckoutSkeleton from \"@/components/CheckoutSkeleton\";\r\n import { axiosWithCsrf } from \"@/lib/axiosWithCsrf\";\r\n import PopupMessage from \"@/components/PopupMessage\";\r\n+import { useRouter } from 'next/navigation';\r\n \r\n interface CartItem {\r\n   id: number;\r\n   name: string;\r\n"
                },
                {
                    "date": 1749073984104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,216 @@\n+\"use client\";\r\n+\r\n+import { useState, useEffect } from \"react\";\r\n+import CheckoutSkeleton from \"@/components/CheckoutSkeleton\";\r\n+import { axiosWithCsrf } from \"@/lib/axiosWithCsrf\";\r\n+import PopupMessage from \"@/components/PopupMessage\";\r\n+import { useRouter } from 'next/navigation';\r\n+\r\n+interface CartItem {\r\n+  id: number;\r\n+  name: string;\r\n+  price: number;\r\n+  quantity: number;\r\n+  imageSrc: string;\r\n+}\r\n+\r\n+export default function CheckoutPage() {\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n+  const [error, setError] = useState<string | null>(null);\r\n+  const [checkoutLoading, setCheckoutLoading] = useState(false);\r\n+  const [checkoutError, setCheckoutError] = useState<string | null>(null);\r\n+  const [checkoutSuccess, setCheckoutSuccess] = useState<string | null>(null);\r\n+\r\n+  const router = useRouter();\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCart = async () => {\r\n+      try {\r\n+        const res = await axiosWithCsrf.get(\"/api/cart/items/\");\r\n+        const mappedItems = res.data.map((item: any) => ({\r\n+          id: item.id,\r\n+          name: item.product_name,\r\n+          price: parseFloat(item.price),\r\n+          quantity: item.quantity,\r\n+          imageSrc: item.product_image,\r\n+        }));\r\n+        setCartItems(mappedItems);\r\n+      } catch (err: any) {\r\n+        setError(err.message || \"Failed to fetch cart\");\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchCart();\r\n+  }, []);\r\n+\r\n+  const updateQuantity = async (id: number, newQty: number) => {\r\n+    if (newQty < 1) return;\r\n+    try {\r\n+      await axiosWithCsrf.post(\"/api/cart/update/\", {\r\n+        cart_item_id: id,\r\n+        quantity: newQty,\r\n+      });\r\n+      setCartItems((prev) =>\r\n+        prev.map((item) =>\r\n+          item.id === id ? { ...item, quantity: newQty } : item\r\n+        )\r\n+      );\r\n+    } catch (err) {\r\n+      console.error(\"Failed to update quantity:\", err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleQuantityChange = (id: number, delta: number) => {\r\n+    const item = cartItems.find((item) => item.id === id);\r\n+    if (!item) return;\r\n+    const newQty = item.quantity + delta;\r\n+    if (newQty < 1) return;\r\n+    updateQuantity(id, newQty);\r\n+  };\r\n+\r\n+  const total = cartItems.reduce(\r\n+    (sum, item) => sum + item.price * item.quantity,\r\n+    0\r\n+  );\r\n+\r\n+  const handleCheckout = async () => {\r\n+    setCheckoutLoading(true);\r\n+    setCheckoutError(null);\r\n+    setCheckoutSuccess(null);\r\n+\r\n+    try {\r\n+      const res = await axiosWithCsrf.post(\"/api/checkout/\");\r\n+      setCheckoutSuccess(\r\n+        `Order placed successfully! Order ID: ${res.data.order.id}`\r\n+      );\r\n+      // Optionally clear the cart here or refetch cart items:\r\n+      setCartItems([]);\r\n+    } catch (err: any) {\r\n+      setCheckoutError(err.response?.data?.error || \"Checkout failed\");\r\n+    } finally {\r\n+      setCheckoutLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  if (loading) return <CheckoutSkeleton />;\r\n+  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n+\r\n+  return (\r\n+    <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n+      <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n+        Checkout\r\n+      </h1>\r\n+\r\n+      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n+        <strong>Note:</strong> You are about to place your order. Please\r\n+        double-check your items. Once placed, the order cannot be changed.\r\n+      </div>\r\n+\r\n+      {cartItems.length === 0 ? (\r\n+        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n+      ) : (\r\n+        <>\r\n+          <div className=\"space-y-4\">\r\n+            {cartItems.map((item) => (\r\n+              <div\r\n+                key={item.id}\r\n+                className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n+              >\r\n+                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n+                  <img\r\n+                    src={item.imageSrc}\r\n+                    alt={item.name}\r\n+                    className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n+                  />\r\n+                  <div>\r\n+                    <h2 className=\"text-lg font-semibold text-gray-800\">\r\n+                      {item.name}\r\n+                    </h2>\r\n+                    <p className=\"text-sm text-gray-500\">\r\n+                      Unit Price: Rs {item.price.toFixed(2)}\r\n+                    </p>\r\n+                    <p className=\"text-sm text-gray-600 mt-1\">\r\n+                      Subtotal:{\" \"}\r\n+                      <span className=\"font-semibold text-green-700\">\r\n+                        Rs {(item.price * item.quantity).toFixed(2)}\r\n+                      </span>\r\n+                    </p>\r\n+                  </div>\r\n+                </div>\r\n+\r\n+                <div className=\"flex items-center space-x-3\">\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, -1)}\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n+                  >\r\n+                    −\r\n+                  </button>\r\n+                  <span className=\"text-base font-medium\">{item.quantity}</span>\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, 1)}\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n+                  >\r\n+                    +\r\n+                  </button>\r\n+                </div>\r\n+              </div>\r\n+            ))}\r\n+          </div>\r\n+\r\n+          {/* Total section only shows grand total */}\r\n+          <div className=\"mt-10 w-full bg-green-50 border border-green-200 rounded-xl p-6 shadow-md text-center sm:text-left\">\r\n+            <h3 className=\"text-lg font-semibold text-green-800 mb-2\">\r\n+              Total Amount\r\n+            </h3>\r\n+            <p className=\"text-3xl font-extrabold text-green-700 mb-1\">\r\n+              Rs {total.toFixed(2)}\r\n+            </p>\r\n+            <p className=\"text-sm text-green-600\">\r\n+              Includes all item subtotals\r\n+            </p>\r\n+          </div>\r\n+\r\n+          <div className=\"mt-6\">\r\n+         \r\n+            <button\r\n+              onClick={handleCheckout}\r\n+              disabled={checkoutLoading}\r\n+              className={`w-full text-white px-6 py-3 rounded-xl text-lg transition shadow ${\r\n+                checkoutLoading\r\n+                  ? \"bg-green-400 cursor-not-allowed\"\r\n+                  : \"bg-green-600 hover:bg-green-700\"\r\n+              }`}\r\n+            >\r\n+              {checkoutLoading ? \"Processing...\" : \"Proceed to Payment\"}\r\n+            </button>\r\n+\r\n+            {checkoutError && (\r\n+              <p className=\"text-red-600 mt-2\">{checkoutError}</p>\r\n+            )}\r\n+            {checkoutSuccess && (\r\n+              <p className=\"text-green-600 mt-2\">{checkoutSuccess}</p>\r\n+            )}\r\n+          </div>\r\n+        </>\r\n+      )}\r\n+      {checkoutSuccess && (\r\n+        <PopupMessage\r\n+          type=\"success\"\r\n+          message={checkoutSuccess}\r\n+          onClose={() => setCheckoutSuccess(null)}\r\n+        />\r\n+      )}\r\n+\r\n+      {checkoutError && (\r\n+        <PopupMessage\r\n+          type=\"error\"\r\n+          message={checkoutError}\r\n+          onClose={() => setCheckoutError(null)}\r\n+        />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1749073999682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,224 +103,17 @@\n       <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n         Checkout\r\n       </h1>\r\n \r\n-      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n-        <strong>Note:</strong> You are about to place your order. Please\r\n-        double-check your items. Once placed, the order cannot be changed.\r\n-      </div>\r\n+         {/* Back Button - fixed top right */}\r\n+      <button\r\n+        onClick={() => router.back()}\r\n+        className=\"absolute top-4 right-4 bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded shadow transition\"\r\n+        aria-label=\"Go back\"\r\n+      >\r\n+        ← Back\r\n+      </button>\r\n \r\n-      {cartItems.length === 0 ? (\r\n-        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n-      ) : (\r\n-        <>\r\n-          <div className=\"space-y-4\">\r\n-            {cartItems.map((item) => (\r\n-              <div\r\n-                key={item.id}\r\n-                className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n-              >\r\n-                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n-                  <img\r\n-                    src={item.imageSrc}\r\n-                    alt={item.name}\r\n-                    className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n-                  />\r\n-                  <div>\r\n-                    <h2 className=\"text-lg font-semibold text-gray-800\">\r\n-                      {item.name}\r\n-                    </h2>\r\n-                    <p className=\"text-sm text-gray-500\">\r\n-                      Unit Price: Rs {item.price.toFixed(2)}\r\n-                    </p>\r\n-                    <p className=\"text-sm text-gray-600 mt-1\">\r\n-                      Subtotal:{\" \"}\r\n-                      <span className=\"font-semibold text-green-700\">\r\n-                        Rs {(item.price * item.quantity).toFixed(2)}\r\n-                      </span>\r\n-                    </p>\r\n-                  </div>\r\n-                </div>\r\n-\r\n-                <div className=\"flex items-center space-x-3\">\r\n-                  <button\r\n-                    onClick={() => handleQuantityChange(item.id, -1)}\r\n-                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n-                  >\r\n-                    −\r\n-                  </button>\r\n-                  <span className=\"text-base font-medium\">{item.quantity}</span>\r\n-                  <button\r\n-                    onClick={() => handleQuantityChange(item.id, 1)}\r\n-                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n-                  >\r\n-                    +\r\n-                  </button>\r\n-                </div>\r\n-              </div>\r\n-            ))}\r\n-          </div>\r\n-\r\n-          {/* Total section only shows grand total */}\r\n-          <div className=\"mt-10 w-full bg-green-50 border border-green-200 rounded-xl p-6 shadow-md text-center sm:text-left\">\r\n-            <h3 className=\"text-lg font-semibold text-green-800 mb-2\">\r\n-              Total Amount\r\n-            </h3>\r\n-            <p className=\"text-3xl font-extrabold text-green-700 mb-1\">\r\n-              Rs {total.toFixed(2)}\r\n-            </p>\r\n-            <p className=\"text-sm text-green-600\">\r\n-              Includes all item subtotals\r\n-            </p>\r\n-          </div>\r\n-\r\n-          <div className=\"mt-6\">\r\n-         \r\n-            <button\r\n-              onClick={handleCheckout}\r\n-              disabled={checkoutLoading}\r\n-              className={`w-full text-white px-6 py-3 rounded-xl text-lg transition shadow ${\r\n-                checkoutLoading\r\n-                  ? \"bg-green-400 cursor-not-allowed\"\r\n-                  : \"bg-green-600 hover:bg-green-700\"\r\n-              }`}\r\n-            >\r\n-              {checkoutLoading ? \"Processing...\" : \"Proceed to Payment\"}\r\n-            </button>\r\n-\r\n-            {checkoutError && (\r\n-              <p className=\"text-red-600 mt-2\">{checkoutError}</p>\r\n-            )}\r\n-            {checkoutSuccess && (\r\n-              <p className=\"text-green-600 mt-2\">{checkoutSuccess}</p>\r\n-            )}\r\n-          </div>\r\n-        </>\r\n-      )}\r\n-      {checkoutSuccess && (\r\n-        <PopupMessage\r\n-          type=\"success\"\r\n-          message={checkoutSuccess}\r\n-          onClose={() => setCheckoutSuccess(null)}\r\n-        />\r\n-      )}\r\n-\r\n-      {checkoutError && (\r\n-        <PopupMessage\r\n-          type=\"error\"\r\n-          message={checkoutError}\r\n-          onClose={() => setCheckoutError(null)}\r\n-        />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n-\"use client\";\r\n-\r\n-import { useState, useEffect } from \"react\";\r\n-import CheckoutSkeleton from \"@/components/CheckoutSkeleton\";\r\n-import { axiosWithCsrf } from \"@/lib/axiosWithCsrf\";\r\n-import PopupMessage from \"@/components/PopupMessage\";\r\n-import { useRouter } from 'next/navigation';\r\n-\r\n-interface CartItem {\r\n-  id: number;\r\n-  name: string;\r\n-  price: number;\r\n-  quantity: number;\r\n-  imageSrc: string;\r\n-}\r\n-\r\n-export default function CheckoutPage() {\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n-  const [error, setError] = useState<string | null>(null);\r\n-  const [checkoutLoading, setCheckoutLoading] = useState(false);\r\n-  const [checkoutError, setCheckoutError] = useState<string | null>(null);\r\n-  const [checkoutSuccess, setCheckoutSuccess] = useState<string | null>(null);\r\n-\r\n-  const router = useRouter();\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCart = async () => {\r\n-      try {\r\n-        const res = await axiosWithCsrf.get(\"/api/cart/items/\");\r\n-        const mappedItems = res.data.map((item: any) => ({\r\n-          id: item.id,\r\n-          name: item.product_name,\r\n-          price: parseFloat(item.price),\r\n-          quantity: item.quantity,\r\n-          imageSrc: item.product_image,\r\n-        }));\r\n-        setCartItems(mappedItems);\r\n-      } catch (err: any) {\r\n-        setError(err.message || \"Failed to fetch cart\");\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchCart();\r\n-  }, []);\r\n-\r\n-  const updateQuantity = async (id: number, newQty: number) => {\r\n-    if (newQty < 1) return;\r\n-    try {\r\n-      await axiosWithCsrf.post(\"/api/cart/update/\", {\r\n-        cart_item_id: id,\r\n-        quantity: newQty,\r\n-      });\r\n-      setCartItems((prev) =>\r\n-        prev.map((item) =>\r\n-          item.id === id ? { ...item, quantity: newQty } : item\r\n-        )\r\n-      );\r\n-    } catch (err) {\r\n-      console.error(\"Failed to update quantity:\", err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleQuantityChange = (id: number, delta: number) => {\r\n-    const item = cartItems.find((item) => item.id === id);\r\n-    if (!item) return;\r\n-    const newQty = item.quantity + delta;\r\n-    if (newQty < 1) return;\r\n-    updateQuantity(id, newQty);\r\n-  };\r\n-\r\n-  const total = cartItems.reduce(\r\n-    (sum, item) => sum + item.price * item.quantity,\r\n-    0\r\n-  );\r\n-\r\n-  const handleCheckout = async () => {\r\n-    setCheckoutLoading(true);\r\n-    setCheckoutError(null);\r\n-    setCheckoutSuccess(null);\r\n-\r\n-    try {\r\n-      const res = await axiosWithCsrf.post(\"/api/checkout/\");\r\n-      setCheckoutSuccess(\r\n-        `Order placed successfully! Order ID: ${res.data.order.id}`\r\n-      );\r\n-      // Optionally clear the cart here or refetch cart items:\r\n-      setCartItems([]);\r\n-    } catch (err: any) {\r\n-      setCheckoutError(err.response?.data?.error || \"Checkout failed\");\r\n-    } finally {\r\n-      setCheckoutLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  if (loading) return <CheckoutSkeleton />;\r\n-  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n-\r\n-  return (\r\n-    <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n-      <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n-        Checkout\r\n-      </h1>\r\n-\r\n       <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n         <strong>Note:</strong> You are about to place your order. Please\r\n         double-check your items. Once placed, the order cannot be changed.\r\n       </div>\r\n@@ -389,16 +182,8 @@\n             </p>\r\n           </div>\r\n \r\n           <div className=\"mt-6\">\r\n-            {/* Back Button - fixed top right */}\r\n-      <button\r\n-        onClick={() => router.back()}\r\n-        className=\"absolute top-4 right-4 bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded shadow transition\"\r\n-        aria-label=\"Go back\"\r\n-      >\r\n-        ← Back\r\n-      </button>\r\n             <button\r\n               onClick={handleCheckout}\r\n               disabled={checkoutLoading}\r\n               className={`w-full text-white px-6 py-3 rounded-xl text-lg transition shadow ${\r\n"
                },
                {
                    "date": 1749074032476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,12 +103,12 @@\n       <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n         Checkout\r\n       </h1>\r\n \r\n-         {/* Back Button - fixed top right */}\r\n+      {/* Back Button - fixed top right */}\r\n       <button\r\n         onClick={() => router.back()}\r\n-        className=\"absolute top-4 right-4 bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded shadow transition\"\r\n+        className=\"absolute top-4 z- right-4 bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded shadow transition\"\r\n         aria-label=\"Go back\"\r\n       >\r\n         ← Back\r\n       </button>\r\n"
                },
                {
                    "date": 1749074041280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n \r\n       {/* Back Button - fixed top right */}\r\n       <button\r\n         onClick={() => router.back()}\r\n-        className=\"absolute top-4 z- right-4 bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded shadow transition\"\r\n+        className=\"absolute top-4 z-50 right-4 bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded shadow transition\"\r\n         aria-label=\"Go back\"\r\n       >\r\n         ← Back\r\n       </button>\r\n"
                },
                {
                    "date": 1749074049984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n \r\n       {/* Back Button - fixed top right */}\r\n       <button\r\n         onClick={() => router.back()}\r\n-        className=\"absolute top-4 z-50 right-4 bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded shadow transition\"\r\n+        className=\"top-4 z-50 right-4 bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded shadow transition\"\r\n         aria-label=\"Go back\"\r\n       >\r\n         ← Back\r\n       </button>\r\n"
                },
                {
                    "date": 1749074062374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n \r\n       {/* Back Button - fixed top right */}\r\n       <button\r\n         onClick={() => router.back()}\r\n-        className=\"top-4 z-50 right-4 bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded shadow transition\"\r\n+        className=\" right-4 bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded shadow transition\"\r\n         aria-label=\"Go back\"\r\n       >\r\n         ← Back\r\n       </button>\r\n"
                },
                {
                    "date": 1749074068559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n \r\n       {/* Back Button - fixed top right */}\r\n       <button\r\n         onClick={() => router.back()}\r\n-        className=\" right-4 bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded shadow transition\"\r\n+        className=\"bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded shadow transition\"\r\n         aria-label=\"Go back\"\r\n       >\r\n         ← Back\r\n       </button>\r\n"
                },
                {
                    "date": 1749074113787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,224 @@\n+\"use client\";\r\n+\r\n+import { useState, useEffect } from \"react\";\r\n+import CheckoutSkeleton from \"@/components/CheckoutSkeleton\";\r\n+import { axiosWithCsrf } from \"@/lib/axiosWithCsrf\";\r\n+import PopupMessage from \"@/components/PopupMessage\";\r\n+import { useRouter } from 'next/navigation';\r\n+\r\n+interface CartItem {\r\n+  id: number;\r\n+  name: string;\r\n+  price: number;\r\n+  quantity: number;\r\n+  imageSrc: string;\r\n+}\r\n+\r\n+export default function CheckoutPage() {\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n+  const [error, setError] = useState<string | null>(null);\r\n+  const [checkoutLoading, setCheckoutLoading] = useState(false);\r\n+  const [checkoutError, setCheckoutError] = useState<string | null>(null);\r\n+  const [checkoutSuccess, setCheckoutSuccess] = useState<string | null>(null);\r\n+\r\n+  const router = useRouter();\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCart = async () => {\r\n+      try {\r\n+        const res = await axiosWithCsrf.get(\"/api/cart/items/\");\r\n+        const mappedItems = res.data.map((item: any) => ({\r\n+          id: item.id,\r\n+          name: item.product_name,\r\n+          price: parseFloat(item.price),\r\n+          quantity: item.quantity,\r\n+          imageSrc: item.product_image,\r\n+        }));\r\n+        setCartItems(mappedItems);\r\n+      } catch (err: any) {\r\n+        setError(err.message || \"Failed to fetch cart\");\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchCart();\r\n+  }, []);\r\n+\r\n+  const updateQuantity = async (id: number, newQty: number) => {\r\n+    if (newQty < 1) return;\r\n+    try {\r\n+      await axiosWithCsrf.post(\"/api/cart/update/\", {\r\n+        cart_item_id: id,\r\n+        quantity: newQty,\r\n+      });\r\n+      setCartItems((prev) =>\r\n+        prev.map((item) =>\r\n+          item.id === id ? { ...item, quantity: newQty } : item\r\n+        )\r\n+      );\r\n+    } catch (err) {\r\n+      console.error(\"Failed to update quantity:\", err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleQuantityChange = (id: number, delta: number) => {\r\n+    const item = cartItems.find((item) => item.id === id);\r\n+    if (!item) return;\r\n+    const newQty = item.quantity + delta;\r\n+    if (newQty < 1) return;\r\n+    updateQuantity(id, newQty);\r\n+  };\r\n+\r\n+  const total = cartItems.reduce(\r\n+    (sum, item) => sum + item.price * item.quantity,\r\n+    0\r\n+  );\r\n+\r\n+  const handleCheckout = async () => {\r\n+    setCheckoutLoading(true);\r\n+    setCheckoutError(null);\r\n+    setCheckoutSuccess(null);\r\n+\r\n+    try {\r\n+      const res = await axiosWithCsrf.post(\"/api/checkout/\");\r\n+      setCheckoutSuccess(\r\n+        `Order placed successfully! Order ID: ${res.data.order.id}`\r\n+      );\r\n+      // Optionally clear the cart here or refetch cart items:\r\n+      setCartItems([]);\r\n+    } catch (err: any) {\r\n+      setCheckoutError(err.response?.data?.error || \"Checkout failed\");\r\n+    } finally {\r\n+      setCheckoutLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  if (loading) return <CheckoutSkeleton />;\r\n+  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n+\r\n+  return (\r\n+    <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n+      <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n+        Checkout\r\n+      </h1>\r\n+\r\n+      {/* Back Button - fixed top right */}\r\n+      <button\r\n+        onClick={() => router.back()}\r\n+        className=\"bg-gray-200 align hover:bg-gray-300 text-gray-800 px-4 py-2 rounded shadow transition\"\r\n+        aria-label=\"Go back\"\r\n+      >\r\n+        ← Back\r\n+      </button>\r\n+\r\n+      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n+        <strong>Note:</strong> You are about to place your order. Please\r\n+        double-check your items. Once placed, the order cannot be changed.\r\n+      </div>\r\n+\r\n+      {cartItems.length === 0 ? (\r\n+        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n+      ) : (\r\n+        <>\r\n+          <div className=\"space-y-4\">\r\n+            {cartItems.map((item) => (\r\n+              <div\r\n+                key={item.id}\r\n+                className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n+              >\r\n+                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n+                  <img\r\n+                    src={item.imageSrc}\r\n+                    alt={item.name}\r\n+                    className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n+                  />\r\n+                  <div>\r\n+                    <h2 className=\"text-lg font-semibold text-gray-800\">\r\n+                      {item.name}\r\n+                    </h2>\r\n+                    <p className=\"text-sm text-gray-500\">\r\n+                      Unit Price: Rs {item.price.toFixed(2)}\r\n+                    </p>\r\n+                    <p className=\"text-sm text-gray-600 mt-1\">\r\n+                      Subtotal:{\" \"}\r\n+                      <span className=\"font-semibold text-green-700\">\r\n+                        Rs {(item.price * item.quantity).toFixed(2)}\r\n+                      </span>\r\n+                    </p>\r\n+                  </div>\r\n+                </div>\r\n+\r\n+                <div className=\"flex items-center space-x-3\">\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, -1)}\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n+                  >\r\n+                    −\r\n+                  </button>\r\n+                  <span className=\"text-base font-medium\">{item.quantity}</span>\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, 1)}\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n+                  >\r\n+                    +\r\n+                  </button>\r\n+                </div>\r\n+              </div>\r\n+            ))}\r\n+          </div>\r\n+\r\n+          {/* Total section only shows grand total */}\r\n+          <div className=\"mt-10 w-full bg-green-50 border border-green-200 rounded-xl p-6 shadow-md text-center sm:text-left\">\r\n+            <h3 className=\"text-lg font-semibold text-green-800 mb-2\">\r\n+              Total Amount\r\n+            </h3>\r\n+            <p className=\"text-3xl font-extrabold text-green-700 mb-1\">\r\n+              Rs {total.toFixed(2)}\r\n+            </p>\r\n+            <p className=\"text-sm text-green-600\">\r\n+              Includes all item subtotals\r\n+            </p>\r\n+          </div>\r\n+\r\n+          <div className=\"mt-6\">\r\n+            <button\r\n+              onClick={handleCheckout}\r\n+              disabled={checkoutLoading}\r\n+              className={`w-full text-white px-6 py-3 rounded-xl text-lg transition shadow ${\r\n+                checkoutLoading\r\n+                  ? \"bg-green-400 cursor-not-allowed\"\r\n+                  : \"bg-green-600 hover:bg-green-700\"\r\n+              }`}\r\n+            >\r\n+              {checkoutLoading ? \"Processing...\" : \"Proceed to Payment\"}\r\n+            </button>\r\n+\r\n+            {checkoutError && (\r\n+              <p className=\"text-red-600 mt-2\">{checkoutError}</p>\r\n+            )}\r\n+            {checkoutSuccess && (\r\n+              <p className=\"text-green-600 mt-2\">{checkoutSuccess}</p>\r\n+            )}\r\n+          </div>\r\n+        </>\r\n+      )}\r\n+      {checkoutSuccess && (\r\n+        <PopupMessage\r\n+          type=\"success\"\r\n+          message={checkoutSuccess}\r\n+          onClose={() => setCheckoutSuccess(null)}\r\n+        />\r\n+      )}\r\n+\r\n+      {checkoutError && (\r\n+        <PopupMessage\r\n+          type=\"error\"\r\n+          message={checkoutError}\r\n+          onClose={() => setCheckoutError(null)}\r\n+        />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1749074124420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n \r\n       {/* Back Button - fixed top right */}\r\n       <button\r\n         onClick={() => router.back()}\r\n-        className=\"bg-gray-200 align hover:bg-gray-300 text-gray-800 px-4 py-2 rounded shadow transition\"\r\n+        className=\"bg-gray-200 align-right hover:bg-gray-300 text-gray-800 px-4 py-2 rounded shadow transition\"\r\n         aria-label=\"Go back\"\r\n       >\r\n         ← Back\r\n       </button>\r\n@@ -221,228 +221,4 @@\n       )}\r\n     </div>\r\n   );\r\n }\r\n-\"use client\";\r\n-\r\n-import { useState, useEffect } from \"react\";\r\n-import CheckoutSkeleton from \"@/components/CheckoutSkeleton\";\r\n-import { axiosWithCsrf } from \"@/lib/axiosWithCsrf\";\r\n-import PopupMessage from \"@/components/PopupMessage\";\r\n-import { useRouter } from 'next/navigation';\r\n-\r\n-interface CartItem {\r\n-  id: number;\r\n-  name: string;\r\n-  price: number;\r\n-  quantity: number;\r\n-  imageSrc: string;\r\n-}\r\n-\r\n-export default function CheckoutPage() {\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n-  const [error, setError] = useState<string | null>(null);\r\n-  const [checkoutLoading, setCheckoutLoading] = useState(false);\r\n-  const [checkoutError, setCheckoutError] = useState<string | null>(null);\r\n-  const [checkoutSuccess, setCheckoutSuccess] = useState<string | null>(null);\r\n-\r\n-  const router = useRouter();\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCart = async () => {\r\n-      try {\r\n-        const res = await axiosWithCsrf.get(\"/api/cart/items/\");\r\n-        const mappedItems = res.data.map((item: any) => ({\r\n-          id: item.id,\r\n-          name: item.product_name,\r\n-          price: parseFloat(item.price),\r\n-          quantity: item.quantity,\r\n-          imageSrc: item.product_image,\r\n-        }));\r\n-        setCartItems(mappedItems);\r\n-      } catch (err: any) {\r\n-        setError(err.message || \"Failed to fetch cart\");\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchCart();\r\n-  }, []);\r\n-\r\n-  const updateQuantity = async (id: number, newQty: number) => {\r\n-    if (newQty < 1) return;\r\n-    try {\r\n-      await axiosWithCsrf.post(\"/api/cart/update/\", {\r\n-        cart_item_id: id,\r\n-        quantity: newQty,\r\n-      });\r\n-      setCartItems((prev) =>\r\n-        prev.map((item) =>\r\n-          item.id === id ? { ...item, quantity: newQty } : item\r\n-        )\r\n-      );\r\n-    } catch (err) {\r\n-      console.error(\"Failed to update quantity:\", err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleQuantityChange = (id: number, delta: number) => {\r\n-    const item = cartItems.find((item) => item.id === id);\r\n-    if (!item) return;\r\n-    const newQty = item.quantity + delta;\r\n-    if (newQty < 1) return;\r\n-    updateQuantity(id, newQty);\r\n-  };\r\n-\r\n-  const total = cartItems.reduce(\r\n-    (sum, item) => sum + item.price * item.quantity,\r\n-    0\r\n-  );\r\n-\r\n-  const handleCheckout = async () => {\r\n-    setCheckoutLoading(true);\r\n-    setCheckoutError(null);\r\n-    setCheckoutSuccess(null);\r\n-\r\n-    try {\r\n-      const res = await axiosWithCsrf.post(\"/api/checkout/\");\r\n-      setCheckoutSuccess(\r\n-        `Order placed successfully! Order ID: ${res.data.order.id}`\r\n-      );\r\n-      // Optionally clear the cart here or refetch cart items:\r\n-      setCartItems([]);\r\n-    } catch (err: any) {\r\n-      setCheckoutError(err.response?.data?.error || \"Checkout failed\");\r\n-    } finally {\r\n-      setCheckoutLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  if (loading) return <CheckoutSkeleton />;\r\n-  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n-\r\n-  return (\r\n-    <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n-      <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n-        Checkout\r\n-      </h1>\r\n-\r\n-      {/* Back Button - fixed top right */}\r\n-      <button\r\n-        onClick={() => router.back()}\r\n-        className=\"bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded shadow transition\"\r\n-        aria-label=\"Go back\"\r\n-      >\r\n-        ← Back\r\n-      </button>\r\n-\r\n-      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n-        <strong>Note:</strong> You are about to place your order. Please\r\n-        double-check your items. Once placed, the order cannot be changed.\r\n-      </div>\r\n-\r\n-      {cartItems.length === 0 ? (\r\n-        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n-      ) : (\r\n-        <>\r\n-          <div className=\"space-y-4\">\r\n-            {cartItems.map((item) => (\r\n-              <div\r\n-                key={item.id}\r\n-                className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n-              >\r\n-                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n-                  <img\r\n-                    src={item.imageSrc}\r\n-                    alt={item.name}\r\n-                    className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n-                  />\r\n-                  <div>\r\n-                    <h2 className=\"text-lg font-semibold text-gray-800\">\r\n-                      {item.name}\r\n-                    </h2>\r\n-                    <p className=\"text-sm text-gray-500\">\r\n-                      Unit Price: Rs {item.price.toFixed(2)}\r\n-                    </p>\r\n-                    <p className=\"text-sm text-gray-600 mt-1\">\r\n-                      Subtotal:{\" \"}\r\n-                      <span className=\"font-semibold text-green-700\">\r\n-                        Rs {(item.price * item.quantity).toFixed(2)}\r\n-                      </span>\r\n-                    </p>\r\n-                  </div>\r\n-                </div>\r\n-\r\n-                <div className=\"flex items-center space-x-3\">\r\n-                  <button\r\n-                    onClick={() => handleQuantityChange(item.id, -1)}\r\n-                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n-                  >\r\n-                    −\r\n-                  </button>\r\n-                  <span className=\"text-base font-medium\">{item.quantity}</span>\r\n-                  <button\r\n-                    onClick={() => handleQuantityChange(item.id, 1)}\r\n-                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n-                  >\r\n-                    +\r\n-                  </button>\r\n-                </div>\r\n-              </div>\r\n-            ))}\r\n-          </div>\r\n-\r\n-          {/* Total section only shows grand total */}\r\n-          <div className=\"mt-10 w-full bg-green-50 border border-green-200 rounded-xl p-6 shadow-md text-center sm:text-left\">\r\n-            <h3 className=\"text-lg font-semibold text-green-800 mb-2\">\r\n-              Total Amount\r\n-            </h3>\r\n-            <p className=\"text-3xl font-extrabold text-green-700 mb-1\">\r\n-              Rs {total.toFixed(2)}\r\n-            </p>\r\n-            <p className=\"text-sm text-green-600\">\r\n-              Includes all item subtotals\r\n-            </p>\r\n-          </div>\r\n-\r\n-          <div className=\"mt-6\">\r\n-            <button\r\n-              onClick={handleCheckout}\r\n-              disabled={checkoutLoading}\r\n-              className={`w-full text-white px-6 py-3 rounded-xl text-lg transition shadow ${\r\n-                checkoutLoading\r\n-                  ? \"bg-green-400 cursor-not-allowed\"\r\n-                  : \"bg-green-600 hover:bg-green-700\"\r\n-              }`}\r\n-            >\r\n-              {checkoutLoading ? \"Processing...\" : \"Proceed to Payment\"}\r\n-            </button>\r\n-\r\n-            {checkoutError && (\r\n-              <p className=\"text-red-600 mt-2\">{checkoutError}</p>\r\n-            )}\r\n-            {checkoutSuccess && (\r\n-              <p className=\"text-green-600 mt-2\">{checkoutSuccess}</p>\r\n-            )}\r\n-          </div>\r\n-        </>\r\n-      )}\r\n-      {checkoutSuccess && (\r\n-        <PopupMessage\r\n-          type=\"success\"\r\n-          message={checkoutSuccess}\r\n-          onClose={() => setCheckoutSuccess(null)}\r\n-        />\r\n-      )}\r\n-\r\n-      {checkoutError && (\r\n-        <PopupMessage\r\n-          type=\"error\"\r\n-          message={checkoutError}\r\n-          onClose={() => setCheckoutError(null)}\r\n-        />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1749074130031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n \r\n       {/* Back Button - fixed top right */}\r\n       <button\r\n         onClick={() => router.back()}\r\n-        className=\"bg-gray-200 align-right hover:bg-gray-300 text-gray-800 px-4 py-2 rounded shadow transition\"\r\n+        className=\"bg-gray-200 jus hover:bg-gray-300 text-gray-800 px-4 py-2 rounded shadow transition\"\r\n         aria-label=\"Go back\"\r\n       >\r\n         ← Back\r\n       </button>\r\n"
                },
                {
                    "date": 1749074138832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n \r\n       {/* Back Button - fixed top right */}\r\n       <button\r\n         onClick={() => router.back()}\r\n-        className=\"bg-gray-200 jus hover:bg-gray-300 text-gray-800 px-4 py-2 rounded shadow transition\"\r\n+        className=\" flex bg-gray-200 justify-right hover:bg-gray-300 text-gray-800 px-4 py-2 rounded shadow transition\"\r\n         aria-label=\"Go back\"\r\n       >\r\n         ← Back\r\n       </button>\r\n"
                },
                {
                    "date": 1749074148340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n \r\n       {/* Back Button - fixed top right */}\r\n       <button\r\n         onClick={() => router.back()}\r\n-        className=\" flex bg-gray-200 justify-right hover:bg-gray-300 text-gray-800 px-4 py-2 rounded shadow transition\"\r\n+        className=\"bg-gray-200 align-right hover:bg-gray-300 text-gray-800 px-4 py-2 rounded shadow transition\"\r\n         aria-label=\"Go back\"\r\n       >\r\n         ← Back\r\n       </button>\r\n"
                },
                {
                    "date": 1749074313829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,17 +103,8 @@\n       <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n         Checkout\r\n       </h1>\r\n \r\n-      {/* Back Button - fixed top right */}\r\n-      <button\r\n-        onClick={() => router.back()}\r\n-        className=\"bg-gray-200 align-right hover:bg-gray-300 text-gray-800 px-4 py-2 rounded shadow transition\"\r\n-        aria-label=\"Go back\"\r\n-      >\r\n-        ← Back\r\n-      </button>\r\n-\r\n       <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n         <strong>Note:</strong> You are about to place your order. Please\r\n         double-check your items. Once placed, the order cannot be changed.\r\n       </div>\r\n"
                },
                {
                    "date": 1749074322883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,216 @@\n+\"use client\";\r\n+\r\n+import { useState, useEffect } from \"react\";\r\n+import CheckoutSkeleton from \"@/components/CheckoutSkeleton\";\r\n+import { axiosWithCsrf } from \"@/lib/axiosWithCsrf\";\r\n+import PopupMessage from \"@/components/PopupMessage\";\r\n+import { useRouter } from 'next/navigation';\r\n+import BackButton from '@/components/BackButton';\r\n+\r\n+interface CartItem {\r\n+  id: number;\r\n+  name: string;\r\n+  price: number;\r\n+  quantity: number;\r\n+  imageSrc: string;\r\n+}\r\n+\r\n+export default function CheckoutPage() {\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n+  const [error, setError] = useState<string | null>(null);\r\n+  const [checkoutLoading, setCheckoutLoading] = useState(false);\r\n+  const [checkoutError, setCheckoutError] = useState<string | null>(null);\r\n+  const [checkoutSuccess, setCheckoutSuccess] = useState<string | null>(null);\r\n+\r\n+  const router = useRouter();\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCart = async () => {\r\n+      try {\r\n+        const res = await axiosWithCsrf.get(\"/api/cart/items/\");\r\n+        const mappedItems = res.data.map((item: any) => ({\r\n+          id: item.id,\r\n+          name: item.product_name,\r\n+          price: parseFloat(item.price),\r\n+          quantity: item.quantity,\r\n+          imageSrc: item.product_image,\r\n+        }));\r\n+        setCartItems(mappedItems);\r\n+      } catch (err: any) {\r\n+        setError(err.message || \"Failed to fetch cart\");\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchCart();\r\n+  }, []);\r\n+\r\n+  const updateQuantity = async (id: number, newQty: number) => {\r\n+    if (newQty < 1) return;\r\n+    try {\r\n+      await axiosWithCsrf.post(\"/api/cart/update/\", {\r\n+        cart_item_id: id,\r\n+        quantity: newQty,\r\n+      });\r\n+      setCartItems((prev) =>\r\n+        prev.map((item) =>\r\n+          item.id === id ? { ...item, quantity: newQty } : item\r\n+        )\r\n+      );\r\n+    } catch (err) {\r\n+      console.error(\"Failed to update quantity:\", err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleQuantityChange = (id: number, delta: number) => {\r\n+    const item = cartItems.find((item) => item.id === id);\r\n+    if (!item) return;\r\n+    const newQty = item.quantity + delta;\r\n+    if (newQty < 1) return;\r\n+    updateQuantity(id, newQty);\r\n+  };\r\n+\r\n+  const total = cartItems.reduce(\r\n+    (sum, item) => sum + item.price * item.quantity,\r\n+    0\r\n+  );\r\n+\r\n+  const handleCheckout = async () => {\r\n+    setCheckoutLoading(true);\r\n+    setCheckoutError(null);\r\n+    setCheckoutSuccess(null);\r\n+\r\n+    try {\r\n+      const res = await axiosWithCsrf.post(\"/api/checkout/\");\r\n+      setCheckoutSuccess(\r\n+        `Order placed successfully! Order ID: ${res.data.order.id}`\r\n+      );\r\n+      // Optionally clear the cart here or refetch cart items:\r\n+      setCartItems([]);\r\n+    } catch (err: any) {\r\n+      setCheckoutError(err.response?.data?.error || \"Checkout failed\");\r\n+    } finally {\r\n+      setCheckoutLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  if (loading) return <CheckoutSkeleton />;\r\n+  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n+\r\n+  return (\r\n+    <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n+      <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n+        Checkout\r\n+      </h1>\r\n+\r\n+      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n+        <strong>Note:</strong> You are about to place your order. Please\r\n+        double-check your items. Once placed, the order cannot be changed.\r\n+      </div>\r\n+\r\n+      {cartItems.length === 0 ? (\r\n+        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n+      ) : (\r\n+        <>\r\n+          <div className=\"space-y-4\">\r\n+            {cartItems.map((item) => (\r\n+              <div\r\n+                key={item.id}\r\n+                className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n+              >\r\n+                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n+                  <img\r\n+                    src={item.imageSrc}\r\n+                    alt={item.name}\r\n+                    className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n+                  />\r\n+                  <div>\r\n+                    <h2 className=\"text-lg font-semibold text-gray-800\">\r\n+                      {item.name}\r\n+                    </h2>\r\n+                    <p className=\"text-sm text-gray-500\">\r\n+                      Unit Price: Rs {item.price.toFixed(2)}\r\n+                    </p>\r\n+                    <p className=\"text-sm text-gray-600 mt-1\">\r\n+                      Subtotal:{\" \"}\r\n+                      <span className=\"font-semibold text-green-700\">\r\n+                        Rs {(item.price * item.quantity).toFixed(2)}\r\n+                      </span>\r\n+                    </p>\r\n+                  </div>\r\n+                </div>\r\n+\r\n+                <div className=\"flex items-center space-x-3\">\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, -1)}\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n+                  >\r\n+                    −\r\n+                  </button>\r\n+                  <span className=\"text-base font-medium\">{item.quantity}</span>\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, 1)}\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n+                  >\r\n+                    +\r\n+                  </button>\r\n+                </div>\r\n+              </div>\r\n+            ))}\r\n+          </div>\r\n+\r\n+          {/* Total section only shows grand total */}\r\n+          <div className=\"mt-10 w-full bg-green-50 border border-green-200 rounded-xl p-6 shadow-md text-center sm:text-left\">\r\n+            <h3 className=\"text-lg font-semibold text-green-800 mb-2\">\r\n+              Total Amount\r\n+            </h3>\r\n+            <p className=\"text-3xl font-extrabold text-green-700 mb-1\">\r\n+              Rs {total.toFixed(2)}\r\n+            </p>\r\n+            <p className=\"text-sm text-green-600\">\r\n+              Includes all item subtotals\r\n+            </p>\r\n+          </div>\r\n+\r\n+          <div className=\"mt-6\">\r\n+            <button\r\n+              onClick={handleCheckout}\r\n+              disabled={checkoutLoading}\r\n+              className={`w-full text-white px-6 py-3 rounded-xl text-lg transition shadow ${\r\n+                checkoutLoading\r\n+                  ? \"bg-green-400 cursor-not-allowed\"\r\n+                  : \"bg-green-600 hover:bg-green-700\"\r\n+              }`}\r\n+            >\r\n+              {checkoutLoading ? \"Processing...\" : \"Proceed to Payment\"}\r\n+            </button>\r\n+\r\n+            {checkoutError && (\r\n+              <p className=\"text-red-600 mt-2\">{checkoutError}</p>\r\n+            )}\r\n+            {checkoutSuccess && (\r\n+              <p className=\"text-green-600 mt-2\">{checkoutSuccess}</p>\r\n+            )}\r\n+          </div>\r\n+        </>\r\n+      )}\r\n+      {checkoutSuccess && (\r\n+        <PopupMessage\r\n+          type=\"success\"\r\n+          message={checkoutSuccess}\r\n+          onClose={() => setCheckoutSuccess(null)}\r\n+        />\r\n+      )}\r\n+\r\n+      {checkoutError && (\r\n+        <PopupMessage\r\n+          type=\"error\"\r\n+          message={checkoutError}\r\n+          onClose={() => setCheckoutError(null)}\r\n+        />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1749074360301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,223 +104,10 @@\n       <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n         Checkout\r\n       </h1>\r\n \r\n-      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n-        <strong>Note:</strong> You are about to place your order. Please\r\n-        double-check your items. Once placed, the order cannot be changed.\r\n-      </div>\r\n+      <BackButton />\r\n \r\n-      {cartItems.length === 0 ? (\r\n-        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n-      ) : (\r\n-        <>\r\n-          <div className=\"space-y-4\">\r\n-            {cartItems.map((item) => (\r\n-              <div\r\n-                key={item.id}\r\n-                className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n-              >\r\n-                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n-                  <img\r\n-                    src={item.imageSrc}\r\n-                    alt={item.name}\r\n-                    className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n-                  />\r\n-                  <div>\r\n-                    <h2 className=\"text-lg font-semibold text-gray-800\">\r\n-                      {item.name}\r\n-                    </h2>\r\n-                    <p className=\"text-sm text-gray-500\">\r\n-                      Unit Price: Rs {item.price.toFixed(2)}\r\n-                    </p>\r\n-                    <p className=\"text-sm text-gray-600 mt-1\">\r\n-                      Subtotal:{\" \"}\r\n-                      <span className=\"font-semibold text-green-700\">\r\n-                        Rs {(item.price * item.quantity).toFixed(2)}\r\n-                      </span>\r\n-                    </p>\r\n-                  </div>\r\n-                </div>\r\n-\r\n-                <div className=\"flex items-center space-x-3\">\r\n-                  <button\r\n-                    onClick={() => handleQuantityChange(item.id, -1)}\r\n-                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n-                  >\r\n-                    −\r\n-                  </button>\r\n-                  <span className=\"text-base font-medium\">{item.quantity}</span>\r\n-                  <button\r\n-                    onClick={() => handleQuantityChange(item.id, 1)}\r\n-                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n-                  >\r\n-                    +\r\n-                  </button>\r\n-                </div>\r\n-              </div>\r\n-            ))}\r\n-          </div>\r\n-\r\n-          {/* Total section only shows grand total */}\r\n-          <div className=\"mt-10 w-full bg-green-50 border border-green-200 rounded-xl p-6 shadow-md text-center sm:text-left\">\r\n-            <h3 className=\"text-lg font-semibold text-green-800 mb-2\">\r\n-              Total Amount\r\n-            </h3>\r\n-            <p className=\"text-3xl font-extrabold text-green-700 mb-1\">\r\n-              Rs {total.toFixed(2)}\r\n-            </p>\r\n-            <p className=\"text-sm text-green-600\">\r\n-              Includes all item subtotals\r\n-            </p>\r\n-          </div>\r\n-\r\n-          <div className=\"mt-6\">\r\n-            <button\r\n-              onClick={handleCheckout}\r\n-              disabled={checkoutLoading}\r\n-              className={`w-full text-white px-6 py-3 rounded-xl text-lg transition shadow ${\r\n-                checkoutLoading\r\n-                  ? \"bg-green-400 cursor-not-allowed\"\r\n-                  : \"bg-green-600 hover:bg-green-700\"\r\n-              }`}\r\n-            >\r\n-              {checkoutLoading ? \"Processing...\" : \"Proceed to Payment\"}\r\n-            </button>\r\n-\r\n-            {checkoutError && (\r\n-              <p className=\"text-red-600 mt-2\">{checkoutError}</p>\r\n-            )}\r\n-            {checkoutSuccess && (\r\n-              <p className=\"text-green-600 mt-2\">{checkoutSuccess}</p>\r\n-            )}\r\n-          </div>\r\n-        </>\r\n-      )}\r\n-      {checkoutSuccess && (\r\n-        <PopupMessage\r\n-          type=\"success\"\r\n-          message={checkoutSuccess}\r\n-          onClose={() => setCheckoutSuccess(null)}\r\n-        />\r\n-      )}\r\n-\r\n-      {checkoutError && (\r\n-        <PopupMessage\r\n-          type=\"error\"\r\n-          message={checkoutError}\r\n-          onClose={() => setCheckoutError(null)}\r\n-        />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n-\"use client\";\r\n-\r\n-import { useState, useEffect } from \"react\";\r\n-import CheckoutSkeleton from \"@/components/CheckoutSkeleton\";\r\n-import { axiosWithCsrf } from \"@/lib/axiosWithCsrf\";\r\n-import PopupMessage from \"@/components/PopupMessage\";\r\n-import { useRouter } from 'next/navigation';\r\n-\r\n-interface CartItem {\r\n-  id: number;\r\n-  name: string;\r\n-  price: number;\r\n-  quantity: number;\r\n-  imageSrc: string;\r\n-}\r\n-\r\n-export default function CheckoutPage() {\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n-  const [error, setError] = useState<string | null>(null);\r\n-  const [checkoutLoading, setCheckoutLoading] = useState(false);\r\n-  const [checkoutError, setCheckoutError] = useState<string | null>(null);\r\n-  const [checkoutSuccess, setCheckoutSuccess] = useState<string | null>(null);\r\n-\r\n-  const router = useRouter();\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCart = async () => {\r\n-      try {\r\n-        const res = await axiosWithCsrf.get(\"/api/cart/items/\");\r\n-        const mappedItems = res.data.map((item: any) => ({\r\n-          id: item.id,\r\n-          name: item.product_name,\r\n-          price: parseFloat(item.price),\r\n-          quantity: item.quantity,\r\n-          imageSrc: item.product_image,\r\n-        }));\r\n-        setCartItems(mappedItems);\r\n-      } catch (err: any) {\r\n-        setError(err.message || \"Failed to fetch cart\");\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchCart();\r\n-  }, []);\r\n-\r\n-  const updateQuantity = async (id: number, newQty: number) => {\r\n-    if (newQty < 1) return;\r\n-    try {\r\n-      await axiosWithCsrf.post(\"/api/cart/update/\", {\r\n-        cart_item_id: id,\r\n-        quantity: newQty,\r\n-      });\r\n-      setCartItems((prev) =>\r\n-        prev.map((item) =>\r\n-          item.id === id ? { ...item, quantity: newQty } : item\r\n-        )\r\n-      );\r\n-    } catch (err) {\r\n-      console.error(\"Failed to update quantity:\", err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleQuantityChange = (id: number, delta: number) => {\r\n-    const item = cartItems.find((item) => item.id === id);\r\n-    if (!item) return;\r\n-    const newQty = item.quantity + delta;\r\n-    if (newQty < 1) return;\r\n-    updateQuantity(id, newQty);\r\n-  };\r\n-\r\n-  const total = cartItems.reduce(\r\n-    (sum, item) => sum + item.price * item.quantity,\r\n-    0\r\n-  );\r\n-\r\n-  const handleCheckout = async () => {\r\n-    setCheckoutLoading(true);\r\n-    setCheckoutError(null);\r\n-    setCheckoutSuccess(null);\r\n-\r\n-    try {\r\n-      const res = await axiosWithCsrf.post(\"/api/checkout/\");\r\n-      setCheckoutSuccess(\r\n-        `Order placed successfully! Order ID: ${res.data.order.id}`\r\n-      );\r\n-      // Optionally clear the cart here or refetch cart items:\r\n-      setCartItems([]);\r\n-    } catch (err: any) {\r\n-      setCheckoutError(err.response?.data?.error || \"Checkout failed\");\r\n-    } finally {\r\n-      setCheckoutLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  if (loading) return <CheckoutSkeleton />;\r\n-  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n-\r\n-  return (\r\n-    <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n-      <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n-        Checkout\r\n-      </h1>\r\n-\r\n       <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n         <strong>Note:</strong> You are about to place your order. Please\r\n         double-check your items. Once placed, the order cannot be changed.\r\n       </div>\r\n"
                },
                {
                    "date": 1749074532654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n       <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n         Checkout\r\n       </h1>\r\n \r\n-      <BackButton />\r\n+      \r\n \r\n       <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n         <strong>Note:</strong> You are about to place your order. Please\r\n         double-check your items. Once placed, the order cannot be changed.\r\n"
                },
                {
                    "date": 1749074544658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,217 @@\n+\"use client\";\r\n+\r\n+import { useState, useEffect } from \"react\";\r\n+import CheckoutSkeleton from \"@/components/CheckoutSkeleton\";\r\n+import { axiosWithCsrf } from \"@/lib/axiosWithCsrf\";\r\n+import PopupMessage from \"@/components/PopupMessage\";\r\n+import { useRouter } from 'next/navigation';\r\n+import BackButton from '@/components/BackButton';\r\n+\r\n+interface CartItem {\r\n+  id: number;\r\n+  name: string;\r\n+  price: number;\r\n+  quantity: number;\r\n+  imageSrc: string;\r\n+}\r\n+\r\n+export default function CheckoutPage() {\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n+  const [error, setError] = useState<string | null>(null);\r\n+  const [checkoutLoading, setCheckoutLoading] = useState(false);\r\n+  const [checkoutError, setCheckoutError] = useState<string | null>(null);\r\n+  const [checkoutSuccess, setCheckoutSuccess] = useState<string | null>(null);\r\n+\r\n+  const router = useRouter();\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCart = async () => {\r\n+      try {\r\n+        const res = await axiosWithCsrf.get(\"/api/cart/items/\");\r\n+        const mappedItems = res.data.map((item: any) => ({\r\n+          id: item.id,\r\n+          name: item.product_name,\r\n+          price: parseFloat(item.price),\r\n+          quantity: item.quantity,\r\n+          imageSrc: item.product_image,\r\n+        }));\r\n+        setCartItems(mappedItems);\r\n+      } catch (err: any) {\r\n+        setError(err.message || \"Failed to fetch cart\");\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchCart();\r\n+  }, []);\r\n+\r\n+  const updateQuantity = async (id: number, newQty: number) => {\r\n+    if (newQty < 1) return;\r\n+    try {\r\n+      await axiosWithCsrf.post(\"/api/cart/update/\", {\r\n+        cart_item_id: id,\r\n+        quantity: newQty,\r\n+      });\r\n+      setCartItems((prev) =>\r\n+        prev.map((item) =>\r\n+          item.id === id ? { ...item, quantity: newQty } : item\r\n+        )\r\n+      );\r\n+    } catch (err) {\r\n+      console.error(\"Failed to update quantity:\", err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleQuantityChange = (id: number, delta: number) => {\r\n+    const item = cartItems.find((item) => item.id === id);\r\n+    if (!item) return;\r\n+    const newQty = item.quantity + delta;\r\n+    if (newQty < 1) return;\r\n+    updateQuantity(id, newQty);\r\n+  };\r\n+\r\n+  const total = cartItems.reduce(\r\n+    (sum, item) => sum + item.price * item.quantity,\r\n+    0\r\n+  );\r\n+\r\n+  const handleCheckout = async () => {\r\n+    setCheckoutLoading(true);\r\n+    setCheckoutError(null);\r\n+    setCheckoutSuccess(null);\r\n+\r\n+    try {\r\n+      const res = await axiosWithCsrf.post(\"/api/checkout/\");\r\n+      setCheckoutSuccess(\r\n+        `Order placed successfully! Order ID: ${res.data.order.id}`\r\n+      );\r\n+      // Optionally clear the cart here or refetch cart items:\r\n+      setCartItems([]);\r\n+    } catch (err: any) {\r\n+      setCheckoutError(err.response?.data?.error || \"Checkout failed\");\r\n+    } finally {\r\n+      setCheckoutLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  if (loading) return <CheckoutSkeleton />;\r\n+  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n+\r\n+  return (\r\n+    <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n+      <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n+        Checkout <BackButton />\r\n+      </h1>\r\n+\r\n+\r\n+      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n+        <strong>Note:</strong> You are about to place your order. Please\r\n+        double-check your items. Once placed, the order cannot be changed.\r\n+      </div>\r\n+\r\n+      {cartItems.length === 0 ? (\r\n+        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n+      ) : (\r\n+        <>\r\n+          <div className=\"space-y-4\">\r\n+            {cartItems.map((item) => (\r\n+              <div\r\n+                key={item.id}\r\n+                className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n+              >\r\n+                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n+                  <img\r\n+                    src={item.imageSrc}\r\n+                    alt={item.name}\r\n+                    className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n+                  />\r\n+                  <div>\r\n+                    <h2 className=\"text-lg font-semibold text-gray-800\">\r\n+                      {item.name}\r\n+                    </h2>\r\n+                    <p className=\"text-sm text-gray-500\">\r\n+                      Unit Price: Rs {item.price.toFixed(2)}\r\n+                    </p>\r\n+                    <p className=\"text-sm text-gray-600 mt-1\">\r\n+                      Subtotal:{\" \"}\r\n+                      <span className=\"font-semibold text-green-700\">\r\n+                        Rs {(item.price * item.quantity).toFixed(2)}\r\n+                      </span>\r\n+                    </p>\r\n+                  </div>\r\n+                </div>\r\n+\r\n+                <div className=\"flex items-center space-x-3\">\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, -1)}\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n+                  >\r\n+                    −\r\n+                  </button>\r\n+                  <span className=\"text-base font-medium\">{item.quantity}</span>\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, 1)}\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n+                  >\r\n+                    +\r\n+                  </button>\r\n+                </div>\r\n+              </div>\r\n+            ))}\r\n+          </div>\r\n+\r\n+          {/* Total section only shows grand total */}\r\n+          <div className=\"mt-10 w-full bg-green-50 border border-green-200 rounded-xl p-6 shadow-md text-center sm:text-left\">\r\n+            <h3 className=\"text-lg font-semibold text-green-800 mb-2\">\r\n+              Total Amount\r\n+            </h3>\r\n+            <p className=\"text-3xl font-extrabold text-green-700 mb-1\">\r\n+              Rs {total.toFixed(2)}\r\n+            </p>\r\n+            <p className=\"text-sm text-green-600\">\r\n+              Includes all item subtotals\r\n+            </p>\r\n+          </div>\r\n+\r\n+          <div className=\"mt-6\">\r\n+            <button\r\n+              onClick={handleCheckout}\r\n+              disabled={checkoutLoading}\r\n+              className={`w-full text-white px-6 py-3 rounded-xl text-lg transition shadow ${\r\n+                checkoutLoading\r\n+                  ? \"bg-green-400 cursor-not-allowed\"\r\n+                  : \"bg-green-600 hover:bg-green-700\"\r\n+              }`}\r\n+            >\r\n+              {checkoutLoading ? \"Processing...\" : \"Proceed to Payment\"}\r\n+            </button>\r\n+\r\n+            {checkoutError && (\r\n+              <p className=\"text-red-600 mt-2\">{checkoutError}</p>\r\n+            )}\r\n+            {checkoutSuccess && (\r\n+              <p className=\"text-green-600 mt-2\">{checkoutSuccess}</p>\r\n+            )}\r\n+          </div>\r\n+        </>\r\n+      )}\r\n+      {checkoutSuccess && (\r\n+        <PopupMessage\r\n+          type=\"success\"\r\n+          message={checkoutSuccess}\r\n+          onClose={() => setCheckoutSuccess(null)}\r\n+        />\r\n+      )}\r\n+\r\n+      {checkoutError && (\r\n+        <PopupMessage\r\n+          type=\"error\"\r\n+          message={checkoutError}\r\n+          onClose={() => setCheckoutError(null)}\r\n+        />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1749074563589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,216 @@\n+\"use client\";\r\n+\r\n+import { useState, useEffect } from \"react\";\r\n+import CheckoutSkeleton from \"@/components/CheckoutSkeleton\";\r\n+import { axiosWithCsrf } from \"@/lib/axiosWithCsrf\";\r\n+import PopupMessage from \"@/components/PopupMessage\";\r\n+import { useRouter } from 'next/navigation';\r\n+import BackButton from '@/components/BackButton';\r\n+\r\n+interface CartItem {\r\n+  id: number;\r\n+  name: string;\r\n+  price: number;\r\n+  quantity: number;\r\n+  imageSrc: string;\r\n+}\r\n+\r\n+export default function CheckoutPage() {\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n+  const [error, setError] = useState<string | null>(null);\r\n+  const [checkoutLoading, setCheckoutLoading] = useState(false);\r\n+  const [checkoutError, setCheckoutError] = useState<string | null>(null);\r\n+  const [checkoutSuccess, setCheckoutSuccess] = useState<string | null>(null);\r\n+\r\n+  const router = useRouter();\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCart = async () => {\r\n+      try {\r\n+        const res = await axiosWithCsrf.get(\"/api/cart/items/\");\r\n+        const mappedItems = res.data.map((item: any) => ({\r\n+          id: item.id,\r\n+          name: item.product_name,\r\n+          price: parseFloat(item.price),\r\n+          quantity: item.quantity,\r\n+          imageSrc: item.product_image,\r\n+        }));\r\n+        setCartItems(mappedItems);\r\n+      } catch (err: any) {\r\n+        setError(err.message || \"Failed to fetch cart\");\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchCart();\r\n+  }, []);\r\n+\r\n+  const updateQuantity = async (id: number, newQty: number) => {\r\n+    if (newQty < 1) return;\r\n+    try {\r\n+      await axiosWithCsrf.post(\"/api/cart/update/\", {\r\n+        cart_item_id: id,\r\n+        quantity: newQty,\r\n+      });\r\n+      setCartItems((prev) =>\r\n+        prev.map((item) =>\r\n+          item.id === id ? { ...item, quantity: newQty } : item\r\n+        )\r\n+      );\r\n+    } catch (err) {\r\n+      console.error(\"Failed to update quantity:\", err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleQuantityChange = (id: number, delta: number) => {\r\n+    const item = cartItems.find((item) => item.id === id);\r\n+    if (!item) return;\r\n+    const newQty = item.quantity + delta;\r\n+    if (newQty < 1) return;\r\n+    updateQuantity(id, newQty);\r\n+  };\r\n+\r\n+  const total = cartItems.reduce(\r\n+    (sum, item) => sum + item.price * item.quantity,\r\n+    0\r\n+  );\r\n+\r\n+  const handleCheckout = async () => {\r\n+    setCheckoutLoading(true);\r\n+    setCheckoutError(null);\r\n+    setCheckoutSuccess(null);\r\n+\r\n+    try {\r\n+      const res = await axiosWithCsrf.post(\"/api/checkout/\");\r\n+      setCheckoutSuccess(\r\n+        `Order placed successfully! Order ID: ${res.data.order.id}`\r\n+      );\r\n+      // Optionally clear the cart here or refetch cart items:\r\n+      setCartItems([]);\r\n+    } catch (err: any) {\r\n+      setCheckoutError(err.response?.data?.error || \"Checkout failed\");\r\n+    } finally {\r\n+      setCheckoutLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  if (loading) return <CheckoutSkeleton />;\r\n+  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n+\r\n+  return (\r\n+    <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n+      <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n+        Checkout\r\n+      </h1>\r\n+\r\n+      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n+        <strong>Note:</strong> You are about to place your order. Please\r\n+        double-check your items. Once placed, the order cannot be changed.\r\n+      </div>\r\n+\r\n+      {cartItems.length === 0 ? (\r\n+        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n+      ) : (\r\n+        <>\r\n+          <div className=\"space-y-4\">\r\n+            {cartItems.map((item) => (\r\n+              <div\r\n+                key={item.id}\r\n+                className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n+              >\r\n+                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n+                  <img\r\n+                    src={item.imageSrc}\r\n+                    alt={item.name}\r\n+                    className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n+                  />\r\n+                  <div>\r\n+                    <h2 className=\"text-lg font-semibold text-gray-800\">\r\n+                      {item.name}\r\n+                    </h2>\r\n+                    <p className=\"text-sm text-gray-500\">\r\n+                      Unit Price: Rs {item.price.toFixed(2)}\r\n+                    </p>\r\n+                    <p className=\"text-sm text-gray-600 mt-1\">\r\n+                      Subtotal:{\" \"}\r\n+                      <span className=\"font-semibold text-green-700\">\r\n+                        Rs {(item.price * item.quantity).toFixed(2)}\r\n+                      </span>\r\n+                    </p>\r\n+                  </div>\r\n+                </div>\r\n+\r\n+                <div className=\"flex items-center space-x-3\">\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, -1)}\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n+                  >\r\n+                    −\r\n+                  </button>\r\n+                  <span className=\"text-base font-medium\">{item.quantity}</span>\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, 1)}\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n+                  >\r\n+                    +\r\n+                  </button>\r\n+                </div>\r\n+              </div>\r\n+            ))}\r\n+          </div>\r\n+\r\n+          {/* Total section only shows grand total */}\r\n+          <div className=\"mt-10 w-full bg-green-50 border border-green-200 rounded-xl p-6 shadow-md text-center sm:text-left\">\r\n+            <h3 className=\"text-lg font-semibold text-green-800 mb-2\">\r\n+              Total Amount\r\n+            </h3>\r\n+            <p className=\"text-3xl font-extrabold text-green-700 mb-1\">\r\n+              Rs {total.toFixed(2)}\r\n+            </p>\r\n+            <p className=\"text-sm text-green-600\">\r\n+              Includes all item subtotals\r\n+            </p>\r\n+          </div>\r\n+\r\n+          <div className=\"mt-6\">\r\n+            <button\r\n+              onClick={handleCheckout}\r\n+              disabled={checkoutLoading}\r\n+              className={`w-full text-white px-6 py-3 rounded-xl text-lg transition shadow ${\r\n+                checkoutLoading\r\n+                  ? \"bg-green-400 cursor-not-allowed\"\r\n+                  : \"bg-green-600 hover:bg-green-700\"\r\n+              }`}\r\n+            >\r\n+              {checkoutLoading ? \"Processing...\" : \"Proceed to Payment\"}\r\n+            </button>\r\n+\r\n+            {checkoutError && (\r\n+              <p className=\"text-red-600 mt-2\">{checkoutError}</p>\r\n+            )}\r\n+            {checkoutSuccess && (\r\n+              <p className=\"text-green-600 mt-2\">{checkoutSuccess}</p>\r\n+            )}\r\n+          </div>\r\n+        </>\r\n+      )}\r\n+      {checkoutSuccess && (\r\n+        <PopupMessage\r\n+          type=\"success\"\r\n+          message={checkoutSuccess}\r\n+          onClose={() => setCheckoutSuccess(null)}\r\n+        />\r\n+      )}\r\n+\r\n+      {checkoutError && (\r\n+        <PopupMessage\r\n+          type=\"error\"\r\n+          message={checkoutError}\r\n+          onClose={() => setCheckoutError(null)}\r\n+        />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1749074573305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,8 +103,9 @@\n     <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n       <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n         Checkout\r\n       </h1>\r\n+      <BackButton />\r\n \r\n       <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n         <strong>Note:</strong> You are about to place your order. Please\r\n         double-check your items. Once placed, the order cannot be changed.\r\n@@ -213,439 +214,4 @@\n       )}\r\n     </div>\r\n   );\r\n }\r\n-\"use client\";\r\n-\r\n-import { useState, useEffect } from \"react\";\r\n-import CheckoutSkeleton from \"@/components/CheckoutSkeleton\";\r\n-import { axiosWithCsrf } from \"@/lib/axiosWithCsrf\";\r\n-import PopupMessage from \"@/components/PopupMessage\";\r\n-import { useRouter } from 'next/navigation';\r\n-import BackButton from '@/components/BackButton';\r\n-\r\n-interface CartItem {\r\n-  id: number;\r\n-  name: string;\r\n-  price: number;\r\n-  quantity: number;\r\n-  imageSrc: string;\r\n-}\r\n-\r\n-export default function CheckoutPage() {\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n-  const [error, setError] = useState<string | null>(null);\r\n-  const [checkoutLoading, setCheckoutLoading] = useState(false);\r\n-  const [checkoutError, setCheckoutError] = useState<string | null>(null);\r\n-  const [checkoutSuccess, setCheckoutSuccess] = useState<string | null>(null);\r\n-\r\n-  const router = useRouter();\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCart = async () => {\r\n-      try {\r\n-        const res = await axiosWithCsrf.get(\"/api/cart/items/\");\r\n-        const mappedItems = res.data.map((item: any) => ({\r\n-          id: item.id,\r\n-          name: item.product_name,\r\n-          price: parseFloat(item.price),\r\n-          quantity: item.quantity,\r\n-          imageSrc: item.product_image,\r\n-        }));\r\n-        setCartItems(mappedItems);\r\n-      } catch (err: any) {\r\n-        setError(err.message || \"Failed to fetch cart\");\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchCart();\r\n-  }, []);\r\n-\r\n-  const updateQuantity = async (id: number, newQty: number) => {\r\n-    if (newQty < 1) return;\r\n-    try {\r\n-      await axiosWithCsrf.post(\"/api/cart/update/\", {\r\n-        cart_item_id: id,\r\n-        quantity: newQty,\r\n-      });\r\n-      setCartItems((prev) =>\r\n-        prev.map((item) =>\r\n-          item.id === id ? { ...item, quantity: newQty } : item\r\n-        )\r\n-      );\r\n-    } catch (err) {\r\n-      console.error(\"Failed to update quantity:\", err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleQuantityChange = (id: number, delta: number) => {\r\n-    const item = cartItems.find((item) => item.id === id);\r\n-    if (!item) return;\r\n-    const newQty = item.quantity + delta;\r\n-    if (newQty < 1) return;\r\n-    updateQuantity(id, newQty);\r\n-  };\r\n-\r\n-  const total = cartItems.reduce(\r\n-    (sum, item) => sum + item.price * item.quantity,\r\n-    0\r\n-  );\r\n-\r\n-  const handleCheckout = async () => {\r\n-    setCheckoutLoading(true);\r\n-    setCheckoutError(null);\r\n-    setCheckoutSuccess(null);\r\n-\r\n-    try {\r\n-      const res = await axiosWithCsrf.post(\"/api/checkout/\");\r\n-      setCheckoutSuccess(\r\n-        `Order placed successfully! Order ID: ${res.data.order.id}`\r\n-      );\r\n-      // Optionally clear the cart here or refetch cart items:\r\n-      setCartItems([]);\r\n-    } catch (err: any) {\r\n-      setCheckoutError(err.response?.data?.error || \"Checkout failed\");\r\n-    } finally {\r\n-      setCheckoutLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  if (loading) return <CheckoutSkeleton />;\r\n-  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n-\r\n-  return (\r\n-    <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n-      <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n-        Checkout <BackButton />\r\n-      </h1>\r\n-\r\n-\r\n-      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n-        <strong>Note:</strong> You are about to place your order. Please\r\n-        double-check your items. Once placed, the order cannot be changed.\r\n-      </div>\r\n-\r\n-      {cartItems.length === 0 ? (\r\n-        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n-      ) : (\r\n-        <>\r\n-          <div className=\"space-y-4\">\r\n-            {cartItems.map((item) => (\r\n-              <div\r\n-                key={item.id}\r\n-                className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n-              >\r\n-                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n-                  <img\r\n-                    src={item.imageSrc}\r\n-                    alt={item.name}\r\n-                    className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n-                  />\r\n-                  <div>\r\n-                    <h2 className=\"text-lg font-semibold text-gray-800\">\r\n-                      {item.name}\r\n-                    </h2>\r\n-                    <p className=\"text-sm text-gray-500\">\r\n-                      Unit Price: Rs {item.price.toFixed(2)}\r\n-                    </p>\r\n-                    <p className=\"text-sm text-gray-600 mt-1\">\r\n-                      Subtotal:{\" \"}\r\n-                      <span className=\"font-semibold text-green-700\">\r\n-                        Rs {(item.price * item.quantity).toFixed(2)}\r\n-                      </span>\r\n-                    </p>\r\n-                  </div>\r\n-                </div>\r\n-\r\n-                <div className=\"flex items-center space-x-3\">\r\n-                  <button\r\n-                    onClick={() => handleQuantityChange(item.id, -1)}\r\n-                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n-                  >\r\n-                    −\r\n-                  </button>\r\n-                  <span className=\"text-base font-medium\">{item.quantity}</span>\r\n-                  <button\r\n-                    onClick={() => handleQuantityChange(item.id, 1)}\r\n-                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n-                  >\r\n-                    +\r\n-                  </button>\r\n-                </div>\r\n-              </div>\r\n-            ))}\r\n-          </div>\r\n-\r\n-          {/* Total section only shows grand total */}\r\n-          <div className=\"mt-10 w-full bg-green-50 border border-green-200 rounded-xl p-6 shadow-md text-center sm:text-left\">\r\n-            <h3 className=\"text-lg font-semibold text-green-800 mb-2\">\r\n-              Total Amount\r\n-            </h3>\r\n-            <p className=\"text-3xl font-extrabold text-green-700 mb-1\">\r\n-              Rs {total.toFixed(2)}\r\n-            </p>\r\n-            <p className=\"text-sm text-green-600\">\r\n-              Includes all item subtotals\r\n-            </p>\r\n-          </div>\r\n-\r\n-          <div className=\"mt-6\">\r\n-            <button\r\n-              onClick={handleCheckout}\r\n-              disabled={checkoutLoading}\r\n-              className={`w-full text-white px-6 py-3 rounded-xl text-lg transition shadow ${\r\n-                checkoutLoading\r\n-                  ? \"bg-green-400 cursor-not-allowed\"\r\n-                  : \"bg-green-600 hover:bg-green-700\"\r\n-              }`}\r\n-            >\r\n-              {checkoutLoading ? \"Processing...\" : \"Proceed to Payment\"}\r\n-            </button>\r\n-\r\n-            {checkoutError && (\r\n-              <p className=\"text-red-600 mt-2\">{checkoutError}</p>\r\n-            )}\r\n-            {checkoutSuccess && (\r\n-              <p className=\"text-green-600 mt-2\">{checkoutSuccess}</p>\r\n-            )}\r\n-          </div>\r\n-        </>\r\n-      )}\r\n-      {checkoutSuccess && (\r\n-        <PopupMessage\r\n-          type=\"success\"\r\n-          message={checkoutSuccess}\r\n-          onClose={() => setCheckoutSuccess(null)}\r\n-        />\r\n-      )}\r\n-\r\n-      {checkoutError && (\r\n-        <PopupMessage\r\n-          type=\"error\"\r\n-          message={checkoutError}\r\n-          onClose={() => setCheckoutError(null)}\r\n-        />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n-\"use client\";\r\n-\r\n-import { useState, useEffect } from \"react\";\r\n-import CheckoutSkeleton from \"@/components/CheckoutSkeleton\";\r\n-import { axiosWithCsrf } from \"@/lib/axiosWithCsrf\";\r\n-import PopupMessage from \"@/components/PopupMessage\";\r\n-import { useRouter } from 'next/navigation';\r\n-import BackButton from '@/components/BackButton';\r\n-\r\n-interface CartItem {\r\n-  id: number;\r\n-  name: string;\r\n-  price: number;\r\n-  quantity: number;\r\n-  imageSrc: string;\r\n-}\r\n-\r\n-export default function CheckoutPage() {\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n-  const [error, setError] = useState<string | null>(null);\r\n-  const [checkoutLoading, setCheckoutLoading] = useState(false);\r\n-  const [checkoutError, setCheckoutError] = useState<string | null>(null);\r\n-  const [checkoutSuccess, setCheckoutSuccess] = useState<string | null>(null);\r\n-\r\n-  const router = useRouter();\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCart = async () => {\r\n-      try {\r\n-        const res = await axiosWithCsrf.get(\"/api/cart/items/\");\r\n-        const mappedItems = res.data.map((item: any) => ({\r\n-          id: item.id,\r\n-          name: item.product_name,\r\n-          price: parseFloat(item.price),\r\n-          quantity: item.quantity,\r\n-          imageSrc: item.product_image,\r\n-        }));\r\n-        setCartItems(mappedItems);\r\n-      } catch (err: any) {\r\n-        setError(err.message || \"Failed to fetch cart\");\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchCart();\r\n-  }, []);\r\n-\r\n-  const updateQuantity = async (id: number, newQty: number) => {\r\n-    if (newQty < 1) return;\r\n-    try {\r\n-      await axiosWithCsrf.post(\"/api/cart/update/\", {\r\n-        cart_item_id: id,\r\n-        quantity: newQty,\r\n-      });\r\n-      setCartItems((prev) =>\r\n-        prev.map((item) =>\r\n-          item.id === id ? { ...item, quantity: newQty } : item\r\n-        )\r\n-      );\r\n-    } catch (err) {\r\n-      console.error(\"Failed to update quantity:\", err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleQuantityChange = (id: number, delta: number) => {\r\n-    const item = cartItems.find((item) => item.id === id);\r\n-    if (!item) return;\r\n-    const newQty = item.quantity + delta;\r\n-    if (newQty < 1) return;\r\n-    updateQuantity(id, newQty);\r\n-  };\r\n-\r\n-  const total = cartItems.reduce(\r\n-    (sum, item) => sum + item.price * item.quantity,\r\n-    0\r\n-  );\r\n-\r\n-  const handleCheckout = async () => {\r\n-    setCheckoutLoading(true);\r\n-    setCheckoutError(null);\r\n-    setCheckoutSuccess(null);\r\n-\r\n-    try {\r\n-      const res = await axiosWithCsrf.post(\"/api/checkout/\");\r\n-      setCheckoutSuccess(\r\n-        `Order placed successfully! Order ID: ${res.data.order.id}`\r\n-      );\r\n-      // Optionally clear the cart here or refetch cart items:\r\n-      setCartItems([]);\r\n-    } catch (err: any) {\r\n-      setCheckoutError(err.response?.data?.error || \"Checkout failed\");\r\n-    } finally {\r\n-      setCheckoutLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  if (loading) return <CheckoutSkeleton />;\r\n-  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n-\r\n-  return (\r\n-    <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n-      <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n-        Checkout\r\n-      </h1>\r\n-\r\n-      \r\n-\r\n-      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n-        <strong>Note:</strong> You are about to place your order. Please\r\n-        double-check your items. Once placed, the order cannot be changed.\r\n-      </div>\r\n-\r\n-      {cartItems.length === 0 ? (\r\n-        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n-      ) : (\r\n-        <>\r\n-          <div className=\"space-y-4\">\r\n-            {cartItems.map((item) => (\r\n-              <div\r\n-                key={item.id}\r\n-                className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n-              >\r\n-                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n-                  <img\r\n-                    src={item.imageSrc}\r\n-                    alt={item.name}\r\n-                    className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n-                  />\r\n-                  <div>\r\n-                    <h2 className=\"text-lg font-semibold text-gray-800\">\r\n-                      {item.name}\r\n-                    </h2>\r\n-                    <p className=\"text-sm text-gray-500\">\r\n-                      Unit Price: Rs {item.price.toFixed(2)}\r\n-                    </p>\r\n-                    <p className=\"text-sm text-gray-600 mt-1\">\r\n-                      Subtotal:{\" \"}\r\n-                      <span className=\"font-semibold text-green-700\">\r\n-                        Rs {(item.price * item.quantity).toFixed(2)}\r\n-                      </span>\r\n-                    </p>\r\n-                  </div>\r\n-                </div>\r\n-\r\n-                <div className=\"flex items-center space-x-3\">\r\n-                  <button\r\n-                    onClick={() => handleQuantityChange(item.id, -1)}\r\n-                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n-                  >\r\n-                    −\r\n-                  </button>\r\n-                  <span className=\"text-base font-medium\">{item.quantity}</span>\r\n-                  <button\r\n-                    onClick={() => handleQuantityChange(item.id, 1)}\r\n-                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n-                  >\r\n-                    +\r\n-                  </button>\r\n-                </div>\r\n-              </div>\r\n-            ))}\r\n-          </div>\r\n-\r\n-          {/* Total section only shows grand total */}\r\n-          <div className=\"mt-10 w-full bg-green-50 border border-green-200 rounded-xl p-6 shadow-md text-center sm:text-left\">\r\n-            <h3 className=\"text-lg font-semibold text-green-800 mb-2\">\r\n-              Total Amount\r\n-            </h3>\r\n-            <p className=\"text-3xl font-extrabold text-green-700 mb-1\">\r\n-              Rs {total.toFixed(2)}\r\n-            </p>\r\n-            <p className=\"text-sm text-green-600\">\r\n-              Includes all item subtotals\r\n-            </p>\r\n-          </div>\r\n-\r\n-          <div className=\"mt-6\">\r\n-            <button\r\n-              onClick={handleCheckout}\r\n-              disabled={checkoutLoading}\r\n-              className={`w-full text-white px-6 py-3 rounded-xl text-lg transition shadow ${\r\n-                checkoutLoading\r\n-                  ? \"bg-green-400 cursor-not-allowed\"\r\n-                  : \"bg-green-600 hover:bg-green-700\"\r\n-              }`}\r\n-            >\r\n-              {checkoutLoading ? \"Processing...\" : \"Proceed to Payment\"}\r\n-            </button>\r\n-\r\n-            {checkoutError && (\r\n-              <p className=\"text-red-600 mt-2\">{checkoutError}</p>\r\n-            )}\r\n-            {checkoutSuccess && (\r\n-              <p className=\"text-green-600 mt-2\">{checkoutSuccess}</p>\r\n-            )}\r\n-          </div>\r\n-        </>\r\n-      )}\r\n-      {checkoutSuccess && (\r\n-        <PopupMessage\r\n-          type=\"success\"\r\n-          message={checkoutSuccess}\r\n-          onClose={() => setCheckoutSuccess(null)}\r\n-        />\r\n-      )}\r\n-\r\n-      {checkoutError && (\r\n-        <PopupMessage\r\n-          type=\"error\"\r\n-          message={checkoutError}\r\n-          onClose={() => setCheckoutError(null)}\r\n-        />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1749074587636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,8 +103,9 @@\n     <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n       <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n         Checkout\r\n       </h1>\r\n+      \r\n       <BackButton />\r\n \r\n       <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n         <strong>Note:</strong> You are about to place your order. Please\r\n"
                },
                {
                    "date": 1749074680625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,12 +100,12 @@\n   if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n \r\n   return (\r\n     <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n-      <h1 className=\"text-3xl font-bold text-blue-700 text-center mb-4\">\r\n+      <h1 className=\"text-3xl font-bold text-blue-700 text-left mb-4\">\r\n         Checkout\r\n       </h1>\r\n-      \r\n+\r\n       <BackButton />\r\n \r\n       <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n         <strong>Note:</strong> You are about to place your order. Please\r\n"
                },
                {
                    "date": 1749074713875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n   if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n \r\n   return (\r\n     <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n-      <h1 className=\"text-3xl font-bold text-blue-700 text-left mb-4\">\r\n+      <h1 className=\"text-3xl font-bold text-blue-700 text-left mb-2\">\r\n         Checkout\r\n       </h1>\r\n \r\n       <BackButton />\r\n"
                },
                {
                    "date": 1749103088606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+\"use client\";\r\n+\r\n+import { useState, useEffect } from \"react\";\r\n+import CheckoutSkeleton from \"@/components/CheckoutSkeleton\";\r\n+import { axiosWithCsrf } from \"@/lib/axiosWithCsrf\";\r\n+import PopupMessage from \"@/components/PopupMessage\";\r\n+import { useRouter } from 'next/navigation';\r\n+import BackButton from '@/components/BackButton';\r\n+\r\n+interface CartItem {\r\n+  id: number;\r\n+  name: string;\r\n+  price: number;\r\n+  quantity: number;\r\n+  imageSrc: string;\r\n+}\r\n+\r\n+export default function CheckoutPage() {\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n+  const [error, setError] = useState<string | null>(null);\r\n+  const [checkoutLoading, setCheckoutLoading] = useState(false);\r\n+  const [checkoutError, setCheckoutError] = useState<string | null>(null);\r\n+  const [checkoutSuccess, setCheckoutSuccess] = useState<string | null>(null);\r\n+\r\n+  const router = useRouter();\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCart = async () => {\r\n+      try {\r\n+        const res = await axiosWithCsrf.get(\"/api/cart/items/\");\r\n+        const mappedItems = res.data.map((item: any) => ({\r\n+          id: item.id,\r\n+          name: item.product_name,\r\n+          price: parseFloat(item.price),\r\n+          quantity: item.quantity,\r\n+          imageSrc: item.product_image,\r\n+        }));\r\n+        setCartItems(mappedItems);\r\n+      } catch (err: any) {\r\n+        setError(err.message || \"Failed to fetch cart\");\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchCart();\r\n+  }, []);\r\n+\r\n+  const updateQuantity = async (id: number, newQty: number) => {\r\n+    if (newQty < 1) return;\r\n+    try {\r\n+      await axiosWithCsrf.post(\"/api/cart/update/\", {\r\n+        cart_item_id: id,\r\n+        quantity: newQty,\r\n+      });\r\n+      setCartItems((prev) =>\r\n+        prev.map((item) =>\r\n+          item.id === id ? { ...item, quantity: newQty } : item\r\n+        )\r\n+      );\r\n+    } catch (err) {\r\n+      console.error(\"Failed to update quantity:\", err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleQuantityChange = (id: number, delta: number) => {\r\n+    const item = cartItems.find((item) => item.id === id);\r\n+    if (!item) return;\r\n+    const newQty = item.quantity + delta;\r\n+    if (newQty < 1) return;\r\n+    updateQuantity(id, newQty);\r\n+  };\r\n+\r\n+  const total = cartItems.reduce(\r\n+    (sum, item) => sum + item.price * item.quantity,\r\n+    0\r\n+  );\r\n+\r\n+  const handleCheckout = async () => {\r\n+    setCheckoutLoading(true);\r\n+    setCheckoutError(null);\r\n+    setCheckoutSuccess(null);\r\n+\r\n+    try {\r\n+      const res = await axiosWithCsrf.post(\"/api/checkout/\");\r\n+      setCheckoutSuccess(\r\n+        `Order placed successfully! Order ID: ${res.data.order.id}`\r\n+      );\r\n+      // Optionally clear the cart here or refetch cart items:\r\n+      setCartItems([]);\r\n+    } catch (err: any) {\r\n+      setCheckoutError(err.response?.data?.error || \"Checkout failed\");\r\n+    } finally {\r\n+      setCheckoutLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  if (loading) return <CheckoutSkeleton />;\r\n+  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n+\r\n+  return (\r\n+    <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n+      <h1 className=\"text-3xl font-bold text-blue-700 text-left mb-1\">\r\n+        Checkout\r\n+      </h1>\r\n+\r\n+      <BackButton />\r\n+\r\n+      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n+        <strong>Note:</strong> You are about to place your order. Please\r\n+        double-check your items. Once placed, the order cannot be changed.\r\n+      </div>\r\n+\r\n+      {cartItems.length === 0 ? (\r\n+        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n+      ) : (\r\n+        <>\r\n+          <div className=\"space-y-4\">\r\n+            {cartItems.map((item) => (\r\n+              <div\r\n+                key={item.id}\r\n+                className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n+              >\r\n+                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n+                  <img\r\n+                    src={item.imageSrc}\r\n+                    alt={item.name}\r\n+                    className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n+                  />\r\n+                  <div>\r\n+                    <h2 className=\"text-lg font-semibold text-gray-800\">\r\n+                      {item.name}\r\n+                    </h2>\r\n+                    <p className=\"text-sm text-gray-500\">\r\n+                      Unit Price: Rs {item.price.toFixed(2)}\r\n+                    </p>\r\n+                    <p className=\"text-sm text-gray-600 mt-1\">\r\n+                      Subtotal:{\" \"}\r\n+                      <span className=\"font-semibold text-green-700\">\r\n+                        Rs {(item.price * item.quantity).toFixed(2)}\r\n+                      </span>\r\n+                    </p>\r\n+                  </div>\r\n+                </div>\r\n+\r\n+                <div className=\"flex items-center space-x-3\">\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, -1)}\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n+                  >\r\n+                    −\r\n+                  </button>\r\n+                  <span className=\"text-base font-medium\">{item.quantity}</span>\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, 1)}\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n+                  >\r\n+                    +\r\n+                  </button>\r\n+                </div>\r\n+              </div>\r\n+            ))}\r\n+          </div>\r\n+\r\n+          {/* Total section only shows grand total */}\r\n+          <div className=\"mt-10 w-full bg-green-50 border border-green-200 rounded-xl p-6 shadow-md text-center sm:text-left\">\r\n+            <h3 className=\"text-lg font-semibold text-green-800 mb-2\">\r\n+              Total Amount\r\n+            </h3>\r\n+            <p className=\"text-3xl font-extrabold text-green-700 mb-1\">\r\n+              Rs {total.toFixed(2)}\r\n+            </p>\r\n+            <p className=\"text-sm text-green-600\">\r\n+              Includes all item subtotals\r\n+            </p>\r\n+          </div>\r\n+\r\n+          <div className=\"mt-6\">\r\n+            <button\r\n+              onClick={handleCheckout}\r\n+              disabled={checkoutLoading}\r\n+              className={`w-full text-white px-6 py-3 rounded-xl text-lg transition shadow ${\r\n+                checkoutLoading\r\n+                  ? \"bg-green-400 cursor-not-allowed\"\r\n+                  : \"bg-green-600 hover:bg-green-700\"\r\n+              }`}\r\n+            >\r\n+              {checkoutLoading ? \"Processing...\" : \"Proceed to Payment\"}\r\n+            </button>\r\n+\r\n+            {checkoutError && (\r\n+              <p className=\"text-red-600 mt-2\">{checkoutError}</p>\r\n+            )}\r\n+            {checkoutSuccess && (\r\n+              <p className=\"text-green-600 mt-2\">{checkoutSuccess}</p>\r\n+            )}\r\n+          </div>\r\n+        </>\r\n+      )}\r\n+      {checkoutSuccess && (\r\n+        <PopupMessage\r\n+          type=\"success\"\r\n+          message={checkoutSuccess}\r\n+          onClose={() => setCheckoutSuccess(null)}\r\n+        />\r\n+      )}\r\n+\r\n+      {checkoutError && (\r\n+        <PopupMessage\r\n+          type=\"error\"\r\n+          message={checkoutError}\r\n+          onClose={() => setCheckoutError(null)}\r\n+        />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1749115554335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n           imageSrc: item.product_image,\r\n         }));\r\n         setCartItems(mappedItems);\r\n       } catch (err: any) {\r\n-        setError(err.message || \"Failed to fetch cart\");\r\n+        // setError(err.message || \"Failed to fetch cart\");\r\n       } finally {\r\n         setLoading(false);\r\n       }\r\n     };\r\n@@ -215,222 +215,4 @@\n       )}\r\n     </div>\r\n   );\r\n }\r\n-\"use client\";\r\n-\r\n-import { useState, useEffect } from \"react\";\r\n-import CheckoutSkeleton from \"@/components/CheckoutSkeleton\";\r\n-import { axiosWithCsrf } from \"@/lib/axiosWithCsrf\";\r\n-import PopupMessage from \"@/components/PopupMessage\";\r\n-import { useRouter } from 'next/navigation';\r\n-import BackButton from '@/components/BackButton';\r\n-\r\n-interface CartItem {\r\n-  id: number;\r\n-  name: string;\r\n-  price: number;\r\n-  quantity: number;\r\n-  imageSrc: string;\r\n-}\r\n-\r\n-export default function CheckoutPage() {\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n-  const [error, setError] = useState<string | null>(null);\r\n-  const [checkoutLoading, setCheckoutLoading] = useState(false);\r\n-  const [checkoutError, setCheckoutError] = useState<string | null>(null);\r\n-  const [checkoutSuccess, setCheckoutSuccess] = useState<string | null>(null);\r\n-\r\n-  const router = useRouter();\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCart = async () => {\r\n-      try {\r\n-        const res = await axiosWithCsrf.get(\"/api/cart/items/\");\r\n-        const mappedItems = res.data.map((item: any) => ({\r\n-          id: item.id,\r\n-          name: item.product_name,\r\n-          price: parseFloat(item.price),\r\n-          quantity: item.quantity,\r\n-          imageSrc: item.product_image,\r\n-        }));\r\n-        setCartItems(mappedItems);\r\n-      } catch (err: any) {\r\n-        setError(err.message || \"Failed to fetch cart\");\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchCart();\r\n-  }, []);\r\n-\r\n-  const updateQuantity = async (id: number, newQty: number) => {\r\n-    if (newQty < 1) return;\r\n-    try {\r\n-      await axiosWithCsrf.post(\"/api/cart/update/\", {\r\n-        cart_item_id: id,\r\n-        quantity: newQty,\r\n-      });\r\n-      setCartItems((prev) =>\r\n-        prev.map((item) =>\r\n-          item.id === id ? { ...item, quantity: newQty } : item\r\n-        )\r\n-      );\r\n-    } catch (err) {\r\n-      console.error(\"Failed to update quantity:\", err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleQuantityChange = (id: number, delta: number) => {\r\n-    const item = cartItems.find((item) => item.id === id);\r\n-    if (!item) return;\r\n-    const newQty = item.quantity + delta;\r\n-    if (newQty < 1) return;\r\n-    updateQuantity(id, newQty);\r\n-  };\r\n-\r\n-  const total = cartItems.reduce(\r\n-    (sum, item) => sum + item.price * item.quantity,\r\n-    0\r\n-  );\r\n-\r\n-  const handleCheckout = async () => {\r\n-    setCheckoutLoading(true);\r\n-    setCheckoutError(null);\r\n-    setCheckoutSuccess(null);\r\n-\r\n-    try {\r\n-      const res = await axiosWithCsrf.post(\"/api/checkout/\");\r\n-      setCheckoutSuccess(\r\n-        `Order placed successfully! Order ID: ${res.data.order.id}`\r\n-      );\r\n-      // Optionally clear the cart here or refetch cart items:\r\n-      setCartItems([]);\r\n-    } catch (err: any) {\r\n-      setCheckoutError(err.response?.data?.error || \"Checkout failed\");\r\n-    } finally {\r\n-      setCheckoutLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  if (loading) return <CheckoutSkeleton />;\r\n-  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n-\r\n-  return (\r\n-    <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n-      <h1 className=\"text-3xl font-bold text-blue-700 text-left mb-2\">\r\n-        Checkout\r\n-      </h1>\r\n-\r\n-      <BackButton />\r\n-\r\n-      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n-        <strong>Note:</strong> You are about to place your order. Please\r\n-        double-check your items. Once placed, the order cannot be changed.\r\n-      </div>\r\n-\r\n-      {cartItems.length === 0 ? (\r\n-        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n-      ) : (\r\n-        <>\r\n-          <div className=\"space-y-4\">\r\n-            {cartItems.map((item) => (\r\n-              <div\r\n-                key={item.id}\r\n-                className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n-              >\r\n-                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n-                  <img\r\n-                    src={item.imageSrc}\r\n-                    alt={item.name}\r\n-                    className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n-                  />\r\n-                  <div>\r\n-                    <h2 className=\"text-lg font-semibold text-gray-800\">\r\n-                      {item.name}\r\n-                    </h2>\r\n-                    <p className=\"text-sm text-gray-500\">\r\n-                      Unit Price: Rs {item.price.toFixed(2)}\r\n-                    </p>\r\n-                    <p className=\"text-sm text-gray-600 mt-1\">\r\n-                      Subtotal:{\" \"}\r\n-                      <span className=\"font-semibold text-green-700\">\r\n-                        Rs {(item.price * item.quantity).toFixed(2)}\r\n-                      </span>\r\n-                    </p>\r\n-                  </div>\r\n-                </div>\r\n-\r\n-                <div className=\"flex items-center space-x-3\">\r\n-                  <button\r\n-                    onClick={() => handleQuantityChange(item.id, -1)}\r\n-                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n-                  >\r\n-                    −\r\n-                  </button>\r\n-                  <span className=\"text-base font-medium\">{item.quantity}</span>\r\n-                  <button\r\n-                    onClick={() => handleQuantityChange(item.id, 1)}\r\n-                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n-                  >\r\n-                    +\r\n-                  </button>\r\n-                </div>\r\n-              </div>\r\n-            ))}\r\n-          </div>\r\n-\r\n-          {/* Total section only shows grand total */}\r\n-          <div className=\"mt-10 w-full bg-green-50 border border-green-200 rounded-xl p-6 shadow-md text-center sm:text-left\">\r\n-            <h3 className=\"text-lg font-semibold text-green-800 mb-2\">\r\n-              Total Amount\r\n-            </h3>\r\n-            <p className=\"text-3xl font-extrabold text-green-700 mb-1\">\r\n-              Rs {total.toFixed(2)}\r\n-            </p>\r\n-            <p className=\"text-sm text-green-600\">\r\n-              Includes all item subtotals\r\n-            </p>\r\n-          </div>\r\n-\r\n-          <div className=\"mt-6\">\r\n-            <button\r\n-              onClick={handleCheckout}\r\n-              disabled={checkoutLoading}\r\n-              className={`w-full text-white px-6 py-3 rounded-xl text-lg transition shadow ${\r\n-                checkoutLoading\r\n-                  ? \"bg-green-400 cursor-not-allowed\"\r\n-                  : \"bg-green-600 hover:bg-green-700\"\r\n-              }`}\r\n-            >\r\n-              {checkoutLoading ? \"Processing...\" : \"Proceed to Payment\"}\r\n-            </button>\r\n-\r\n-            {checkoutError && (\r\n-              <p className=\"text-red-600 mt-2\">{checkoutError}</p>\r\n-            )}\r\n-            {checkoutSuccess && (\r\n-              <p className=\"text-green-600 mt-2\">{checkoutSuccess}</p>\r\n-            )}\r\n-          </div>\r\n-        </>\r\n-      )}\r\n-      {checkoutSuccess && (\r\n-        <PopupMessage\r\n-          type=\"success\"\r\n-          message={checkoutSuccess}\r\n-          onClose={() => setCheckoutSuccess(null)}\r\n-        />\r\n-      )}\r\n-\r\n-      {checkoutError && (\r\n-        <PopupMessage\r\n-          type=\"error\"\r\n-          message={checkoutError}\r\n-          onClose={() => setCheckoutError(null)}\r\n-        />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1749115570729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import { axiosWithCsrf } from \"@/lib/axiosWithCsrf\";\r\n import PopupMessage from \"@/components/PopupMessage\";\r\n import { useRouter } from 'next/navigation';\r\n import BackButton from '@/components/BackButton';\r\n+import { useNotification } from \"@/context/messageContext\";\r\n \r\n interface CartItem {\r\n   id: number;\r\n   name: string;\r\n@@ -37,8 +38,17 @@\n           imageSrc: item.product_image,\r\n         }));\r\n         setCartItems(mappedItems);\r\n       } catch (err: any) {\r\n+        if (err.response && err.response.status === 404) {\r\n+          showNotification(\r\n+            \"error\",\r\n+            \"Your cart is empty. Please add items first.\"\r\n+          );\r\n+          router.push(\"/menu\");\r\n+        } else {\r\n+          showNotification(\"error\", err.message || \"Failed to fetch cart.\");\r\n+        }\r\n         // setError(err.message || \"Failed to fetch cart\");\r\n       } finally {\r\n         setLoading(false);\r\n       }\r\n"
                },
                {
                    "date": 1749115590735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,10 @@\n   const [error, setError] = useState<string | null>(null);\r\n   const [checkoutLoading, setCheckoutLoading] = useState(false);\r\n   const [checkoutError, setCheckoutError] = useState<string | null>(null);\r\n   const [checkoutSuccess, setCheckoutSuccess] = useState<string | null>(null);\r\n+  const { showNotification } = useNotification();\r\n+  const router = useRouter();\r\n \r\n   const router = useRouter();\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1749118821526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,229 @@\n+\"use client\";\r\n+\r\n+import { useState, useEffect } from \"react\";\r\n+import CheckoutSkeleton from \"@/components/CheckoutSkeleton\";\r\n+import { axiosWithCsrf } from \"@/lib/axiosWithCsrf\";\r\n+import PopupMessage from \"@/components/PopupMessage\";\r\n+import { useRouter } from 'next/navigation';\r\n+import BackButton from '@/components/BackButton';\r\n+import { useNotification } from \"@/context/messageContext\";\r\n+\r\n+interface CartItem {\r\n+  id: number;\r\n+  name: string;\r\n+  price: number;\r\n+  quantity: number;\r\n+  imageSrc: string;\r\n+}\r\n+\r\n+export default function CheckoutPage() {\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n+  const [error, setError] = useState<string | null>(null);\r\n+  const [checkoutLoading, setCheckoutLoading] = useState(false);\r\n+  const [checkoutError, setCheckoutError] = useState<string | null>(null);\r\n+  const [checkoutSuccess, setCheckoutSuccess] = useState<string | null>(null);\r\n+  const { showNotification } = useNotification();\r\n+\r\n+  const router = useRouter();\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCart = async () => {\r\n+      try {\r\n+        const res = await axiosWithCsrf.get(\"/api/cart/items/\");\r\n+        const mappedItems = res.data.map((item: any) => ({\r\n+          id: item.id,\r\n+          name: item.product_name,\r\n+          price: parseFloat(item.price),\r\n+          quantity: item.quantity,\r\n+          imageSrc: item.product_image,\r\n+        }));\r\n+        setCartItems(mappedItems);\r\n+      } catch (err: any) {\r\n+        if (err.response && err.response.status === 404) {\r\n+          showNotification(\r\n+            \"error\",\r\n+            \"Your cart is empty. Please add items first.\"\r\n+          );\r\n+          router.push(\"/menu\");\r\n+        } else {\r\n+          showNotification(\"error\", err.message || \"Failed to fetch cart.\");\r\n+        }\r\n+        // setError(err.message || \"Failed to fetch cart\");\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchCart();\r\n+  }, []);\r\n+\r\n+  const updateQuantity = async (id: number, newQty: number) => {\r\n+    if (newQty < 1) return;\r\n+    try {\r\n+      await axiosWithCsrf.post(\"/api/cart/update/\", {\r\n+        cart_item_id: id,\r\n+        quantity: newQty,\r\n+      });\r\n+      setCartItems((prev) =>\r\n+        prev.map((item) =>\r\n+          item.id === id ? { ...item, quantity: newQty } : item\r\n+        )\r\n+      );\r\n+    } catch (err) {\r\n+      console.error(\"Failed to update quantity:\", err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleQuantityChange = (id: number, delta: number) => {\r\n+    const item = cartItems.find((item) => item.id === id);\r\n+    if (!item) return;\r\n+    const newQty = item.quantity + delta;\r\n+    if (newQty < 1) return;\r\n+    updateQuantity(id, newQty);\r\n+  };\r\n+\r\n+  const total = cartItems.reduce(\r\n+    (sum, item) => sum + item.price * item.quantity,\r\n+    0\r\n+  );\r\n+\r\n+  const handleCheckout = async () => {\r\n+    setCheckoutLoading(true);\r\n+    setCheckoutError(null);\r\n+    setCheckoutSuccess(null);\r\n+\r\n+    try {\r\n+      const res = await axiosWithCsrf.post(\"/api/checkout/\");\r\n+      setCheckoutSuccess(\r\n+        `Order placed successfully! Order ID: ${res.data.order.id}`\r\n+      );\r\n+      // Optionally clear the cart here or refetch cart items:\r\n+      setCartItems([]);\r\n+    } catch (err: any) {\r\n+      setCheckoutError(err.response?.data?.error || \"Checkout failed\");\r\n+    } finally {\r\n+      setCheckoutLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  if (loading) return <CheckoutSkeleton />;\r\n+  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n+\r\n+  return (\r\n+    <div className=\"px-4 py-6\">\r\n+      <h1 className=\"text-3xl font-bold text-blue-700 text-left mb-1\">\r\n+        Checkout\r\n+      </h1>\r\n+\r\n+      <BackButton />\r\n+\r\n+      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n+        <strong>Note:</strong> You are about to place your order. Please\r\n+        double-check your items. Once placed, the order cannot be changed.\r\n+      </div>\r\n+\r\n+      {cartItems.length === 0 ? (\r\n+        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n+      ) : (\r\n+        <>\r\n+          <div className=\"space-y-4\">\r\n+            {cartItems.map((item) => (\r\n+              <div\r\n+                key={item.id}\r\n+                className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n+              >\r\n+                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n+                  <img\r\n+                    src={item.imageSrc}\r\n+                    alt={item.name}\r\n+                    className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n+                  />\r\n+                  <div>\r\n+                    <h2 className=\"text-lg font-semibold text-gray-800\">\r\n+                      {item.name}\r\n+                    </h2>\r\n+                    <p className=\"text-sm text-gray-500\">\r\n+                      Unit Price: Rs {item.price.toFixed(2)}\r\n+                    </p>\r\n+                    <p className=\"text-sm text-gray-600 mt-1\">\r\n+                      Subtotal:{\" \"}\r\n+                      <span className=\"font-semibold text-green-700\">\r\n+                        Rs {(item.price * item.quantity).toFixed(2)}\r\n+                      </span>\r\n+                    </p>\r\n+                  </div>\r\n+                </div>\r\n+\r\n+                <div className=\"flex items-center space-x-3\">\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, -1)}\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n+                  >\r\n+                    −\r\n+                  </button>\r\n+                  <span className=\"text-base font-medium\">{item.quantity}</span>\r\n+                  <button\r\n+                    onClick={() => handleQuantityChange(item.id, 1)}\r\n+                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n+                  >\r\n+                    +\r\n+                  </button>\r\n+                </div>\r\n+              </div>\r\n+            ))}\r\n+          </div>\r\n+\r\n+          {/* Total section only shows grand total */}\r\n+          <div className=\"mt-10 w-full bg-green-50 border border-green-200 rounded-xl p-6 shadow-md text-center sm:text-left\">\r\n+            <h3 className=\"text-lg font-semibold text-green-800 mb-2\">\r\n+              Total Amount\r\n+            </h3>\r\n+            <p className=\"text-3xl font-extrabold text-green-700 mb-1\">\r\n+              Rs {total.toFixed(2)}\r\n+            </p>\r\n+            <p className=\"text-sm text-green-600\">\r\n+              Includes all item subtotals\r\n+            </p>\r\n+          </div>\r\n+\r\n+          <div className=\"mt-6\">\r\n+            <button\r\n+              onClick={handleCheckout}\r\n+              disabled={checkoutLoading}\r\n+              className={`w-full text-white px-6 py-3 rounded-xl text-lg transition shadow ${\r\n+                checkoutLoading\r\n+                  ? \"bg-green-400 cursor-not-allowed\"\r\n+                  : \"bg-green-600 hover:bg-green-700\"\r\n+              }`}\r\n+            >\r\n+              {checkoutLoading ? \"Processing...\" : \"Proceed to Payment\"}\r\n+            </button>\r\n+\r\n+            {checkoutError && (\r\n+              <p className=\"text-red-600 mt-2\">{checkoutError}</p>\r\n+            )}\r\n+            {checkoutSuccess && (\r\n+              <p className=\"text-green-600 mt-2\">{checkoutSuccess}</p>\r\n+            )}\r\n+          </div>\r\n+        </>\r\n+      )}\r\n+      {checkoutSuccess && (\r\n+        <PopupMessage\r\n+          type=\"success\"\r\n+          message={checkoutSuccess}\r\n+          onClose={() => setCheckoutSuccess(null)}\r\n+        />\r\n+      )}\r\n+\r\n+      {checkoutError && (\r\n+        <PopupMessage\r\n+          type=\"error\"\r\n+          message={checkoutError}\r\n+          onClose={() => setCheckoutError(null)}\r\n+        />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1749118836900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n   if (loading) return <CheckoutSkeleton />;\r\n   if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n \r\n   return (\r\n-    <div className=\"px-4 py-6\">\r\n+    <div className=\"py-6\">\r\n       <h1 className=\"text-3xl font-bold text-blue-700 text-left mb-1\">\r\n         Checkout\r\n       </h1>\r\n \r\n@@ -226,234 +226,4 @@\n       )}\r\n     </div>\r\n   );\r\n }\r\n-\"use client\";\r\n-\r\n-import { useState, useEffect } from \"react\";\r\n-import CheckoutSkeleton from \"@/components/CheckoutSkeleton\";\r\n-import { axiosWithCsrf } from \"@/lib/axiosWithCsrf\";\r\n-import PopupMessage from \"@/components/PopupMessage\";\r\n-import { useRouter } from 'next/navigation';\r\n-import BackButton from '@/components/BackButton';\r\n-import { useNotification } from \"@/context/messageContext\";\r\n-\r\n-interface CartItem {\r\n-  id: number;\r\n-  name: string;\r\n-  price: number;\r\n-  quantity: number;\r\n-  imageSrc: string;\r\n-}\r\n-\r\n-export default function CheckoutPage() {\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n-  const [error, setError] = useState<string | null>(null);\r\n-  const [checkoutLoading, setCheckoutLoading] = useState(false);\r\n-  const [checkoutError, setCheckoutError] = useState<string | null>(null);\r\n-  const [checkoutSuccess, setCheckoutSuccess] = useState<string | null>(null);\r\n-  const { showNotification } = useNotification();\r\n-  const router = useRouter();\r\n-\r\n-  const router = useRouter();\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCart = async () => {\r\n-      try {\r\n-        const res = await axiosWithCsrf.get(\"/api/cart/items/\");\r\n-        const mappedItems = res.data.map((item: any) => ({\r\n-          id: item.id,\r\n-          name: item.product_name,\r\n-          price: parseFloat(item.price),\r\n-          quantity: item.quantity,\r\n-          imageSrc: item.product_image,\r\n-        }));\r\n-        setCartItems(mappedItems);\r\n-      } catch (err: any) {\r\n-        if (err.response && err.response.status === 404) {\r\n-          showNotification(\r\n-            \"error\",\r\n-            \"Your cart is empty. Please add items first.\"\r\n-          );\r\n-          router.push(\"/menu\");\r\n-        } else {\r\n-          showNotification(\"error\", err.message || \"Failed to fetch cart.\");\r\n-        }\r\n-        // setError(err.message || \"Failed to fetch cart\");\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchCart();\r\n-  }, []);\r\n-\r\n-  const updateQuantity = async (id: number, newQty: number) => {\r\n-    if (newQty < 1) return;\r\n-    try {\r\n-      await axiosWithCsrf.post(\"/api/cart/update/\", {\r\n-        cart_item_id: id,\r\n-        quantity: newQty,\r\n-      });\r\n-      setCartItems((prev) =>\r\n-        prev.map((item) =>\r\n-          item.id === id ? { ...item, quantity: newQty } : item\r\n-        )\r\n-      );\r\n-    } catch (err) {\r\n-      console.error(\"Failed to update quantity:\", err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleQuantityChange = (id: number, delta: number) => {\r\n-    const item = cartItems.find((item) => item.id === id);\r\n-    if (!item) return;\r\n-    const newQty = item.quantity + delta;\r\n-    if (newQty < 1) return;\r\n-    updateQuantity(id, newQty);\r\n-  };\r\n-\r\n-  const total = cartItems.reduce(\r\n-    (sum, item) => sum + item.price * item.quantity,\r\n-    0\r\n-  );\r\n-\r\n-  const handleCheckout = async () => {\r\n-    setCheckoutLoading(true);\r\n-    setCheckoutError(null);\r\n-    setCheckoutSuccess(null);\r\n-\r\n-    try {\r\n-      const res = await axiosWithCsrf.post(\"/api/checkout/\");\r\n-      setCheckoutSuccess(\r\n-        `Order placed successfully! Order ID: ${res.data.order.id}`\r\n-      );\r\n-      // Optionally clear the cart here or refetch cart items:\r\n-      setCartItems([]);\r\n-    } catch (err: any) {\r\n-      setCheckoutError(err.response?.data?.error || \"Checkout failed\");\r\n-    } finally {\r\n-      setCheckoutLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  if (loading) return <CheckoutSkeleton />;\r\n-  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n-\r\n-  return (\r\n-    <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n-      <h1 className=\"text-3xl font-bold text-blue-700 text-left mb-1\">\r\n-        Checkout\r\n-      </h1>\r\n-\r\n-      <BackButton />\r\n-\r\n-      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-md p-4 text-sm sm:text-base mb-6\">\r\n-        <strong>Note:</strong> You are about to place your order. Please\r\n-        double-check your items. Once placed, the order cannot be changed.\r\n-      </div>\r\n-\r\n-      {cartItems.length === 0 ? (\r\n-        <p className=\"text-gray-600 text-center text-lg\">Your cart is empty.</p>\r\n-      ) : (\r\n-        <>\r\n-          <div className=\"space-y-4\">\r\n-            {cartItems.map((item) => (\r\n-              <div\r\n-                key={item.id}\r\n-                className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-xl shadow-md p-4 gap-y-4 sm:gap-x-6 border border-gray-100\"\r\n-              >\r\n-                <div className=\"flex items-center w-full sm:w-1/2 space-x-4\">\r\n-                  <img\r\n-                    src={item.imageSrc}\r\n-                    alt={item.name}\r\n-                    className=\"h-20 w-20 object-cover rounded-lg border border-gray-200\"\r\n-                  />\r\n-                  <div>\r\n-                    <h2 className=\"text-lg font-semibold text-gray-800\">\r\n-                      {item.name}\r\n-                    </h2>\r\n-                    <p className=\"text-sm text-gray-500\">\r\n-                      Unit Price: Rs {item.price.toFixed(2)}\r\n-                    </p>\r\n-                    <p className=\"text-sm text-gray-600 mt-1\">\r\n-                      Subtotal:{\" \"}\r\n-                      <span className=\"font-semibold text-green-700\">\r\n-                        Rs {(item.price * item.quantity).toFixed(2)}\r\n-                      </span>\r\n-                    </p>\r\n-                  </div>\r\n-                </div>\r\n-\r\n-                <div className=\"flex items-center space-x-3\">\r\n-                  <button\r\n-                    onClick={() => handleQuantityChange(item.id, -1)}\r\n-                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n-                  >\r\n-                    −\r\n-                  </button>\r\n-                  <span className=\"text-base font-medium\">{item.quantity}</span>\r\n-                  <button\r\n-                    onClick={() => handleQuantityChange(item.id, 1)}\r\n-                    className=\"px-3 py-1 text-xl bg-gray-200 hover:bg-gray-300 rounded font-bold\"\r\n-                  >\r\n-                    +\r\n-                  </button>\r\n-                </div>\r\n-              </div>\r\n-            ))}\r\n-          </div>\r\n-\r\n-          {/* Total section only shows grand total */}\r\n-          <div className=\"mt-10 w-full bg-green-50 border border-green-200 rounded-xl p-6 shadow-md text-center sm:text-left\">\r\n-            <h3 className=\"text-lg font-semibold text-green-800 mb-2\">\r\n-              Total Amount\r\n-            </h3>\r\n-            <p className=\"text-3xl font-extrabold text-green-700 mb-1\">\r\n-              Rs {total.toFixed(2)}\r\n-            </p>\r\n-            <p className=\"text-sm text-green-600\">\r\n-              Includes all item subtotals\r\n-            </p>\r\n-          </div>\r\n-\r\n-          <div className=\"mt-6\">\r\n-            <button\r\n-              onClick={handleCheckout}\r\n-              disabled={checkoutLoading}\r\n-              className={`w-full text-white px-6 py-3 rounded-xl text-lg transition shadow ${\r\n-                checkoutLoading\r\n-                  ? \"bg-green-400 cursor-not-allowed\"\r\n-                  : \"bg-green-600 hover:bg-green-700\"\r\n-              }`}\r\n-            >\r\n-              {checkoutLoading ? \"Processing...\" : \"Proceed to Payment\"}\r\n-            </button>\r\n-\r\n-            {checkoutError && (\r\n-              <p className=\"text-red-600 mt-2\">{checkoutError}</p>\r\n-            )}\r\n-            {checkoutSuccess && (\r\n-              <p className=\"text-green-600 mt-2\">{checkoutSuccess}</p>\r\n-            )}\r\n-          </div>\r\n-        </>\r\n-      )}\r\n-      {checkoutSuccess && (\r\n-        <PopupMessage\r\n-          type=\"success\"\r\n-          message={checkoutSuccess}\r\n-          onClose={() => setCheckoutSuccess(null)}\r\n-        />\r\n-      )}\r\n-\r\n-      {checkoutError && (\r\n-        <PopupMessage\r\n-          type=\"error\"\r\n-          message={checkoutError}\r\n-          onClose={() => setCheckoutError(null)}\r\n-        />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n"
                }
            ],
            "date": 1748772985947,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport { useState } from 'react';\r\n\r\ninterface CartItem {\r\n  id: number;\r\n  name: string;\r\n  price: number;\r\n  quantity: number;\r\n  image: string;\r\n}\r\n\r\nexport default function CheckoutPage() {\r\n  const [cartItems, setCartItems] = useState<CartItem[]>([\r\n    {\r\n      id: 1,\r\n      name: 'Margherita Pizza',\r\n      price: 299,\r\n      quantity: 1,\r\n      image: '/images/pizza.jpg',\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Cheeseburger',\r\n      price: 199,\r\n      quantity: 2,\r\n      image: '/images/burger.jpg',\r\n    },\r\n  ]);\r\n\r\n  const handleQuantityChange = (id: number, delta: number) => {\r\n    setCartItems((prevItems) =>\r\n      prevItems.map((item) =>\r\n        item.id === id\r\n          ? {\r\n              ...item,\r\n              quantity: Math.max(item.quantity + delta, 1),\r\n            }\r\n          : item\r\n      )\r\n    );\r\n  };\r\n\r\n  const total = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);\r\n\r\n  return (\r\n    <div className=\"max-w-4xl mx-auto p-6\">\r\n      <h1 className=\"text-2xl font-semibold mb-6\">Checkout</h1>\r\n\r\n      <div className=\"space-y-4\">\r\n        {cartItems.map((item) => (\r\n          <div\r\n            key={item.id}\r\n            className=\"flex items-center justify-between bg-white rounded-lg shadow p-4\"\r\n          >\r\n            <div className=\"flex items-center space-x-4\">\r\n              <img src={item.image} alt={item.name} className=\"h-16 w-16 object-cover rounded\" />\r\n              <div>\r\n                <h2 className=\"text-lg font-medium\">{item.name}</h2>\r\n                <p className=\"text-gray-500\">₹{item.price}</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex items-center space-x-3\">\r\n              <button\r\n                onClick={() => handleQuantityChange(item.id, -1)}\r\n                className=\"bg-gray-200 px-2 rounded\"\r\n              >\r\n                −\r\n              </button>\r\n              <span>{item.quantity}</span>\r\n              <button\r\n                onClick={() => handleQuantityChange(item.id, 1)}\r\n                className=\"bg-gray-200 px-2 rounded\"\r\n              >\r\n                +\r\n              </button>\r\n            </div>\r\n            <div className=\"text-right\">\r\n              <p className=\"text-sm text-gray-600\">Subtotal</p>\r\n              <p className=\"font-semibold\">₹{item.price * item.quantity}</p>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"mt-8 border-t pt-6 flex justify-between items-center\">\r\n        <div>\r\n          <h2 className=\"text-xl font-semibold\">Total:</h2>\r\n          <p className=\"text-lg text-green-600 font-bold\">₹{total}</p>\r\n        </div>\r\n        <button className=\"bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-md text-lg\">\r\n          Proceed to Payment\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}