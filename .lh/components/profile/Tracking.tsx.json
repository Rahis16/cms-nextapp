{
    "sourceFile": "components/profile/Tracking.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1749206348338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749206729687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,41 @@\n-import { useEffect, useState } from 'react';\r\n+\"use client\";\r\n \r\n-const OrderTrackingTab = ({ trackingOrders }) => {\r\n-  const [progressData, setProgressData] = useState([]);\r\n+import { useEffect, useState } from \"react\";\r\n \r\n+interface Order {\r\n+  id: number;\r\n+  status: string;\r\n+  confirmed_at: string | null;\r\n+  [key: string]: any; // to support additional props\r\n+}\r\n+\r\n+interface Props {\r\n+  trackingOrders: Order[];\r\n+}\r\n+\r\n+const OrderTrackingTab: React.FC<Props> = ({ trackingOrders }) => {\r\n+  const [progressData, setProgressData] = useState<Order[]>([]);\r\n+\r\n   useEffect(() => {\r\n     const interval = setInterval(() => {\r\n       const updated = trackingOrders.map(order => {\r\n-        if (!order.confirmed_at || order.status !== 'confirmed') return { ...order, progress: 0, remainingMin: 10 };\r\n+        if (!order.confirmed_at || order.status !== \"confirmed\")\r\n+          return { ...order, progress: 0, remainingMin: 10 };\r\n \r\n         const confirmedTime = new Date(order.confirmed_at).getTime();\r\n         const now = new Date().getTime();\r\n         const elapsed = now - confirmedTime;\r\n-        const total = 10 * 60 * 1000; // 10 mins\r\n+        const total = 10 * 60 * 1000;\r\n \r\n         const progress = Math.min(100, (elapsed / total) * 100);\r\n         const remaining = Math.max(0, 10 - Math.floor(elapsed / 60000));\r\n \r\n-        return { ...order, progress, remainingMin: remaining };\r\n+        return {\r\n+          ...order,\r\n+          progress,\r\n+          remainingMin: remaining,\r\n+        };\r\n       });\r\n \r\n       setProgressData(updated);\r\n     }, 1000);\r\n@@ -34,12 +52,19 @@\n       )}\r\n \r\n       <div className=\"flex flex-col space-y-5\">\r\n         {progressData.map((order, index) => (\r\n-          <div key={order.id || index} className=\"bg-gradient-to-r from-gray-50 to-white border rounded-lg p-4 shadow\">\r\n+          <div\r\n+            key={order.id || index}\r\n+            className=\"bg-gradient-to-r from-gray-50 to-white border rounded-lg p-4 shadow\"\r\n+          >\r\n             <div className=\"flex justify-between items-center mb-1\">\r\n-              <p className=\"font-semibold text-lg text-gray-800\">Order #{order.id}</p>\r\n-              <span className=\"text-sm text-gray-500\">Status: {order.status}</span>\r\n+              <p className=\"font-semibold text-lg text-gray-800\">\r\n+                Order #{order.id}\r\n+              </p>\r\n+              <span className=\"text-sm text-gray-500\">\r\n+                Status: {order.status}\r\n+              </span>\r\n             </div>\r\n             <p className=\"text-sm text-gray-600\">\r\n               {order.remainingMin > 0\r\n                 ? `Estimated Ready In: ${order.remainingMin} min`\r\n@@ -47,9 +72,9 @@\n             </p>\r\n             <div className=\"mt-2 w-full bg-gray-300 h-3 rounded-full overflow-hidden\">\r\n               <div\r\n                 className={`h-full rounded-full transition-all duration-500 ${\r\n-                  order.progress < 100 ? 'bg-blue-500' : 'bg-green-500'\r\n+                  order.progress < 100 ? \"bg-blue-500\" : \"bg-green-500\"\r\n                 }`}\r\n                 style={{ width: `${order.progress}%` }}\r\n               />\r\n             </div>\r\n"
                }
            ],
            "date": 1749206348338,
            "name": "Commit-0",
            "content": "import { useEffect, useState } from 'react';\r\n\r\nconst OrderTrackingTab = ({ trackingOrders }) => {\r\n  const [progressData, setProgressData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      const updated = trackingOrders.map(order => {\r\n        if (!order.confirmed_at || order.status !== 'confirmed') return { ...order, progress: 0, remainingMin: 10 };\r\n\r\n        const confirmedTime = new Date(order.confirmed_at).getTime();\r\n        const now = new Date().getTime();\r\n        const elapsed = now - confirmedTime;\r\n        const total = 10 * 60 * 1000; // 10 mins\r\n\r\n        const progress = Math.min(100, (elapsed / total) * 100);\r\n        const remaining = Math.max(0, 10 - Math.floor(elapsed / 60000));\r\n\r\n        return { ...order, progress, remainingMin: remaining };\r\n      });\r\n\r\n      setProgressData(updated);\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [trackingOrders]);\r\n\r\n  return (\r\n    <div className=\"bg-white shadow rounded-lg p-6\">\r\n      <h2 className=\"text-2xl font-bold mb-4 text-blue-700\">ðŸ“¦ Track Your Order</h2>\r\n\r\n      {progressData.length === 0 && (\r\n        <p className=\"text-gray-500 text-sm\">No active orders to track.</p>\r\n      )}\r\n\r\n      <div className=\"flex flex-col space-y-5\">\r\n        {progressData.map((order, index) => (\r\n          <div key={order.id || index} className=\"bg-gradient-to-r from-gray-50 to-white border rounded-lg p-4 shadow\">\r\n            <div className=\"flex justify-between items-center mb-1\">\r\n              <p className=\"font-semibold text-lg text-gray-800\">Order #{order.id}</p>\r\n              <span className=\"text-sm text-gray-500\">Status: {order.status}</span>\r\n            </div>\r\n            <p className=\"text-sm text-gray-600\">\r\n              {order.remainingMin > 0\r\n                ? `Estimated Ready In: ${order.remainingMin} min`\r\n                : `Almost Ready!`}\r\n            </p>\r\n            <div className=\"mt-2 w-full bg-gray-300 h-3 rounded-full overflow-hidden\">\r\n              <div\r\n                className={`h-full rounded-full transition-all duration-500 ${\r\n                  order.progress < 100 ? 'bg-blue-500' : 'bg-green-500'\r\n                }`}\r\n                style={{ width: `${order.progress}%` }}\r\n              />\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrderTrackingTab;\r\n"
        }
    ]
}