{
    "sourceFile": "components/profile/OrderTrackingTab.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 23,
            "patches": [
                {
                    "date": 1749206760925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749208515504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,14 @@\n \"use client\";\r\n \r\n import { useEffect, useState } from \"react\";\r\n+import { Clock, Loader2, CheckCircle2, Bike, CookingPot } from \"lucide-react\";\r\n \r\n interface Order {\r\n   id: number;\r\n   status: string;\r\n   confirmed_at: string | null;\r\n-  [key: string]: any; // to support additional props\r\n+  [key: string]: any;\r\n }\r\n \r\n interface Props {\r\n   trackingOrders: Order[];\r\n@@ -18,18 +19,21 @@\n \r\n   useEffect(() => {\r\n     const interval = setInterval(() => {\r\n       const updated = trackingOrders.map(order => {\r\n-        if (!order.confirmed_at || order.status !== \"confirmed\")\r\n+        if (!order.confirmed_at || (order.status !== \"confirmed\" && order.status !== \"preparing\")) {\r\n           return { ...order, progress: 0, remainingMin: 10 };\r\n+        }\r\n \r\n+        const now = new Date().getTime();\r\n         const confirmedTime = new Date(order.confirmed_at).getTime();\r\n-        const now = new Date().getTime();\r\n+\r\n+        // If status is preparing, we reduce total time to 5 mins\r\n+        const total = order.status === \"preparing\" ? 5 * 60 * 1000 : 10 * 60 * 1000;\r\n         const elapsed = now - confirmedTime;\r\n-        const total = 10 * 60 * 1000;\r\n \r\n         const progress = Math.min(100, (elapsed / total) * 100);\r\n-        const remaining = Math.max(0, 10 - Math.floor(elapsed / 60000));\r\n+        const remaining = Math.max(0, Math.ceil((total - elapsed) / 60000));\r\n \r\n         return {\r\n           ...order,\r\n           progress,\r\n@@ -42,8 +46,29 @@\n \r\n     return () => clearInterval(interval);\r\n   }, [trackingOrders]);\r\n \r\n+  const getStatusColor = (order: Order) => {\r\n+    if (order.status === \"preparing\") return \"bg-yellow-500\";\r\n+    if (order.progress >= 100) return \"bg-green-500\";\r\n+    return \"bg-blue-500\";\r\n+  };\r\n+\r\n+  const getStatusIcon = (status: string) => {\r\n+    switch (status) {\r\n+      case \"confirmed\":\r\n+        return <Clock className=\"w-4 h-4 text-blue-600\" />;\r\n+      case \"preparing\":\r\n+        return <CookingPot className=\"w-4 h-4 text-yellow-500\" />;\r\n+      case \"delivered\":\r\n+        return <CheckCircle2 className=\"w-4 h-4 text-green-600\" />;\r\n+      case \"cancelled\":\r\n+        return <Loader2 className=\"w-4 h-4 text-red-500 animate-spin\" />;\r\n+      default:\r\n+        return <Bike className=\"w-4 h-4 text-gray-400\" />;\r\n+    }\r\n+  };\r\n+\r\n   return (\r\n     <div className=\"bg-white shadow rounded-lg p-6\">\r\n       <h2 className=\"text-2xl font-bold mb-4 text-blue-700\">📦 Track Your Order</h2>\r\n \r\n@@ -56,28 +81,35 @@\n           <div\r\n             key={order.id || index}\r\n             className=\"bg-gradient-to-r from-gray-50 to-white border rounded-lg p-4 shadow\"\r\n           >\r\n-            <div className=\"flex justify-between items-center mb-1\">\r\n-              <p className=\"font-semibold text-lg text-gray-800\">\r\n-                Order #{order.id}\r\n-              </p>\r\n-              <span className=\"text-sm text-gray-500\">\r\n-                Status: {order.status}\r\n+            <div className=\"flex justify-between items-center mb-2\">\r\n+              <div className=\"flex items-center gap-2\">\r\n+                {getStatusIcon(order.status)}\r\n+                <p className=\"font-semibold text-lg text-gray-800\">\r\n+                  Order #{order.id}\r\n+                </p>\r\n+              </div>\r\n+              <span className=\"text-sm text-gray-500 capitalize\">\r\n+                {order.status}\r\n               </span>\r\n             </div>\r\n+\r\n             <p className=\"text-sm text-gray-600\">\r\n               {order.remainingMin > 0\r\n                 ? `Estimated Ready In: ${order.remainingMin} min`\r\n                 : `Almost Ready!`}\r\n             </p>\r\n-            <div className=\"mt-2 w-full bg-gray-300 h-3 rounded-full overflow-hidden\">\r\n-              <div\r\n-                className={`h-full rounded-full transition-all duration-500 ${\r\n-                  order.progress < 100 ? \"bg-blue-500\" : \"bg-green-500\"\r\n-                }`}\r\n-                style={{ width: `${order.progress}%` }}\r\n-              />\r\n+\r\n+            <div className=\"mt-2 w-full bg-gray-300 h-3 rounded-full overflow-hidden relative\">\r\n+              {order.progress === 0 ? (\r\n+                <div className=\"absolute top-0 left-0 w-full h-full bg-gradient-to-r from-gray-300 via-gray-100 to-gray-300 animate-pulse rounded-full\" />\r\n+              ) : (\r\n+                <div\r\n+                  className={`h-full transition-all duration-500 rounded-full ${getStatusColor(order)}`}\r\n+                  style={{ width: `${order.progress}%` }}\r\n+                />\r\n+              )}\r\n             </div>\r\n           </div>\r\n         ))}\r\n       </div>\r\n"
                },
                {
                    "date": 1749208861591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,38 +16,52 @@\n \r\n const OrderTrackingTab: React.FC<Props> = ({ trackingOrders }) => {\r\n   const [progressData, setProgressData] = useState<Order[]>([]);\r\n \r\n-  useEffect(() => {\r\n-    const interval = setInterval(() => {\r\n-      const updated = trackingOrders.map(order => {\r\n-        if (!order.confirmed_at || (order.status !== \"confirmed\" && order.status !== \"preparing\")) {\r\n-          return { ...order, progress: 0, remainingMin: 10 };\r\n-        }\r\n+ useEffect(() => {\r\n+  const interval = setInterval(() => {\r\n+    const updated = trackingOrders.map(order => {\r\n+      if (!order.confirmed_at) return { ...order, progress: 0, remainingMin: 15 };\r\n \r\n-        const now = new Date().getTime();\r\n-        const confirmedTime = new Date(order.confirmed_at).getTime();\r\n+      const now = new Date().getTime();\r\n+      const confirmedTime = new Date(order.confirmed_at).getTime();\r\n+      const elapsed = now - confirmedTime;\r\n \r\n-        // If status is preparing, we reduce total time to 5 mins\r\n-        const total = order.status === \"preparing\" ? 5 * 60 * 1000 : 10 * 60 * 1000;\r\n-        const elapsed = now - confirmedTime;\r\n+      let progress = 0;\r\n+      let remainingMin = 15;\r\n \r\n-        const progress = Math.min(100, (elapsed / total) * 100);\r\n-        const remaining = Math.max(0, Math.ceil((total - elapsed) / 60000));\r\n+      if (order.status === \"confirmed\") {\r\n+        const totalConfirmed = 10 * 60 * 1000;\r\n+        progress = Math.min(50, (elapsed / totalConfirmed) * 50); // Max 50%\r\n+        remainingMin = Math.max(0, 10 - Math.floor(elapsed / 60000));\r\n+      }\r\n \r\n-        return {\r\n-          ...order,\r\n-          progress,\r\n-          remainingMin: remaining,\r\n-        };\r\n-      });\r\n+      if (order.status === \"preparing\") {\r\n+        const totalConfirmed = 10 * 60 * 1000;\r\n+        const totalPreparing = 5 * 60 * 1000;\r\n+        const preparingStart = confirmedTime + totalConfirmed;\r\n+        const preparingElapsed = now - preparingStart;\r\n \r\n-      setProgressData(updated);\r\n-    }, 1000);\r\n+        const additionalProgress = Math.min(50, (preparingElapsed / totalPreparing) * 50);\r\n+        progress = 50 + additionalProgress; // Start from 50%\r\n+        remainingMin = Math.max(0, 5 - Math.floor(preparingElapsed / 60000));\r\n+      }\r\n \r\n-    return () => clearInterval(interval);\r\n-  }, [trackingOrders]);\r\n+      progress = Math.min(progress, 100);\r\n \r\n+      return {\r\n+        ...order,\r\n+        progress,\r\n+        remainingMin,\r\n+      };\r\n+    });\r\n+\r\n+    setProgressData(updated);\r\n+  }, 1000);\r\n+\r\n+  return () => clearInterval(interval);\r\n+}, [trackingOrders]);\r\n+\r\n   const getStatusColor = (order: Order) => {\r\n     if (order.status === \"preparing\") return \"bg-yellow-500\";\r\n     if (order.progress >= 100) return \"bg-green-500\";\r\n     return \"bg-blue-500\";\r\n"
                },
                {
                    "date": 1749209043391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,88 @@\n+\"use client\";\r\n+\r\n+import { useEffect, useState } from \"react\";\r\n+\r\n+interface Order {\r\n+  id: number;\r\n+  status: string;\r\n+  confirmed_at: string | null;\r\n+  [key: string]: any; // to support additional props\r\n+}\r\n+\r\n+interface Props {\r\n+  trackingOrders: Order[];\r\n+}\r\n+\r\n+const OrderTrackingTab: React.FC<Props> = ({ trackingOrders }) => {\r\n+  const [progressData, setProgressData] = useState<Order[]>([]);\r\n+\r\n+  useEffect(() => {\r\n+    const interval = setInterval(() => {\r\n+      const updated = trackingOrders.map(order => {\r\n+        if (!order.confirmed_at || order.status !== \"confirmed\")\r\n+          return { ...order, progress: 0, remainingMin: 10 };\r\n+\r\n+        const confirmedTime = new Date(order.confirmed_at).getTime();\r\n+        const now = new Date().getTime();\r\n+        const elapsed = now - confirmedTime;\r\n+        const total = 10 * 60 * 1000;\r\n+\r\n+        const progress = Math.min(100, (elapsed / total) * 100);\r\n+        const remaining = Math.max(0, 10 - Math.floor(elapsed / 60000));\r\n+\r\n+        return {\r\n+          ...order,\r\n+          progress,\r\n+          remainingMin: remaining,\r\n+        };\r\n+      });\r\n+\r\n+      setProgressData(updated);\r\n+    }, 1000);\r\n+\r\n+    return () => clearInterval(interval);\r\n+  }, [trackingOrders]);\r\n+\r\n+  return (\r\n+    <div className=\"bg-white shadow rounded-lg p-6\">\r\n+      <h2 className=\"text-2xl font-bold mb-4 text-blue-700\">📦 Track Your Order</h2>\r\n+\r\n+      {progressData.length === 0 && (\r\n+        <p className=\"text-gray-500 text-sm\">No active orders to track.</p>\r\n+      )}\r\n+\r\n+      <div className=\"flex flex-col space-y-5\">\r\n+        {progressData.map((order, index) => (\r\n+          <div\r\n+            key={order.id || index}\r\n+            className=\"bg-gradient-to-r from-gray-50 to-white border rounded-lg p-4 shadow\"\r\n+          >\r\n+            <div className=\"flex justify-between items-center mb-1\">\r\n+              <p className=\"font-semibold text-lg text-gray-800\">\r\n+                Order #{order.id}\r\n+              </p>\r\n+              <span className=\"text-sm text-gray-500\">\r\n+                Status: {order.status}\r\n+              </span>\r\n+            </div>\r\n+            <p className=\"text-sm text-gray-600\">\r\n+              {order.remainingMin > 0\r\n+                ? `Estimated Ready In: ${order.remainingMin} min`\r\n+                : `Almost Ready!`}\r\n+            </p>\r\n+            <div className=\"mt-2 w-full bg-gray-300 h-3 rounded-full overflow-hidden\">\r\n+              <div\r\n+                className={`h-full rounded-full transition-all duration-500 ${\r\n+                  order.progress < 100 ? \"bg-blue-500\" : \"bg-green-500\"\r\n+                }`}\r\n+                style={{ width: `${order.progress}%` }}\r\n+              />\r\n+            </div>\r\n+          </div>\r\n+        ))}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default OrderTrackingTab;\r\n"
                },
                {
                    "date": 1749211583571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,134 @@\n+\"use client\";\r\n+\r\n+import { useEffect, useState } from \"react\";\r\n+import { FaClock, FaCheckCircle, FaMotorcycle, FaUtensils } from \"react-icons/fa\";\r\n+\r\n+interface Order {\r\n+  id: number;\r\n+  status: string;\r\n+  ordered_at: string;\r\n+  confirmed_at?: string | null;\r\n+  preparing_at?: string | null;\r\n+  prepare_duration?: number; // in minutes (set by staff)\r\n+  [key: string]: any;\r\n+}\r\n+\r\n+interface Props {\r\n+  trackingOrders: Order[];\r\n+}\r\n+\r\n+const OrderTrackingTab: React.FC<Props> = ({ trackingOrders }) => {\r\n+  const [progressData, setProgressData] = useState<any[]>([]);\r\n+\r\n+  useEffect(() => {\r\n+    const interval = setInterval(() => {\r\n+      const updated = trackingOrders.map((order) => {\r\n+        const now = new Date().getTime();\r\n+        let stage = \"pending\";\r\n+        let startTime = new Date(order.ordered_at).getTime();\r\n+        let duration = 2 * 60 * 1000;\r\n+\r\n+        if (order.status === \"confirmed\" && order.confirmed_at) {\r\n+          stage = \"confirmed\";\r\n+          startTime = new Date(order.confirmed_at).getTime();\r\n+          duration = 2 * 60 * 1000;\r\n+        }\r\n+\r\n+        if (order.status === \"preparing\" && order.preparing_at && order.prepare_duration) {\r\n+          stage = \"preparing\";\r\n+          startTime = new Date(order.preparing_at).getTime();\r\n+          duration = order.prepare_duration * 60 * 1000;\r\n+        }\r\n+\r\n+        const elapsed = now - startTime;\r\n+        const progress = Math.min(100, (elapsed / duration) * 100);\r\n+        const remaining = Math.max(0, Math.ceil((duration - elapsed) / 60000));\r\n+\r\n+        return {\r\n+          ...order,\r\n+          stage,\r\n+          progress,\r\n+          remainingMin: remaining,\r\n+        };\r\n+      });\r\n+\r\n+      setProgressData(updated);\r\n+    }, 1000);\r\n+\r\n+    return () => clearInterval(interval);\r\n+  }, [trackingOrders]);\r\n+\r\n+  const getStageIcon = (stage: string) => {\r\n+    if (stage === \"pending\") return <FaClock className=\"text-yellow-500 mr-2\" />;\r\n+    if (stage === \"confirmed\") return <FaCheckCircle className=\"text-blue-500 mr-2\" />;\r\n+    if (stage === \"preparing\") return <FaUtensils className=\"text-green-600 mr-2\" />;\r\n+    return null;\r\n+  };\r\n+\r\n+  const getMovingEmoji = (stage: string) => {\r\n+    if (stage === \"preparing\") return \"🍽️\";\r\n+    if (stage === \"confirmed\") return \"🏍️\";\r\n+    if (stage === \"pending\") return \"⏳\";\r\n+    return \"\";\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"bg-white shadow rounded-lg p-6\">\r\n+      <h2 className=\"text-2xl font-bold mb-4 text-blue-700\">📦 Track Your Order</h2>\r\n+\r\n+      {progressData.length === 0 ? (\r\n+        <p className=\"text-gray-400 text-sm\">No active orders to track.</p>\r\n+      ) : (\r\n+        <div className=\"flex flex-col space-y-6\">\r\n+          {progressData.map((order, index) => (\r\n+            <div key={order.id || index} className=\"bg-gray-50 p-4 border rounded-lg shadow relative overflow-hidden\">\r\n+              <div className=\"flex justify-between items-center mb-2\">\r\n+                <div className=\"flex items-center\">\r\n+                  {getStageIcon(order.stage)}\r\n+                  <p className=\"font-semibold text-gray-800\">Order #{order.id}</p>\r\n+                </div>\r\n+                <span className=\"text-sm text-gray-600\">Status: {order.status}</span>\r\n+              </div>\r\n+\r\n+              <p className=\"text-sm text-gray-600 mb-1\">\r\n+                {order.remainingMin > 0\r\n+                  ? `Estimated Time: ${order.remainingMin} min`\r\n+                  : \"Almost Ready!\"}\r\n+              </p>\r\n+\r\n+              <div className=\"relative w-full bg-gray-300 h-3 rounded-full overflow-hidden mt-2\">\r\n+                <div\r\n+                  className={`h-full rounded-full transition-all duration-500 ${\r\n+                    order.progress < 100\r\n+                      ? order.stage === \"preparing\"\r\n+                        ? \"bg-green-500\"\r\n+                        : \"bg-blue-500\"\r\n+                      : \"bg-emerald-500\"\r\n+                  }`}\r\n+                  style={{ width: `${order.progress}%` }}\r\n+                />\r\n+\r\n+                {/* Moving emoji */}\r\n+                {order.progress > 0 && (\r\n+                  <div\r\n+                    className=\"absolute -top-5 text-xl transition-all duration-300\"\r\n+                    style={{ left: `calc(${order.progress}% - 10px)` }}\r\n+                  >\r\n+                    {getMovingEmoji(order.stage)}\r\n+                  </div>\r\n+                )}\r\n+\r\n+                {/* Skeleton shimmer for 0% progress */}\r\n+                {order.progress === 0 && (\r\n+                  <div className=\"absolute inset-0 animate-pulse bg-gradient-to-r from-transparent via-white to-transparent\" />\r\n+                )}\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default OrderTrackingTab;\r\n"
                },
                {
                    "date": 1749211592008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,134 @@\n+\"use client\";\r\n+\r\n+import { useEffect, useState } from \"react\";\r\n+import { FaClock, FaCheckCircle, FaMotorcycle, FaUtensils } from \"react-icons/fa\";\r\n+\r\n+interface Order {\r\n+  id: number;\r\n+  status: string;\r\n+  ordered_at: string;\r\n+  confirmed_at?: string | null;\r\n+  preparing_at?: string | null;\r\n+  prepare_duration?: number; // in minutes (set by staff)\r\n+  [key: string]: any;\r\n+}\r\n+\r\n+interface Props {\r\n+  trackingOrders: Order[];\r\n+}\r\n+\r\n+const OrderTrackingTab: React.FC<Props> = ({ trackingOrders }) => {\r\n+  const [progressData, setProgressData] = useState<any[]>([]);\r\n+\r\n+  useEffect(() => {\r\n+    const interval = setInterval(() => {\r\n+      const updated = trackingOrders.map((order) => {\r\n+        const now = new Date().getTime();\r\n+        let stage = \"pending\";\r\n+        let startTime = new Date(order.ordered_at).getTime();\r\n+        let duration = 2 * 60 * 1000;\r\n+\r\n+        if (order.status === \"confirmed\" && order.confirmed_at) {\r\n+          stage = \"confirmed\";\r\n+          startTime = new Date(order.confirmed_at).getTime();\r\n+          duration = 2 * 60 * 1000;\r\n+        }\r\n+\r\n+        if (order.status === \"preparing\" && order.preparing_at && order.prepare_duration) {\r\n+          stage = \"preparing\";\r\n+          startTime = new Date(order.preparing_at).getTime();\r\n+          duration = order.prepare_duration * 60 * 1000;\r\n+        }\r\n+\r\n+        const elapsed = now - startTime;\r\n+        const progress = Math.min(100, (elapsed / duration) * 100);\r\n+        const remaining = Math.max(0, Math.ceil((duration - elapsed) / 60000));\r\n+\r\n+        return {\r\n+          ...order,\r\n+          stage,\r\n+          progress,\r\n+          remainingMin: remaining,\r\n+        };\r\n+      });\r\n+\r\n+      setProgressData(updated);\r\n+    }, 1000);\r\n+\r\n+    return () => clearInterval(interval);\r\n+  }, [trackingOrders]);\r\n+\r\n+  const getStageIcon = (stage: string) => {\r\n+    if (stage === \"pending\") return <FaClock className=\"text-yellow-500 mr-2\" />;\r\n+    if (stage === \"confirmed\") return <FaCheckCircle className=\"text-blue-500 mr-2\" />;\r\n+    if (stage === \"preparing\") return <FaUtensils className=\"text-green-600 mr-2\" />;\r\n+    return null;\r\n+  };\r\n+\r\n+  const getMovingEmoji = (stage: string) => {\r\n+    if (stage === \"preparing\") return \"🍽️\";\r\n+    if (stage === \"confirmed\") return \"🏍️\";\r\n+    if (stage === \"pending\") return \"⏳\";\r\n+    return \"\";\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"bg-white shadow rounded-lg p-6\">\r\n+      <h2 className=\"text-2xl font-bold mb-4 text-blue-700\">📦 Track Your Order</h2>\r\n+\r\n+      {progressData.length === 0 ? (\r\n+        <p className=\"text-gray-400 text-sm\">No active orders to track.</p>\r\n+      ) : (\r\n+        <div className=\"flex flex-col space-y-6\">\r\n+          {progressData.map((order, index) => (\r\n+            <div key={order.id || index} className=\"bg-gray-50 p-4 border rounded-lg shadow relative overflow-hidden\">\r\n+              <div className=\"flex justify-between items-center mb-2\">\r\n+                <div className=\"flex items-center\">\r\n+                  {getStageIcon(order.stage)}\r\n+                  <p className=\"font-semibold text-gray-800\">Order #{order.id}</p>\r\n+                </div>\r\n+                <span className=\"text-sm text-gray-600\">Status: {order.status}</span>\r\n+              </div>\r\n+\r\n+              <p className=\"text-sm text-gray-600 mb-1\">\r\n+                {order.remainingMin > 0\r\n+                  ? `Estimated Time: ${order.remainingMin} min`\r\n+                  : \"Almost Ready!\"}\r\n+              </p>\r\n+\r\n+              <div className=\"relative w-full bg-gray-300 h-3 rounded-full overflow-hidden mt-2\">\r\n+                <div\r\n+                  className={`h-full rounded-full transition-all duration-500 ${\r\n+                    order.progress < 100\r\n+                      ? order.stage === \"preparing\"\r\n+                        ? \"bg-green-500\"\r\n+                        : \"bg-blue-500\"\r\n+                      : \"bg-emerald-500\"\r\n+                  }`}\r\n+                  style={{ width: `${order.progress}%` }}\r\n+                />\r\n+\r\n+                {/* Moving emoji */}\r\n+                {order.progress > 0 && (\r\n+                  <div\r\n+                    className=\"absolute -top-5 text-xl transition-all duration-300\"\r\n+                    style={{ left: `calc(${order.progress}% - 10px)` }}\r\n+                  >\r\n+                    {getMovingEmoji(order.stage)}\r\n+                  </div>\r\n+                )}\r\n+\r\n+                {/* Skeleton shimmer for 0% progress */}\r\n+                {order.progress === 0 && (\r\n+                  <div className=\"absolute inset-0 animate-pulse bg-gradient-to-r from-transparent via-white to-transparent\" />\r\n+                )}\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default OrderTrackingTab;\r\n"
                },
                {
                    "date": 1749211863474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,128 @@\n+\"use client\";\r\n+\r\n+import { useEffect, useState } from \"react\";\r\n+import { FaBiking, FaUtensils } from \"react-icons/fa\"; // Bike & Food icons\r\n+\r\n+interface Order {\r\n+  id: number;\r\n+  status: string;\r\n+  ordered_at: string;\r\n+  confirmed_at: string | null;\r\n+  preparing_at: string | null;\r\n+  preparing_duration: number | null;\r\n+  [key: string]: any;\r\n+}\r\n+\r\n+interface Props {\r\n+  trackingOrders: Order[];\r\n+}\r\n+\r\n+const OrderTrackingTab: React.FC<Props> = ({ trackingOrders }) => {\r\n+  const [progressData, setProgressData] = useState<Order[]>([]);\r\n+\r\n+  useEffect(() => {\r\n+    const interval = setInterval(() => {\r\n+      const updated = trackingOrders.map((order) => {\r\n+        const now = new Date().getTime();\r\n+        let baseTime = 0;\r\n+        let duration = 0;\r\n+        let progress = 0;\r\n+        let remainingMin = 0;\r\n+\r\n+        if (order.status === \"pending\") {\r\n+          baseTime = new Date(order.ordered_at).getTime();\r\n+          duration = 2 * 60 * 1000;\r\n+          progress = Math.min(100, ((now - baseTime) / duration) * 100);\r\n+          remainingMin = Math.max(0, 2 - Math.floor((now - baseTime) / 60000));\r\n+        } else if (order.status === \"confirmed\" && order.confirmed_at) {\r\n+          baseTime = new Date(order.confirmed_at).getTime();\r\n+          duration = 2 * 60 * 1000;\r\n+          progress = Math.min(100, ((now - baseTime) / duration) * 100);\r\n+          remainingMin = Math.max(0, 2 - Math.floor((now - baseTime) / 60000));\r\n+        } else if (order.status === \"preparing\" && order.preparing_at && order.preparing_duration) {\r\n+          baseTime = new Date(order.preparing_at).getTime();\r\n+          duration = order.preparing_duration * 60 * 1000;\r\n+          progress = Math.min(100, ((now - baseTime) / duration) * 100);\r\n+          remainingMin = Math.max(0, order.preparing_duration - Math.floor((now - baseTime) / 60000));\r\n+        }\r\n+\r\n+        return {\r\n+          ...order,\r\n+          progress,\r\n+          remainingMin,\r\n+        };\r\n+      });\r\n+\r\n+      setProgressData(updated);\r\n+    }, 1000);\r\n+\r\n+    return () => clearInterval(interval);\r\n+  }, [trackingOrders]);\r\n+\r\n+  return (\r\n+    <div className=\"bg-white shadow rounded-lg p-6\">\r\n+      <h2 className=\"text-2xl font-bold mb-4 text-blue-700\">📦 Track Your Order</h2>\r\n+\r\n+      {progressData.length === 0 && (\r\n+        <p className=\"text-gray-500 text-sm\">No active orders to track.</p>\r\n+      )}\r\n+\r\n+      <div className=\"flex flex-col space-y-5\">\r\n+        {progressData.map((order, index) => (\r\n+          <div\r\n+            key={order.id || index}\r\n+            className=\"relative bg-gradient-to-r from-gray-50 to-white border rounded-lg p-4 shadow\"\r\n+          >\r\n+            <div className=\"flex justify-between items-center mb-2\">\r\n+              <p className=\"font-semibold text-lg text-gray-800\">Order #{order.id}</p>\r\n+              <span className=\"text-sm text-gray-500 capitalize\">Status: {order.status}</span>\r\n+            </div>\r\n+\r\n+            <p className=\"text-sm text-gray-600 mb-3\">\r\n+              {order.remainingMin > 0\r\n+                ? `Estimated Ready In: ${order.remainingMin} min`\r\n+                : `Almost Ready!`}\r\n+            </p>\r\n+\r\n+            {/* Bike or Food icon moving above progress bar */}\r\n+            <div className=\"relative h-8 mb-1\">\r\n+              <div\r\n+                className=\"absolute top-0 transition-all duration-500\"\r\n+                style={{\r\n+                  left: `calc(${order.progress}% - 16px)`,\r\n+                }}\r\n+              >\r\n+                {order.status === \"preparing\" ? (\r\n+                  <FaUtensils className=\"text-green-600 text-xl animate-pulse\" />\r\n+                ) : (\r\n+                  <FaBiking className=\"text-blue-500 text-xl animate-pulse\" />\r\n+                )}\r\n+              </div>\r\n+            </div>\r\n+\r\n+            {/* Progress Bar */}\r\n+            <div className=\"w-full bg-gray-300 h-3 rounded-full overflow-hidden\">\r\n+              <div\r\n+                className={`h-full rounded-full transition-all duration-500 ${\r\n+                  order.status === \"preparing\"\r\n+                    ? \"bg-green-500\"\r\n+                    : order.progress < 100\r\n+                    ? \"bg-blue-500\"\r\n+                    : \"bg-emerald-600\"\r\n+                }`}\r\n+                style={{ width: `${order.progress}%` }}\r\n+              />\r\n+            </div>\r\n+\r\n+            {/* Skeleton Pulse if progress is 0 */}\r\n+            {order.progress === 0 && (\r\n+              <div className=\"mt-2 h-3 bg-gray-200 animate-pulse rounded-full w-full\" />\r\n+            )}\r\n+          </div>\r\n+        ))}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default OrderTrackingTab;\r\n"
                },
                {
                    "date": 1749212095945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,128 @@\n+\"use client\";\r\n+\r\n+import { useEffect, useState } from \"react\";\r\n+import { GiMeal } from \"react-icons/fa\"; // Bike & Food icons\r\n+\r\n+interface Order {\r\n+  id: number;\r\n+  status: string;\r\n+  ordered_at: string;\r\n+  confirmed_at: string | null;\r\n+  preparing_at: string | null;\r\n+  preparing_duration: number | null;\r\n+  [key: string]: any;\r\n+}\r\n+\r\n+interface Props {\r\n+  trackingOrders: Order[];\r\n+}\r\n+\r\n+const OrderTrackingTab: React.FC<Props> = ({ trackingOrders }) => {\r\n+  const [progressData, setProgressData] = useState<Order[]>([]);\r\n+\r\n+  useEffect(() => {\r\n+    const interval = setInterval(() => {\r\n+      const updated = trackingOrders.map((order) => {\r\n+        const now = new Date().getTime();\r\n+        let baseTime = 0;\r\n+        let duration = 0;\r\n+        let progress = 0;\r\n+        let remainingMin = 0;\r\n+\r\n+        if (order.status === \"pending\") {\r\n+          baseTime = new Date(order.ordered_at).getTime();\r\n+          duration = 2 * 60 * 1000;\r\n+          progress = Math.min(100, ((now - baseTime) / duration) * 100);\r\n+          remainingMin = Math.max(0, 2 - Math.floor((now - baseTime) / 60000));\r\n+        } else if (order.status === \"confirmed\" && order.confirmed_at) {\r\n+          baseTime = new Date(order.confirmed_at).getTime();\r\n+          duration = 2 * 60 * 1000;\r\n+          progress = Math.min(100, ((now - baseTime) / duration) * 100);\r\n+          remainingMin = Math.max(0, 2 - Math.floor((now - baseTime) / 60000));\r\n+        } else if (order.status === \"preparing\" && order.preparing_at && order.preparing_duration) {\r\n+          baseTime = new Date(order.preparing_at).getTime();\r\n+          duration = order.preparing_duration * 60 * 1000;\r\n+          progress = Math.min(100, ((now - baseTime) / duration) * 100);\r\n+          remainingMin = Math.max(0, order.preparing_duration - Math.floor((now - baseTime) / 60000));\r\n+        }\r\n+\r\n+        return {\r\n+          ...order,\r\n+          progress,\r\n+          remainingMin,\r\n+        };\r\n+      });\r\n+\r\n+      setProgressData(updated);\r\n+    }, 1000);\r\n+\r\n+    return () => clearInterval(interval);\r\n+  }, [trackingOrders]);\r\n+\r\n+  return (\r\n+    <div className=\"bg-white shadow rounded-lg p-6\">\r\n+      <h2 className=\"text-2xl font-bold mb-4 text-blue-700\">📦 Track Your Order</h2>\r\n+\r\n+      {progressData.length === 0 && (\r\n+        <p className=\"text-gray-500 text-sm\">No active orders to track.</p>\r\n+      )}\r\n+\r\n+      <div className=\"flex flex-col space-y-5\">\r\n+        {progressData.map((order, index) => (\r\n+          <div\r\n+            key={order.id || index}\r\n+            className=\"relative bg-gradient-to-r from-gray-50 to-white border rounded-lg p-4 shadow\"\r\n+          >\r\n+            <div className=\"flex justify-between items-center mb-2\">\r\n+              <p className=\"font-semibold text-lg text-gray-800\">Order #{order.id}</p>\r\n+              <span className=\"text-sm text-gray-500 capitalize\">Status: {order.status}</span>\r\n+            </div>\r\n+\r\n+            <p className=\"text-sm text-gray-600 mb-3\">\r\n+              {order.remainingMin > 0\r\n+                ? `Estimated Ready In: ${order.remainingMin} min`\r\n+                : `Almost Ready!`}\r\n+            </p>\r\n+\r\n+            {/* Bike or Food icon moving above progress bar */}\r\n+            <div className=\"relative h-8 mb-1\">\r\n+              <div\r\n+                className=\"absolute top-0 transition-all duration-500\"\r\n+                style={{\r\n+                  left: `calc(${order.progress}% - 16px)`,\r\n+                }}\r\n+              >\r\n+                {order.status === \"preparing\" ? (\r\n+                  <FaUtensils className=\"text-green-600 text-xl animate-pulse\" />\r\n+                ) : (\r\n+                  <FaBiking className=\"text-blue-500 text-xl animate-pulse\" />\r\n+                )}\r\n+              </div>\r\n+            </div>\r\n+\r\n+            {/* Progress Bar */}\r\n+            <div className=\"w-full bg-gray-300 h-3 rounded-full overflow-hidden\">\r\n+              <div\r\n+                className={`h-full rounded-full transition-all duration-500 ${\r\n+                  order.status === \"preparing\"\r\n+                    ? \"bg-green-500\"\r\n+                    : order.progress < 100\r\n+                    ? \"bg-blue-500\"\r\n+                    : \"bg-emerald-600\"\r\n+                }`}\r\n+                style={{ width: `${order.progress}%` }}\r\n+              />\r\n+            </div>\r\n+\r\n+            {/* Skeleton Pulse if progress is 0 */}\r\n+            {order.progress === 0 && (\r\n+              <div className=\"mt-2 h-3 bg-gray-200 animate-pulse rounded-full w-full\" />\r\n+            )}\r\n+          </div>\r\n+        ))}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default OrderTrackingTab;\r\n"
                },
                {
                    "date": 1749212102516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \"use client\";\r\n \r\n import { useEffect, useState } from \"react\";\r\n-import { GiMeal } from \"react-icons/fa\"; // Bike & Food icons\r\n+import { GiMeal } from \"react-icons/gi\"; // Bike & Food icons\r\n \r\n interface Order {\r\n   id: number;\r\n   status: string;\r\n@@ -125,622 +125,4 @@\n   );\r\n };\r\n \r\n export default OrderTrackingTab;\r\n-\"use client\";\r\n-\r\n-import { useEffect, useState } from \"react\";\r\n-import { FaBiking, FaUtensils } from \"react-icons/fa\"; // Bike & Food icons\r\n-\r\n-interface Order {\r\n-  id: number;\r\n-  status: string;\r\n-  ordered_at: string;\r\n-  confirmed_at: string | null;\r\n-  preparing_at: string | null;\r\n-  preparing_duration: number | null;\r\n-  [key: string]: any;\r\n-}\r\n-\r\n-interface Props {\r\n-  trackingOrders: Order[];\r\n-}\r\n-\r\n-const OrderTrackingTab: React.FC<Props> = ({ trackingOrders }) => {\r\n-  const [progressData, setProgressData] = useState<Order[]>([]);\r\n-\r\n-  useEffect(() => {\r\n-    const interval = setInterval(() => {\r\n-      const updated = trackingOrders.map((order) => {\r\n-        const now = new Date().getTime();\r\n-        let baseTime = 0;\r\n-        let duration = 0;\r\n-        let progress = 0;\r\n-        let remainingMin = 0;\r\n-\r\n-        if (order.status === \"pending\") {\r\n-          baseTime = new Date(order.ordered_at).getTime();\r\n-          duration = 2 * 60 * 1000;\r\n-          progress = Math.min(100, ((now - baseTime) / duration) * 100);\r\n-          remainingMin = Math.max(0, 2 - Math.floor((now - baseTime) / 60000));\r\n-        } else if (order.status === \"confirmed\" && order.confirmed_at) {\r\n-          baseTime = new Date(order.confirmed_at).getTime();\r\n-          duration = 2 * 60 * 1000;\r\n-          progress = Math.min(100, ((now - baseTime) / duration) * 100);\r\n-          remainingMin = Math.max(0, 2 - Math.floor((now - baseTime) / 60000));\r\n-        } else if (order.status === \"preparing\" && order.preparing_at && order.preparing_duration) {\r\n-          baseTime = new Date(order.preparing_at).getTime();\r\n-          duration = order.preparing_duration * 60 * 1000;\r\n-          progress = Math.min(100, ((now - baseTime) / duration) * 100);\r\n-          remainingMin = Math.max(0, order.preparing_duration - Math.floor((now - baseTime) / 60000));\r\n-        }\r\n-\r\n-        return {\r\n-          ...order,\r\n-          progress,\r\n-          remainingMin,\r\n-        };\r\n-      });\r\n-\r\n-      setProgressData(updated);\r\n-    }, 1000);\r\n-\r\n-    return () => clearInterval(interval);\r\n-  }, [trackingOrders]);\r\n-\r\n-  return (\r\n-    <div className=\"bg-white shadow rounded-lg p-6\">\r\n-      <h2 className=\"text-2xl font-bold mb-4 text-blue-700\">📦 Track Your Order</h2>\r\n-\r\n-      {progressData.length === 0 && (\r\n-        <p className=\"text-gray-500 text-sm\">No active orders to track.</p>\r\n-      )}\r\n-\r\n-      <div className=\"flex flex-col space-y-5\">\r\n-        {progressData.map((order, index) => (\r\n-          <div\r\n-            key={order.id || index}\r\n-            className=\"relative bg-gradient-to-r from-gray-50 to-white border rounded-lg p-4 shadow\"\r\n-          >\r\n-            <div className=\"flex justify-between items-center mb-2\">\r\n-              <p className=\"font-semibold text-lg text-gray-800\">Order #{order.id}</p>\r\n-              <span className=\"text-sm text-gray-500 capitalize\">Status: {order.status}</span>\r\n-            </div>\r\n-\r\n-            <p className=\"text-sm text-gray-600 mb-3\">\r\n-              {order.remainingMin > 0\r\n-                ? `Estimated Ready In: ${order.remainingMin} min`\r\n-                : `Almost Ready!`}\r\n-            </p>\r\n-\r\n-            {/* Bike or Food icon moving above progress bar */}\r\n-            <div className=\"relative h-8 mb-1\">\r\n-              <div\r\n-                className=\"absolute top-0 transition-all duration-500\"\r\n-                style={{\r\n-                  left: `calc(${order.progress}% - 16px)`,\r\n-                }}\r\n-              >\r\n-                {order.status === \"preparing\" ? (\r\n-                  <FaUtensils className=\"text-green-600 text-xl animate-pulse\" />\r\n-                ) : (\r\n-                  <FaBiking className=\"text-blue-500 text-xl animate-pulse\" />\r\n-                )}\r\n-              </div>\r\n-            </div>\r\n-\r\n-            {/* Progress Bar */}\r\n-            <div className=\"w-full bg-gray-300 h-3 rounded-full overflow-hidden\">\r\n-              <div\r\n-                className={`h-full rounded-full transition-all duration-500 ${\r\n-                  order.status === \"preparing\"\r\n-                    ? \"bg-green-500\"\r\n-                    : order.progress < 100\r\n-                    ? \"bg-blue-500\"\r\n-                    : \"bg-emerald-600\"\r\n-                }`}\r\n-                style={{ width: `${order.progress}%` }}\r\n-              />\r\n-            </div>\r\n-\r\n-            {/* Skeleton Pulse if progress is 0 */}\r\n-            {order.progress === 0 && (\r\n-              <div className=\"mt-2 h-3 bg-gray-200 animate-pulse rounded-full w-full\" />\r\n-            )}\r\n-          </div>\r\n-        ))}\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default OrderTrackingTab;\r\n-\"use client\";\r\n-\r\n-import { useEffect, useState } from \"react\";\r\n-import { FaClock, FaCheckCircle, FaMotorcycle, FaUtensils } from \"react-icons/fa\";\r\n-\r\n-interface Order {\r\n-  id: number;\r\n-  status: string;\r\n-  ordered_at: string;\r\n-  confirmed_at?: string | null;\r\n-  preparing_at?: string | null;\r\n-  prepare_duration?: number; // in minutes (set by staff)\r\n-  [key: string]: any;\r\n-}\r\n-\r\n-interface Props {\r\n-  trackingOrders: Order[];\r\n-}\r\n-\r\n-const OrderTrackingTab: React.FC<Props> = ({ trackingOrders }) => {\r\n-  const [progressData, setProgressData] = useState<any[]>([]);\r\n-\r\n-  useEffect(() => {\r\n-    const interval = setInterval(() => {\r\n-      const updated = trackingOrders.map((order) => {\r\n-        const now = new Date().getTime();\r\n-        let stage = \"pending\";\r\n-        let startTime = new Date(order.ordered_at).getTime();\r\n-        let duration = 2 * 60 * 1000;\r\n-\r\n-        if (order.status === \"confirmed\" && order.confirmed_at) {\r\n-          stage = \"confirmed\";\r\n-          startTime = new Date(order.confirmed_at).getTime();\r\n-          duration = 2 * 60 * 1000;\r\n-        }\r\n-\r\n-        if (order.status === \"preparing\" && order.preparing_at && order.prepare_duration) {\r\n-          stage = \"preparing\";\r\n-          startTime = new Date(order.preparing_at).getTime();\r\n-          duration = order.prepare_duration * 60 * 1000;\r\n-        }\r\n-\r\n-        const elapsed = now - startTime;\r\n-        const progress = Math.min(100, (elapsed / duration) * 100);\r\n-        const remaining = Math.max(0, Math.ceil((duration - elapsed) / 60000));\r\n-\r\n-        return {\r\n-          ...order,\r\n-          stage,\r\n-          progress,\r\n-          remainingMin: remaining,\r\n-        };\r\n-      });\r\n-\r\n-      setProgressData(updated);\r\n-    }, 1000);\r\n-\r\n-    return () => clearInterval(interval);\r\n-  }, [trackingOrders]);\r\n-\r\n-  const getStageIcon = (stage: string) => {\r\n-    if (stage === \"pending\") return <FaClock className=\"text-yellow-500 mr-2\" />;\r\n-    if (stage === \"confirmed\") return <FaCheckCircle className=\"text-blue-500 mr-2\" />;\r\n-    if (stage === \"preparing\") return <FaUtensils className=\"text-green-600 mr-2\" />;\r\n-    return null;\r\n-  };\r\n-\r\n-  const getMovingEmoji = (stage: string) => {\r\n-    if (stage === \"preparing\") return \"🍽️\";\r\n-    if (stage === \"confirmed\") return \"🏍️\";\r\n-    if (stage === \"pending\") return \"⏳\";\r\n-    return \"\";\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"bg-white shadow rounded-lg p-6\">\r\n-      <h2 className=\"text-2xl font-bold mb-4 text-blue-700\">📦 Track Your Order</h2>\r\n-\r\n-      {progressData.length === 0 ? (\r\n-        <p className=\"text-gray-400 text-sm\">No active orders to track.</p>\r\n-      ) : (\r\n-        <div className=\"flex flex-col space-y-6\">\r\n-          {progressData.map((order, index) => (\r\n-            <div key={order.id || index} className=\"bg-gray-50 p-4 border rounded-lg shadow relative overflow-hidden\">\r\n-              <div className=\"flex justify-between items-center mb-2\">\r\n-                <div className=\"flex items-center\">\r\n-                  {getStageIcon(order.stage)}\r\n-                  <p className=\"font-semibold text-gray-800\">Order #{order.id}</p>\r\n-                </div>\r\n-                <span className=\"text-sm text-gray-600\">Status: {order.status}</span>\r\n-              </div>\r\n-\r\n-              <p className=\"text-sm text-gray-600 mb-1\">\r\n-                {order.remainingMin > 0\r\n-                  ? `Estimated Time: ${order.remainingMin} min`\r\n-                  : \"Almost Ready!\"}\r\n-              </p>\r\n-\r\n-              <div className=\"relative w-full bg-gray-300 h-3 rounded-full overflow-hidden mt-2\">\r\n-                <div\r\n-                  className={`h-full rounded-full transition-all duration-500 ${\r\n-                    order.progress < 100\r\n-                      ? order.stage === \"preparing\"\r\n-                        ? \"bg-green-500\"\r\n-                        : \"bg-blue-500\"\r\n-                      : \"bg-emerald-500\"\r\n-                  }`}\r\n-                  style={{ width: `${order.progress}%` }}\r\n-                />\r\n-\r\n-                {/* Moving emoji */}\r\n-                {order.progress > 0 && (\r\n-                  <div\r\n-                    className=\"absolute -top-5 text-xl transition-all duration-300\"\r\n-                    style={{ left: `calc(${order.progress}% - 10px)` }}\r\n-                  >\r\n-                    {getMovingEmoji(order.stage)}\r\n-                  </div>\r\n-                )}\r\n-\r\n-                {/* Skeleton shimmer for 0% progress */}\r\n-                {order.progress === 0 && (\r\n-                  <div className=\"absolute inset-0 animate-pulse bg-gradient-to-r from-transparent via-white to-transparent\" />\r\n-                )}\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default OrderTrackingTab;\r\n-\"use client\";\r\n-\r\n-import { useEffect, useState } from \"react\";\r\n-import { FaClock, FaCheckCircle, FaMotorcycle, FaUtensils } from \"react-icons/fa\";\r\n-\r\n-interface Order {\r\n-  id: number;\r\n-  status: string;\r\n-  ordered_at: string;\r\n-  confirmed_at?: string | null;\r\n-  preparing_at?: string | null;\r\n-  prepare_duration?: number; // in minutes (set by staff)\r\n-  [key: string]: any;\r\n-}\r\n-\r\n-interface Props {\r\n-  trackingOrders: Order[];\r\n-}\r\n-\r\n-const OrderTrackingTab: React.FC<Props> = ({ trackingOrders }) => {\r\n-  const [progressData, setProgressData] = useState<any[]>([]);\r\n-\r\n-  useEffect(() => {\r\n-    const interval = setInterval(() => {\r\n-      const updated = trackingOrders.map((order) => {\r\n-        const now = new Date().getTime();\r\n-        let stage = \"pending\";\r\n-        let startTime = new Date(order.ordered_at).getTime();\r\n-        let duration = 2 * 60 * 1000;\r\n-\r\n-        if (order.status === \"confirmed\" && order.confirmed_at) {\r\n-          stage = \"confirmed\";\r\n-          startTime = new Date(order.confirmed_at).getTime();\r\n-          duration = 2 * 60 * 1000;\r\n-        }\r\n-\r\n-        if (order.status === \"preparing\" && order.preparing_at && order.prepare_duration) {\r\n-          stage = \"preparing\";\r\n-          startTime = new Date(order.preparing_at).getTime();\r\n-          duration = order.prepare_duration * 60 * 1000;\r\n-        }\r\n-\r\n-        const elapsed = now - startTime;\r\n-        const progress = Math.min(100, (elapsed / duration) * 100);\r\n-        const remaining = Math.max(0, Math.ceil((duration - elapsed) / 60000));\r\n-\r\n-        return {\r\n-          ...order,\r\n-          stage,\r\n-          progress,\r\n-          remainingMin: remaining,\r\n-        };\r\n-      });\r\n-\r\n-      setProgressData(updated);\r\n-    }, 1000);\r\n-\r\n-    return () => clearInterval(interval);\r\n-  }, [trackingOrders]);\r\n-\r\n-  const getStageIcon = (stage: string) => {\r\n-    if (stage === \"pending\") return <FaClock className=\"text-yellow-500 mr-2\" />;\r\n-    if (stage === \"confirmed\") return <FaCheckCircle className=\"text-blue-500 mr-2\" />;\r\n-    if (stage === \"preparing\") return <FaUtensils className=\"text-green-600 mr-2\" />;\r\n-    return null;\r\n-  };\r\n-\r\n-  const getMovingEmoji = (stage: string) => {\r\n-    if (stage === \"preparing\") return \"🍽️\";\r\n-    if (stage === \"confirmed\") return \"🏍️\";\r\n-    if (stage === \"pending\") return \"⏳\";\r\n-    return \"\";\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"bg-white shadow rounded-lg p-6\">\r\n-      <h2 className=\"text-2xl font-bold mb-4 text-blue-700\">📦 Track Your Order</h2>\r\n-\r\n-      {progressData.length === 0 ? (\r\n-        <p className=\"text-gray-400 text-sm\">No active orders to track.</p>\r\n-      ) : (\r\n-        <div className=\"flex flex-col space-y-6\">\r\n-          {progressData.map((order, index) => (\r\n-            <div key={order.id || index} className=\"bg-gray-50 p-4 border rounded-lg shadow relative overflow-hidden\">\r\n-              <div className=\"flex justify-between items-center mb-2\">\r\n-                <div className=\"flex items-center\">\r\n-                  {getStageIcon(order.stage)}\r\n-                  <p className=\"font-semibold text-gray-800\">Order #{order.id}</p>\r\n-                </div>\r\n-                <span className=\"text-sm text-gray-600\">Status: {order.status}</span>\r\n-              </div>\r\n-\r\n-              <p className=\"text-sm text-gray-600 mb-1\">\r\n-                {order.remainingMin > 0\r\n-                  ? `Estimated Time: ${order.remainingMin} min`\r\n-                  : \"Almost Ready!\"}\r\n-              </p>\r\n-\r\n-              <div className=\"relative w-full bg-gray-300 h-3 rounded-full overflow-hidden mt-2\">\r\n-                <div\r\n-                  className={`h-full rounded-full transition-all duration-500 ${\r\n-                    order.progress < 100\r\n-                      ? order.stage === \"preparing\"\r\n-                        ? \"bg-green-500\"\r\n-                        : \"bg-blue-500\"\r\n-                      : \"bg-emerald-500\"\r\n-                  }`}\r\n-                  style={{ width: `${order.progress}%` }}\r\n-                />\r\n-\r\n-                {/* Moving emoji */}\r\n-                {order.progress > 0 && (\r\n-                  <div\r\n-                    className=\"absolute -top-5 text-xl transition-all duration-300\"\r\n-                    style={{ left: `calc(${order.progress}% - 10px)` }}\r\n-                  >\r\n-                    {getMovingEmoji(order.stage)}\r\n-                  </div>\r\n-                )}\r\n-\r\n-                {/* Skeleton shimmer for 0% progress */}\r\n-                {order.progress === 0 && (\r\n-                  <div className=\"absolute inset-0 animate-pulse bg-gradient-to-r from-transparent via-white to-transparent\" />\r\n-                )}\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default OrderTrackingTab;\r\n-\"use client\";\r\n-\r\n-import { useEffect, useState } from \"react\";\r\n-\r\n-interface Order {\r\n-  id: number;\r\n-  status: string;\r\n-  confirmed_at: string | null;\r\n-  [key: string]: any; // to support additional props\r\n-}\r\n-\r\n-interface Props {\r\n-  trackingOrders: Order[];\r\n-}\r\n-\r\n-const OrderTrackingTab: React.FC<Props> = ({ trackingOrders }) => {\r\n-  const [progressData, setProgressData] = useState<Order[]>([]);\r\n-\r\n-  useEffect(() => {\r\n-    const interval = setInterval(() => {\r\n-      const updated = trackingOrders.map(order => {\r\n-        if (!order.confirmed_at || order.status !== \"confirmed\")\r\n-          return { ...order, progress: 0, remainingMin: 10 };\r\n-\r\n-        const confirmedTime = new Date(order.confirmed_at).getTime();\r\n-        const now = new Date().getTime();\r\n-        const elapsed = now - confirmedTime;\r\n-        const total = 10 * 60 * 1000;\r\n-\r\n-        const progress = Math.min(100, (elapsed / total) * 100);\r\n-        const remaining = Math.max(0, 10 - Math.floor(elapsed / 60000));\r\n-\r\n-        return {\r\n-          ...order,\r\n-          progress,\r\n-          remainingMin: remaining,\r\n-        };\r\n-      });\r\n-\r\n-      setProgressData(updated);\r\n-    }, 1000);\r\n-\r\n-    return () => clearInterval(interval);\r\n-  }, [trackingOrders]);\r\n-\r\n-  return (\r\n-    <div className=\"bg-white shadow rounded-lg p-6\">\r\n-      <h2 className=\"text-2xl font-bold mb-4 text-blue-700\">📦 Track Your Order</h2>\r\n-\r\n-      {progressData.length === 0 && (\r\n-        <p className=\"text-gray-500 text-sm\">No active orders to track.</p>\r\n-      )}\r\n-\r\n-      <div className=\"flex flex-col space-y-5\">\r\n-        {progressData.map((order, index) => (\r\n-          <div\r\n-            key={order.id || index}\r\n-            className=\"bg-gradient-to-r from-gray-50 to-white border rounded-lg p-4 shadow\"\r\n-          >\r\n-            <div className=\"flex justify-between items-center mb-1\">\r\n-              <p className=\"font-semibold text-lg text-gray-800\">\r\n-                Order #{order.id}\r\n-              </p>\r\n-              <span className=\"text-sm text-gray-500\">\r\n-                Status: {order.status}\r\n-              </span>\r\n-            </div>\r\n-            <p className=\"text-sm text-gray-600\">\r\n-              {order.remainingMin > 0\r\n-                ? `Estimated Ready In: ${order.remainingMin} min`\r\n-                : `Almost Ready!`}\r\n-            </p>\r\n-            <div className=\"mt-2 w-full bg-gray-300 h-3 rounded-full overflow-hidden\">\r\n-              <div\r\n-                className={`h-full rounded-full transition-all duration-500 ${\r\n-                  order.progress < 100 ? \"bg-blue-500\" : \"bg-green-500\"\r\n-                }`}\r\n-                style={{ width: `${order.progress}%` }}\r\n-              />\r\n-            </div>\r\n-          </div>\r\n-        ))}\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default OrderTrackingTab;\r\n-\"use client\";\r\n-\r\n-import { useEffect, useState } from \"react\";\r\n-import { Clock, Loader2, CheckCircle2, Bike, CookingPot } from \"lucide-react\";\r\n-\r\n-interface Order {\r\n-  id: number;\r\n-  status: string;\r\n-  confirmed_at: string | null;\r\n-  [key: string]: any;\r\n-}\r\n-\r\n-interface Props {\r\n-  trackingOrders: Order[];\r\n-}\r\n-\r\n-const OrderTrackingTab: React.FC<Props> = ({ trackingOrders }) => {\r\n-  const [progressData, setProgressData] = useState<Order[]>([]);\r\n-\r\n- useEffect(() => {\r\n-  const interval = setInterval(() => {\r\n-    const updated = trackingOrders.map(order => {\r\n-      if (!order.confirmed_at) return { ...order, progress: 0, remainingMin: 15 };\r\n-\r\n-      const now = new Date().getTime();\r\n-      const confirmedTime = new Date(order.confirmed_at).getTime();\r\n-      const elapsed = now - confirmedTime;\r\n-\r\n-      let progress = 0;\r\n-      let remainingMin = 15;\r\n-\r\n-      if (order.status === \"confirmed\") {\r\n-        const totalConfirmed = 10 * 60 * 1000;\r\n-        progress = Math.min(50, (elapsed / totalConfirmed) * 50); // Max 50%\r\n-        remainingMin = Math.max(0, 10 - Math.floor(elapsed / 60000));\r\n-      }\r\n-\r\n-      if (order.status === \"preparing\") {\r\n-        const totalConfirmed = 10 * 60 * 1000;\r\n-        const totalPreparing = 5 * 60 * 1000;\r\n-        const preparingStart = confirmedTime + totalConfirmed;\r\n-        const preparingElapsed = now - preparingStart;\r\n-\r\n-        const additionalProgress = Math.min(50, (preparingElapsed / totalPreparing) * 50);\r\n-        progress = 50 + additionalProgress; // Start from 50%\r\n-        remainingMin = Math.max(0, 5 - Math.floor(preparingElapsed / 60000));\r\n-      }\r\n-\r\n-      progress = Math.min(progress, 100);\r\n-\r\n-      return {\r\n-        ...order,\r\n-        progress,\r\n-        remainingMin,\r\n-      };\r\n-    });\r\n-\r\n-    setProgressData(updated);\r\n-  }, 1000);\r\n-\r\n-  return () => clearInterval(interval);\r\n-}, [trackingOrders]);\r\n-\r\n-  const getStatusColor = (order: Order) => {\r\n-    if (order.status === \"preparing\") return \"bg-yellow-500\";\r\n-    if (order.progress >= 100) return \"bg-green-500\";\r\n-    return \"bg-blue-500\";\r\n-  };\r\n-\r\n-  const getStatusIcon = (status: string) => {\r\n-    switch (status) {\r\n-      case \"confirmed\":\r\n-        return <Clock className=\"w-4 h-4 text-blue-600\" />;\r\n-      case \"preparing\":\r\n-        return <CookingPot className=\"w-4 h-4 text-yellow-500\" />;\r\n-      case \"delivered\":\r\n-        return <CheckCircle2 className=\"w-4 h-4 text-green-600\" />;\r\n-      case \"cancelled\":\r\n-        return <Loader2 className=\"w-4 h-4 text-red-500 animate-spin\" />;\r\n-      default:\r\n-        return <Bike className=\"w-4 h-4 text-gray-400\" />;\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"bg-white shadow rounded-lg p-6\">\r\n-      <h2 className=\"text-2xl font-bold mb-4 text-blue-700\">📦 Track Your Order</h2>\r\n-\r\n-      {progressData.length === 0 && (\r\n-        <p className=\"text-gray-500 text-sm\">No active orders to track.</p>\r\n-      )}\r\n-\r\n-      <div className=\"flex flex-col space-y-5\">\r\n-        {progressData.map((order, index) => (\r\n-          <div\r\n-            key={order.id || index}\r\n-            className=\"bg-gradient-to-r from-gray-50 to-white border rounded-lg p-4 shadow\"\r\n-          >\r\n-            <div className=\"flex justify-between items-center mb-2\">\r\n-              <div className=\"flex items-center gap-2\">\r\n-                {getStatusIcon(order.status)}\r\n-                <p className=\"font-semibold text-lg text-gray-800\">\r\n-                  Order #{order.id}\r\n-                </p>\r\n-              </div>\r\n-              <span className=\"text-sm text-gray-500 capitalize\">\r\n-                {order.status}\r\n-              </span>\r\n-            </div>\r\n-\r\n-            <p className=\"text-sm text-gray-600\">\r\n-              {order.remainingMin > 0\r\n-                ? `Estimated Ready In: ${order.remainingMin} min`\r\n-                : `Almost Ready!`}\r\n-            </p>\r\n-\r\n-            <div className=\"mt-2 w-full bg-gray-300 h-3 rounded-full overflow-hidden relative\">\r\n-              {order.progress === 0 ? (\r\n-                <div className=\"absolute top-0 left-0 w-full h-full bg-gradient-to-r from-gray-300 via-gray-100 to-gray-300 animate-pulse rounded-full\" />\r\n-              ) : (\r\n-                <div\r\n-                  className={`h-full transition-all duration-500 rounded-full ${getStatusColor(order)}`}\r\n-                  style={{ width: `${order.progress}%` }}\r\n-                />\r\n-              )}\r\n-            </div>\r\n-          </div>\r\n-        ))}\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default OrderTrackingTab;\r\n"
                },
                {
                    "date": 1749212134446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n                   left: `calc(${order.progress}% - 16px)`,\r\n                 }}\r\n               >\r\n                 {order.status === \"preparing\" ? (\r\n-                  <FaUtensils className=\"text-green-600 text-xl animate-pulse\" />\r\n+                  <GiMeal className=\"text-green-600 text-xl animate-pulse\" />\r\n                 ) : (\r\n                   <FaBiking className=\"text-blue-500 text-xl animate-pulse\" />\r\n                 )}\r\n               </div>\r\n"
                },
                {
                    "date": 1749212146576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n               >\r\n                 {order.status === \"preparing\" ? (\r\n                   <GiMeal className=\"text-green-600 text-xl animate-pulse\" />\r\n                 ) : (\r\n-                  <FaBiking className=\"text-blue-500 text-xl animate-pulse\" />\r\n+                  <GiMeal className=\"text-blue-500 text-xl animate-pulse\" />\r\n                 )}\r\n               </div>\r\n             </div>\r\n \r\n"
                },
                {
                    "date": 1749212170824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n                   left: `calc(${order.progress}% - 16px)`,\r\n                 }}\r\n               >\r\n                 {order.status === \"preparing\" ? (\r\n-                  <GiMeal className=\"text-green-600 text-xl animate-pulse\" />\r\n+                  <GiMeal className=\" text-xl animate-pulse\" />\r\n                 ) : (\r\n                   <GiMeal className=\"text-blue-500 text-xl animate-pulse\" />\r\n                 )}\r\n               </div>\r\n"
                },
                {
                    "date": 1749212181177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n                   left: `calc(${order.progress}% - 16px)`,\r\n                 }}\r\n               >\r\n                 {order.status === \"preparing\" ? (\r\n-                  <GiMeal className=\" text-xl animate-pulse\" />\r\n+                  <GiMeal className=\"text-green-600 text-xl animate-pulse\" />\r\n                 ) : (\r\n                   <GiMeal className=\"text-blue-500 text-xl animate-pulse\" />\r\n                 )}\r\n               </div>\r\n"
                },
                {
                    "date": 1749212222966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n               >\r\n                 {order.status === \"preparing\" ? (\r\n                   <GiMeal className=\"text-green-600 text-xl animate-pulse\" />\r\n                 ) : (\r\n-                  <GiMeal className=\"text-blue-500 text-xl animate-pulse\" />\r\n+                  <TbPackage className=\"text-blue-500 text-xl animate-pulse\" />\r\n                 )}\r\n               </div>\r\n             </div>\r\n \r\n"
                },
                {
                    "date": 1749212232049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \"use client\";\r\n \r\n import { useEffect, useState } from \"react\";\r\n-import { GiMeal } from \"react-icons/gi\"; // Bike & Food icons\r\n+import { TbPackage } from \"react-icons/gi\"; // Bike & Food icons\r\n \r\n interface Order {\r\n   id: number;\r\n   status: string;\r\n@@ -92,9 +92,9 @@\n                   left: `calc(${order.progress}% - 16px)`,\r\n                 }}\r\n               >\r\n                 {order.status === \"preparing\" ? (\r\n-                  <GiMeal className=\"text-green-600 text-xl animate-pulse\" />\r\n+                  <TbPackage className=\"text-green-600 text-xl animate-pulse\" />\r\n                 ) : (\r\n                   <TbPackage className=\"text-blue-500 text-xl animate-pulse\" />\r\n                 )}\r\n               </div>\r\n"
                },
                {
                    "date": 1749212271500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,128 @@\n+\"use client\";\r\n+\r\n+import { useEffect, useState } from \"react\";\r\n+import { TbPackage } from \"react-icons/tb\"; // Bike & Food icons\r\n+\r\n+interface Order {\r\n+  id: number;\r\n+  status: string;\r\n+  ordered_at: string;\r\n+  confirmed_at: string | null;\r\n+  preparing_at: string | null;\r\n+  preparing_duration: number | null;\r\n+  [key: string]: any;\r\n+}\r\n+\r\n+interface Props {\r\n+  trackingOrders: Order[];\r\n+}\r\n+\r\n+const OrderTrackingTab: React.FC<Props> = ({ trackingOrders }) => {\r\n+  const [progressData, setProgressData] = useState<Order[]>([]);\r\n+\r\n+  useEffect(() => {\r\n+    const interval = setInterval(() => {\r\n+      const updated = trackingOrders.map((order) => {\r\n+        const now = new Date().getTime();\r\n+        let baseTime = 0;\r\n+        let duration = 0;\r\n+        let progress = 0;\r\n+        let remainingMin = 0;\r\n+\r\n+        if (order.status === \"pending\") {\r\n+          baseTime = new Date(order.ordered_at).getTime();\r\n+          duration = 2 * 60 * 1000;\r\n+          progress = Math.min(100, ((now - baseTime) / duration) * 100);\r\n+          remainingMin = Math.max(0, 2 - Math.floor((now - baseTime) / 60000));\r\n+        } else if (order.status === \"confirmed\" && order.confirmed_at) {\r\n+          baseTime = new Date(order.confirmed_at).getTime();\r\n+          duration = 2 * 60 * 1000;\r\n+          progress = Math.min(100, ((now - baseTime) / duration) * 100);\r\n+          remainingMin = Math.max(0, 2 - Math.floor((now - baseTime) / 60000));\r\n+        } else if (order.status === \"preparing\" && order.preparing_at && order.preparing_duration) {\r\n+          baseTime = new Date(order.preparing_at).getTime();\r\n+          duration = order.preparing_duration * 60 * 1000;\r\n+          progress = Math.min(100, ((now - baseTime) / duration) * 100);\r\n+          remainingMin = Math.max(0, order.preparing_duration - Math.floor((now - baseTime) / 60000));\r\n+        }\r\n+\r\n+        return {\r\n+          ...order,\r\n+          progress,\r\n+          remainingMin,\r\n+        };\r\n+      });\r\n+\r\n+      setProgressData(updated);\r\n+    }, 1000);\r\n+\r\n+    return () => clearInterval(interval);\r\n+  }, [trackingOrders]);\r\n+\r\n+  return (\r\n+    <div className=\"bg-white shadow rounded-lg p-6\">\r\n+      <h2 className=\"text-2xl font-bold mb-4 text-blue-700\">📦 Track Your Order</h2>\r\n+\r\n+      {progressData.length === 0 && (\r\n+        <p className=\"text-gray-500 text-sm\">No active orders to track.</p>\r\n+      )}\r\n+\r\n+      <div className=\"flex flex-col space-y-5\">\r\n+        {progressData.map((order, index) => (\r\n+          <div\r\n+            key={order.id || index}\r\n+            className=\"relative bg-gradient-to-r from-gray-50 to-white border rounded-lg p-4 shadow\"\r\n+          >\r\n+            <div className=\"flex justify-between items-center mb-2\">\r\n+              <p className=\"font-semibold text-lg text-gray-800\">Order #{order.id}</p>\r\n+              <span className=\"text-sm text-gray-500 capitalize\">Status: {order.status}</span>\r\n+            </div>\r\n+\r\n+            <p className=\"text-sm text-gray-600 mb-3\">\r\n+              {order.remainingMin > 0\r\n+                ? `Estimated Ready In: ${order.remainingMin} min`\r\n+                : `Almost Ready!`}\r\n+            </p>\r\n+\r\n+            {/* Bike or Food icon moving above progress bar */}\r\n+            <div className=\"relative h-8 mb-0.5\">\r\n+              <div\r\n+                className=\"absolute top-0 transition-all duration-500\"\r\n+                style={{\r\n+                  left: `calc(${order.progress}% - 16px)`,\r\n+                }}\r\n+              >\r\n+                {order.status === \"preparing\" ? (\r\n+                  <TbPackage className=\"text-green-600 text-xl animate-pulse\" />\r\n+                ) : (\r\n+                  <TbPackage className=\"text-blue-500 text-xl animate-pulse\" />\r\n+                )}\r\n+              </div>\r\n+            </div>\r\n+\r\n+            {/* Progress Bar */}\r\n+            <div className=\"w-full bg-gray-300 h-3 rounded-full overflow-hidden\">\r\n+              <div\r\n+                className={`h-full rounded-full transition-all duration-500 ${\r\n+                  order.status === \"preparing\"\r\n+                    ? \"bg-green-500\"\r\n+                    : order.progress < 100\r\n+                    ? \"bg-blue-500\"\r\n+                    : \"bg-emerald-600\"\r\n+                }`}\r\n+                style={{ width: `${order.progress}%` }}\r\n+              />\r\n+            </div>\r\n+\r\n+            {/* Skeleton Pulse if progress is 0 */}\r\n+            {order.progress === 0 && (\r\n+              <div className=\"mt-2 h-3 bg-gray-200 animate-pulse rounded-full w-full\" />\r\n+            )}\r\n+          </div>\r\n+        ))}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default OrderTrackingTab;\r\n"
                },
                {
                    "date": 1749212295967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,132 +125,4 @@\n   );\r\n };\r\n \r\n export default OrderTrackingTab;\r\n-\"use client\";\r\n-\r\n-import { useEffect, useState } from \"react\";\r\n-import { TbPackage } from \"react-icons/gi\"; // Bike & Food icons\r\n-\r\n-interface Order {\r\n-  id: number;\r\n-  status: string;\r\n-  ordered_at: string;\r\n-  confirmed_at: string | null;\r\n-  preparing_at: string | null;\r\n-  preparing_duration: number | null;\r\n-  [key: string]: any;\r\n-}\r\n-\r\n-interface Props {\r\n-  trackingOrders: Order[];\r\n-}\r\n-\r\n-const OrderTrackingTab: React.FC<Props> = ({ trackingOrders }) => {\r\n-  const [progressData, setProgressData] = useState<Order[]>([]);\r\n-\r\n-  useEffect(() => {\r\n-    const interval = setInterval(() => {\r\n-      const updated = trackingOrders.map((order) => {\r\n-        const now = new Date().getTime();\r\n-        let baseTime = 0;\r\n-        let duration = 0;\r\n-        let progress = 0;\r\n-        let remainingMin = 0;\r\n-\r\n-        if (order.status === \"pending\") {\r\n-          baseTime = new Date(order.ordered_at).getTime();\r\n-          duration = 2 * 60 * 1000;\r\n-          progress = Math.min(100, ((now - baseTime) / duration) * 100);\r\n-          remainingMin = Math.max(0, 2 - Math.floor((now - baseTime) / 60000));\r\n-        } else if (order.status === \"confirmed\" && order.confirmed_at) {\r\n-          baseTime = new Date(order.confirmed_at).getTime();\r\n-          duration = 2 * 60 * 1000;\r\n-          progress = Math.min(100, ((now - baseTime) / duration) * 100);\r\n-          remainingMin = Math.max(0, 2 - Math.floor((now - baseTime) / 60000));\r\n-        } else if (order.status === \"preparing\" && order.preparing_at && order.preparing_duration) {\r\n-          baseTime = new Date(order.preparing_at).getTime();\r\n-          duration = order.preparing_duration * 60 * 1000;\r\n-          progress = Math.min(100, ((now - baseTime) / duration) * 100);\r\n-          remainingMin = Math.max(0, order.preparing_duration - Math.floor((now - baseTime) / 60000));\r\n-        }\r\n-\r\n-        return {\r\n-          ...order,\r\n-          progress,\r\n-          remainingMin,\r\n-        };\r\n-      });\r\n-\r\n-      setProgressData(updated);\r\n-    }, 1000);\r\n-\r\n-    return () => clearInterval(interval);\r\n-  }, [trackingOrders]);\r\n-\r\n-  return (\r\n-    <div className=\"bg-white shadow rounded-lg p-6\">\r\n-      <h2 className=\"text-2xl font-bold mb-4 text-blue-700\">📦 Track Your Order</h2>\r\n-\r\n-      {progressData.length === 0 && (\r\n-        <p className=\"text-gray-500 text-sm\">No active orders to track.</p>\r\n-      )}\r\n-\r\n-      <div className=\"flex flex-col space-y-5\">\r\n-        {progressData.map((order, index) => (\r\n-          <div\r\n-            key={order.id || index}\r\n-            className=\"relative bg-gradient-to-r from-gray-50 to-white border rounded-lg p-4 shadow\"\r\n-          >\r\n-            <div className=\"flex justify-between items-center mb-2\">\r\n-              <p className=\"font-semibold text-lg text-gray-800\">Order #{order.id}</p>\r\n-              <span className=\"text-sm text-gray-500 capitalize\">Status: {order.status}</span>\r\n-            </div>\r\n-\r\n-            <p className=\"text-sm text-gray-600 mb-3\">\r\n-              {order.remainingMin > 0\r\n-                ? `Estimated Ready In: ${order.remainingMin} min`\r\n-                : `Almost Ready!`}\r\n-            </p>\r\n-\r\n-            {/* Bike or Food icon moving above progress bar */}\r\n-            <div className=\"relative h-8 mb-1\">\r\n-              <div\r\n-                className=\"absolute top-0 transition-all duration-500\"\r\n-                style={{\r\n-                  left: `calc(${order.progress}% - 16px)`,\r\n-                }}\r\n-              >\r\n-                {order.status === \"preparing\" ? (\r\n-                  <TbPackage className=\"text-green-600 text-xl animate-pulse\" />\r\n-                ) : (\r\n-                  <TbPackage className=\"text-blue-500 text-xl animate-pulse\" />\r\n-                )}\r\n-              </div>\r\n-            </div>\r\n-\r\n-            {/* Progress Bar */}\r\n-            <div className=\"w-full bg-gray-300 h-3 rounded-full overflow-hidden\">\r\n-              <div\r\n-                className={`h-full rounded-full transition-all duration-500 ${\r\n-                  order.status === \"preparing\"\r\n-                    ? \"bg-green-500\"\r\n-                    : order.progress < 100\r\n-                    ? \"bg-blue-500\"\r\n-                    : \"bg-emerald-600\"\r\n-                }`}\r\n-                style={{ width: `${order.progress}%` }}\r\n-              />\r\n-            </div>\r\n-\r\n-            {/* Skeleton Pulse if progress is 0 */}\r\n-            {order.progress === 0 && (\r\n-              <div className=\"mt-2 h-3 bg-gray-200 animate-pulse rounded-full w-full\" />\r\n-            )}\r\n-          </div>\r\n-        ))}\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default OrderTrackingTab;\r\n"
                },
                {
                    "date": 1749212690669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,18 @@\n \"use client\";\r\n \r\n import { useEffect, useState } from \"react\";\r\n-import { TbPackage } from \"react-icons/tb\"; // Bike & Food icons\r\n+import { TbPackage } from \"react-icons/tb\"; // Use better food/bike icon later\r\n \r\n interface Order {\r\n   id: number;\r\n   status: string;\r\n   ordered_at: string;\r\n   confirmed_at: string | null;\r\n   preparing_at: string | null;\r\n-  preparing_duration: number | null;\r\n+  prepare_duration: number | null; // ✅ updated from 'preparing_duration'\r\n+  progress?: number;\r\n+  remainingMin?: number;\r\n   [key: string]: any;\r\n }\r\n \r\n interface Props {\r\n@@ -21,10 +23,10 @@\n   const [progressData, setProgressData] = useState<Order[]>([]);\r\n \r\n   useEffect(() => {\r\n     const interval = setInterval(() => {\r\n+      const now = new Date().getTime();\r\n       const updated = trackingOrders.map((order) => {\r\n-        const now = new Date().getTime();\r\n         let baseTime = 0;\r\n         let duration = 0;\r\n         let progress = 0;\r\n         let remainingMin = 0;\r\n@@ -38,13 +40,13 @@\n           baseTime = new Date(order.confirmed_at).getTime();\r\n           duration = 2 * 60 * 1000;\r\n           progress = Math.min(100, ((now - baseTime) / duration) * 100);\r\n           remainingMin = Math.max(0, 2 - Math.floor((now - baseTime) / 60000));\r\n-        } else if (order.status === \"preparing\" && order.preparing_at && order.preparing_duration) {\r\n+        } else if (order.status === \"preparing\" && order.preparing_at && order.prepare_duration) {\r\n           baseTime = new Date(order.preparing_at).getTime();\r\n-          duration = order.preparing_duration * 60 * 1000;\r\n+          duration = order.prepare_duration * 60 * 1000;\r\n           progress = Math.min(100, ((now - baseTime) / duration) * 100);\r\n-          remainingMin = Math.max(0, order.preparing_duration - Math.floor((now - baseTime) / 60000));\r\n+          remainingMin = Math.max(0, order.prepare_duration - Math.floor((now - baseTime) / 60000));\r\n         }\r\n \r\n         return {\r\n           ...order,\r\n@@ -78,26 +80,22 @@\n               <span className=\"text-sm text-gray-500 capitalize\">Status: {order.status}</span>\r\n             </div>\r\n \r\n             <p className=\"text-sm text-gray-600 mb-3\">\r\n-              {order.remainingMin > 0\r\n+              {order.remainingMin! > 0\r\n                 ? `Estimated Ready In: ${order.remainingMin} min`\r\n                 : `Almost Ready!`}\r\n             </p>\r\n \r\n-            {/* Bike or Food icon moving above progress bar */}\r\n-            <div className=\"relative h-8 mb-0.5\">\r\n+            {/* Moving Icon */}\r\n+            <div className=\"relative h-8 mb-1\">\r\n               <div\r\n                 className=\"absolute top-0 transition-all duration-500\"\r\n                 style={{\r\n                   left: `calc(${order.progress}% - 16px)`,\r\n                 }}\r\n               >\r\n-                {order.status === \"preparing\" ? (\r\n-                  <TbPackage className=\"text-green-600 text-xl animate-pulse\" />\r\n-                ) : (\r\n-                  <TbPackage className=\"text-blue-500 text-xl animate-pulse\" />\r\n-                )}\r\n+                <TbPackage className={`text-xl ${order.status === \"preparing\" ? \"text-green-600\" : \"text-blue-500\"} animate-pulse`} />\r\n               </div>\r\n             </div>\r\n \r\n             {/* Progress Bar */}\r\n@@ -105,17 +103,16 @@\n               <div\r\n                 className={`h-full rounded-full transition-all duration-500 ${\r\n                   order.status === \"preparing\"\r\n                     ? \"bg-green-500\"\r\n-                    : order.progress < 100\r\n+                    : order.progress! < 100\r\n                     ? \"bg-blue-500\"\r\n                     : \"bg-emerald-600\"\r\n                 }`}\r\n                 style={{ width: `${order.progress}%` }}\r\n               />\r\n             </div>\r\n \r\n-            {/* Skeleton Pulse if progress is 0 */}\r\n             {order.progress === 0 && (\r\n               <div className=\"mt-2 h-3 bg-gray-200 animate-pulse rounded-full w-full\" />\r\n             )}\r\n           </div>\r\n"
                },
                {
                    "date": 1749212866047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,16 @@\n \"use client\";\r\n \r\n import { useEffect, useState } from \"react\";\r\n-import { TbPackage } from \"react-icons/tb\"; // Use better food/bike icon later\r\n+import { TbPackage } from \"react-icons/tb\";\r\n \r\n interface Order {\r\n   id: number;\r\n   status: string;\r\n   ordered_at: string;\r\n   confirmed_at: string | null;\r\n   preparing_at: string | null;\r\n-  prepare_duration: number | null; // ✅ updated from 'preparing_duration'\r\n+  prepare_duration: number | null;\r\n   progress?: number;\r\n   remainingMin?: number;\r\n   [key: string]: any;\r\n }\r\n@@ -24,31 +24,35 @@\n \r\n   useEffect(() => {\r\n     const interval = setInterval(() => {\r\n       const now = new Date().getTime();\r\n+\r\n       const updated = trackingOrders.map((order) => {\r\n-        let baseTime = 0;\r\n-        let duration = 0;\r\n         let progress = 0;\r\n         let remainingMin = 0;\r\n \r\n+        const orderedAt = new Date(order.ordered_at).getTime();\r\n+\r\n         if (order.status === \"pending\") {\r\n-          baseTime = new Date(order.ordered_at).getTime();\r\n-          duration = 2 * 60 * 1000;\r\n-          progress = Math.min(100, ((now - baseTime) / duration) * 100);\r\n-          remainingMin = Math.max(0, 2 - Math.floor((now - baseTime) / 60000));\r\n-        } else if (order.status === \"confirmed\" && order.confirmed_at) {\r\n-          baseTime = new Date(order.confirmed_at).getTime();\r\n-          duration = 2 * 60 * 1000;\r\n-          progress = Math.min(100, ((now - baseTime) / duration) * 100);\r\n-          remainingMin = Math.max(0, 2 - Math.floor((now - baseTime) / 60000));\r\n-        } else if (order.status === \"preparing\" && order.preparing_at && order.prepare_duration) {\r\n-          baseTime = new Date(order.preparing_at).getTime();\r\n-          duration = order.prepare_duration * 60 * 1000;\r\n-          progress = Math.min(100, ((now - baseTime) / duration) * 100);\r\n-          remainingMin = Math.max(0, order.prepare_duration - Math.floor((now - baseTime) / 60000));\r\n+          const duration = 2 * 60 * 1000;\r\n+          progress = Math.min(100, ((now - orderedAt) / duration) * 100);\r\n+          remainingMin = Math.max(0, 2 - Math.floor((now - orderedAt) / 60000));\r\n         }\r\n \r\n+        else if (order.status === \"confirmed\" && order.confirmed_at) {\r\n+          const confirmedAt = new Date(order.confirmed_at).getTime();\r\n+          const duration = 2 * 60 * 1000;\r\n+          progress = Math.min(100, ((now - confirmedAt) / duration) * 100);\r\n+          remainingMin = Math.max(0, 2 - Math.floor((now - confirmedAt) / 60000));\r\n+        }\r\n+\r\n+        else if (order.status === \"preparing\" && order.preparing_at && order.prepare_duration) {\r\n+          const preparingAt = new Date(order.preparing_at).getTime();\r\n+          const duration = order.prepare_duration * 60 * 1000;\r\n+          progress = Math.min(100, ((now - preparingAt) / duration) * 100);\r\n+          remainingMin = Math.max(0, order.prepare_duration - Math.floor((now - preparingAt) / 60000));\r\n+        }\r\n+\r\n         return {\r\n           ...order,\r\n           progress,\r\n           remainingMin,\r\n@@ -111,8 +115,9 @@\n                 style={{ width: `${order.progress}%` }}\r\n               />\r\n             </div>\r\n \r\n+            {/* Skeleton Pulse */}\r\n             {order.progress === 0 && (\r\n               <div className=\"mt-2 h-3 bg-gray-200 animate-pulse rounded-full w-full\" />\r\n             )}\r\n           </div>\r\n"
                },
                {
                    "date": 1749213203081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,152 @@\n+\"use client\";\r\n+\r\n+import { useEffect, useState } from \"react\";\r\n+import { TbPackage } from \"react-icons/tb\";\r\n+\r\n+interface Order {\r\n+  id: number;\r\n+  status: string;\r\n+  ordered_at: string;\r\n+  confirmed_at: string | null;\r\n+  preparing_at: string | null;\r\n+  prepare_duration: number | null;\r\n+  progress?: number;\r\n+  remainingMin?: number;\r\n+  [key: string]: any;\r\n+}\r\n+\r\n+interface Props {\r\n+  trackingOrders: Order[];\r\n+}\r\n+\r\n+const OrderTrackingTab: React.FC<Props> = ({ trackingOrders }) => {\r\n+  const [progressData, setProgressData] = useState<Order[]>([]);\r\n+\r\n+  useEffect(() => {\r\n+    const interval = setInterval(() => {\r\n+      const now = new Date().getTime();\r\n+\r\n+      const updated = trackingOrders.map((order) => {\r\n+        let progress = 0;\r\n+        let remainingMin = 0;\r\n+\r\n+        const orderedAt = new Date(order.ordered_at).getTime();\r\n+\r\n+        if (order.status === \"pending\") {\r\n+          const duration = 2 * 60 * 1000;\r\n+          progress = Math.min(100, ((now - orderedAt) / duration) * 100);\r\n+          remainingMin = Math.max(0, 2 - Math.floor((now - orderedAt) / 60000));\r\n+        } else if (order.status === \"confirmed\" && order.confirmed_at) {\r\n+          const confirmedAt = new Date(order.confirmed_at).getTime();\r\n+          const duration = 2 * 60 * 1000;\r\n+          progress = Math.min(100, ((now - confirmedAt) / duration) * 100);\r\n+          remainingMin = Math.max(0, 2 - Math.floor((now - confirmedAt) / 60000));\r\n+        } else if (\r\n+          order.status === \"preparing\" &&\r\n+          order.preparing_at &&\r\n+          order.prepare_duration\r\n+        ) {\r\n+          const preparingAt = new Date(order.preparing_at).getTime();\r\n+          const duration = order.prepare_duration * 60 * 1000;\r\n+          progress = Math.min(100, ((now - preparingAt) / duration) * 100);\r\n+          remainingMin = Math.max(\r\n+            0,\r\n+            order.prepare_duration - Math.floor((now - preparingAt) / 60000)\r\n+          );\r\n+        }\r\n+\r\n+        return {\r\n+          ...order,\r\n+          progress,\r\n+          remainingMin,\r\n+        };\r\n+      });\r\n+\r\n+      setProgressData(updated);\r\n+    }, 1000);\r\n+\r\n+    return () => clearInterval(interval);\r\n+  }, [trackingOrders]);\r\n+\r\n+  const getStatusMessage = (order: Order): string => {\r\n+    if (order.status === \"pending\") {\r\n+      return order.remainingMin! > 0\r\n+        ? `✅ Estimated time to be confirmed: ${order.remainingMin} min`\r\n+        : `✅ Confirming shortly...`;\r\n+    } else if (order.status === \"confirmed\") {\r\n+      return order.remainingMin! > 0\r\n+        ? `⏳ Estimated time for preparation: ${order.remainingMin} min`\r\n+        : `🍳 Preparing will begin shortly...`;\r\n+    } else if (order.status === \"preparing\") {\r\n+      return order.remainingMin! > 0\r\n+        ? `🍽️ Estimated delivery time: ${order.remainingMin} min`\r\n+        : `🚚 Out for delivery!`;\r\n+    }\r\n+    return \"\";\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"bg-white shadow rounded-lg p-6\">\r\n+      <h2 className=\"text-2xl font-bold mb-4 text-blue-700\">📦 Track Your Order</h2>\r\n+\r\n+      {progressData.length === 0 && (\r\n+        <p className=\"text-gray-500 text-sm\">No active orders to track.</p>\r\n+      )}\r\n+\r\n+      <div className=\"flex flex-col space-y-5\">\r\n+        {progressData.map((order, index) => (\r\n+          <div\r\n+            key={order.id || index}\r\n+            className=\"relative bg-gradient-to-r from-gray-50 to-white border rounded-lg p-4 shadow\"\r\n+          >\r\n+            <div className=\"flex justify-between items-center mb-2\">\r\n+              <p className=\"font-semibold text-lg text-gray-800\">Order #{order.id}</p>\r\n+              <span className=\"text-sm text-gray-500 capitalize\">Status: {order.status}</span>\r\n+            </div>\r\n+\r\n+            <p className=\"text-sm text-gray-600 mb-3\">{getStatusMessage(order)}</p>\r\n+\r\n+            {/* Moving Icon */}\r\n+            <div className=\"relative h-8 mb-1\">\r\n+              <div\r\n+                className=\"absolute top-0 transition-all duration-500\"\r\n+                style={{\r\n+                  left: `calc(${order.progress}% - 16px)`,\r\n+                }}\r\n+              >\r\n+                <TbPackage\r\n+                  className={`text-xl ${\r\n+                    order.status === \"preparing\"\r\n+                      ? \"text-green-600\"\r\n+                      : \"text-blue-500\"\r\n+                  } animate-pulse`}\r\n+                />\r\n+              </div>\r\n+            </div>\r\n+\r\n+            {/* Progress Bar */}\r\n+            <div className=\"w-full bg-gray-300 h-3 rounded-full overflow-hidden\">\r\n+              <div\r\n+                className={`h-full rounded-full transition-all duration-500 ${\r\n+                  order.status === \"preparing\"\r\n+                    ? \"bg-green-500\"\r\n+                    : order.progress! < 100\r\n+                    ? \"bg-blue-500\"\r\n+                    : \"bg-emerald-600\"\r\n+                }`}\r\n+                style={{ width: `${order.progress}%` }}\r\n+              />\r\n+            </div>\r\n+\r\n+            {/* Skeleton Pulse */}\r\n+            {order.progress === 0 && (\r\n+              <div className=\"mt-2 h-3 bg-gray-200 animate-pulse rounded-full w-full\" />\r\n+            )}\r\n+          </div>\r\n+        ))}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default OrderTrackingTab;\r\n"
                },
                {
                    "date": 1749213357647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n       <div className=\"flex flex-col space-y-5\">\r\n         {progressData.map((order, index) => (\r\n           <div\r\n             key={order.id || index}\r\n-            className=\"relative bg-gradient-to-r from-gray-50 to-white border rounded-lg p-4 shadow\"\r\n+            className=\"relative bg-gradient-to-r from-gray-50 to-white shadow rounded-lg p-4 shadow\"\r\n           >\r\n             <div className=\"flex justify-between items-center mb-2\">\r\n               <p className=\"font-semibold text-lg text-gray-800\">Order #{order.id}</p>\r\n               <span className=\"text-sm text-gray-500 capitalize\">Status: {order.status}</span>\r\n@@ -149,134 +149,4 @@\n   );\r\n };\r\n \r\n export default OrderTrackingTab;\r\n-\"use client\";\r\n-\r\n-import { useEffect, useState } from \"react\";\r\n-import { TbPackage } from \"react-icons/tb\";\r\n-\r\n-interface Order {\r\n-  id: number;\r\n-  status: string;\r\n-  ordered_at: string;\r\n-  confirmed_at: string | null;\r\n-  preparing_at: string | null;\r\n-  prepare_duration: number | null;\r\n-  progress?: number;\r\n-  remainingMin?: number;\r\n-  [key: string]: any;\r\n-}\r\n-\r\n-interface Props {\r\n-  trackingOrders: Order[];\r\n-}\r\n-\r\n-const OrderTrackingTab: React.FC<Props> = ({ trackingOrders }) => {\r\n-  const [progressData, setProgressData] = useState<Order[]>([]);\r\n-\r\n-  useEffect(() => {\r\n-    const interval = setInterval(() => {\r\n-      const now = new Date().getTime();\r\n-\r\n-      const updated = trackingOrders.map((order) => {\r\n-        let progress = 0;\r\n-        let remainingMin = 0;\r\n-\r\n-        const orderedAt = new Date(order.ordered_at).getTime();\r\n-\r\n-        if (order.status === \"pending\") {\r\n-          const duration = 2 * 60 * 1000;\r\n-          progress = Math.min(100, ((now - orderedAt) / duration) * 100);\r\n-          remainingMin = Math.max(0, 2 - Math.floor((now - orderedAt) / 60000));\r\n-        }\r\n-\r\n-        else if (order.status === \"confirmed\" && order.confirmed_at) {\r\n-          const confirmedAt = new Date(order.confirmed_at).getTime();\r\n-          const duration = 2 * 60 * 1000;\r\n-          progress = Math.min(100, ((now - confirmedAt) / duration) * 100);\r\n-          remainingMin = Math.max(0, 2 - Math.floor((now - confirmedAt) / 60000));\r\n-        }\r\n-\r\n-        else if (order.status === \"preparing\" && order.preparing_at && order.prepare_duration) {\r\n-          const preparingAt = new Date(order.preparing_at).getTime();\r\n-          const duration = order.prepare_duration * 60 * 1000;\r\n-          progress = Math.min(100, ((now - preparingAt) / duration) * 100);\r\n-          remainingMin = Math.max(0, order.prepare_duration - Math.floor((now - preparingAt) / 60000));\r\n-        }\r\n-\r\n-        return {\r\n-          ...order,\r\n-          progress,\r\n-          remainingMin,\r\n-        };\r\n-      });\r\n-\r\n-      setProgressData(updated);\r\n-    }, 1000);\r\n-\r\n-    return () => clearInterval(interval);\r\n-  }, [trackingOrders]);\r\n-\r\n-  return (\r\n-    <div className=\"bg-white shadow rounded-lg p-6\">\r\n-      <h2 className=\"text-2xl font-bold mb-4 text-blue-700\">📦 Track Your Order</h2>\r\n-\r\n-      {progressData.length === 0 && (\r\n-        <p className=\"text-gray-500 text-sm\">No active orders to track.</p>\r\n-      )}\r\n-\r\n-      <div className=\"flex flex-col space-y-5\">\r\n-        {progressData.map((order, index) => (\r\n-          <div\r\n-            key={order.id || index}\r\n-            className=\"relative bg-gradient-to-r from-gray-50 to-white border rounded-lg p-4 shadow\"\r\n-          >\r\n-            <div className=\"flex justify-between items-center mb-2\">\r\n-              <p className=\"font-semibold text-lg text-gray-800\">Order #{order.id}</p>\r\n-              <span className=\"text-sm text-gray-500 capitalize\">Status: {order.status}</span>\r\n-            </div>\r\n-\r\n-            <p className=\"text-sm text-gray-600 mb-3\">\r\n-              {order.remainingMin! > 0\r\n-                ? `Estimated Ready In: ${order.remainingMin} min`\r\n-                : `Almost Ready!`}\r\n-            </p>\r\n-\r\n-            {/* Moving Icon */}\r\n-            <div className=\"relative h-8 mb-1\">\r\n-              <div\r\n-                className=\"absolute top-0 transition-all duration-500\"\r\n-                style={{\r\n-                  left: `calc(${order.progress}% - 16px)`,\r\n-                }}\r\n-              >\r\n-                <TbPackage className={`text-xl ${order.status === \"preparing\" ? \"text-green-600\" : \"text-blue-500\"} animate-pulse`} />\r\n-              </div>\r\n-            </div>\r\n-\r\n-            {/* Progress Bar */}\r\n-            <div className=\"w-full bg-gray-300 h-3 rounded-full overflow-hidden\">\r\n-              <div\r\n-                className={`h-full rounded-full transition-all duration-500 ${\r\n-                  order.status === \"preparing\"\r\n-                    ? \"bg-green-500\"\r\n-                    : order.progress! < 100\r\n-                    ? \"bg-blue-500\"\r\n-                    : \"bg-emerald-600\"\r\n-                }`}\r\n-                style={{ width: `${order.progress}%` }}\r\n-              />\r\n-            </div>\r\n-\r\n-            {/* Skeleton Pulse */}\r\n-            {order.progress === 0 && (\r\n-              <div className=\"mt-2 h-3 bg-gray-200 animate-pulse rounded-full w-full\" />\r\n-            )}\r\n-          </div>\r\n-        ))}\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default OrderTrackingTab;\r\n"
                },
                {
                    "date": 1749213610975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,8 +90,9 @@\n       <h2 className=\"text-2xl font-bold mb-4 text-blue-700\">📦 Track Your Order</h2>\r\n \r\n       {progressData.length === 0 && (\r\n         <p className=\"text-gray-500 text-sm\">No active orders to track.</p>\r\n+        <div className=\"mt-2 h-3 bg-gray-200 animate-pulse rounded-full w-full\" />\r\n       )}\r\n \r\n       <div className=\"flex flex-col space-y-5\">\r\n         {progressData.map((order, index) => (\r\n"
                },
                {
                    "date": 1749213619286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n     <div className=\"bg-white shadow rounded-lg p-6\">\r\n       <h2 className=\"text-2xl font-bold mb-4 text-blue-700\">📦 Track Your Order</h2>\r\n \r\n       {progressData.length === 0 && (\r\n-        <p className=\"text-gray-500 text-sm\">No active orders to track.</p>\r\n+        <div className=\"mt-2 h-3 bg-gray-200 animate-pulse rounded-full w-full\" />\r\n         \r\n       )}\r\n \r\n       <div className=\"flex flex-col space-y-5\">\r\n"
                },
                {
                    "date": 1749213635142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,153 @@\n+\"use client\";\r\n+\r\n+import { useEffect, useState } from \"react\";\r\n+import { TbPackage } from \"react-icons/tb\";\r\n+\r\n+interface Order {\r\n+  id: number;\r\n+  status: string;\r\n+  ordered_at: string;\r\n+  confirmed_at: string | null;\r\n+  preparing_at: string | null;\r\n+  prepare_duration: number | null;\r\n+  progress?: number;\r\n+  remainingMin?: number;\r\n+  [key: string]: any;\r\n+}\r\n+\r\n+interface Props {\r\n+  trackingOrders: Order[];\r\n+}\r\n+\r\n+const OrderTrackingTab: React.FC<Props> = ({ trackingOrders }) => {\r\n+  const [progressData, setProgressData] = useState<Order[]>([]);\r\n+\r\n+  useEffect(() => {\r\n+    const interval = setInterval(() => {\r\n+      const now = new Date().getTime();\r\n+\r\n+      const updated = trackingOrders.map((order) => {\r\n+        let progress = 0;\r\n+        let remainingMin = 0;\r\n+\r\n+        const orderedAt = new Date(order.ordered_at).getTime();\r\n+\r\n+        if (order.status === \"pending\") {\r\n+          const duration = 2 * 60 * 1000;\r\n+          progress = Math.min(100, ((now - orderedAt) / duration) * 100);\r\n+          remainingMin = Math.max(0, 2 - Math.floor((now - orderedAt) / 60000));\r\n+        } else if (order.status === \"confirmed\" && order.confirmed_at) {\r\n+          const confirmedAt = new Date(order.confirmed_at).getTime();\r\n+          const duration = 2 * 60 * 1000;\r\n+          progress = Math.min(100, ((now - confirmedAt) / duration) * 100);\r\n+          remainingMin = Math.max(0, 2 - Math.floor((now - confirmedAt) / 60000));\r\n+        } else if (\r\n+          order.status === \"preparing\" &&\r\n+          order.preparing_at &&\r\n+          order.prepare_duration\r\n+        ) {\r\n+          const preparingAt = new Date(order.preparing_at).getTime();\r\n+          const duration = order.prepare_duration * 60 * 1000;\r\n+          progress = Math.min(100, ((now - preparingAt) / duration) * 100);\r\n+          remainingMin = Math.max(\r\n+            0,\r\n+            order.prepare_duration - Math.floor((now - preparingAt) / 60000)\r\n+          );\r\n+        }\r\n+\r\n+        return {\r\n+          ...order,\r\n+          progress,\r\n+          remainingMin,\r\n+        };\r\n+      });\r\n+\r\n+      setProgressData(updated);\r\n+    }, 1000);\r\n+\r\n+    return () => clearInterval(interval);\r\n+  }, [trackingOrders]);\r\n+\r\n+  const getStatusMessage = (order: Order): string => {\r\n+    if (order.status === \"pending\") {\r\n+      return order.remainingMin! > 0\r\n+        ? `✅ Estimated time to be confirmed: ${order.remainingMin} min`\r\n+        : `✅ Confirming shortly...`;\r\n+    } else if (order.status === \"confirmed\") {\r\n+      return order.remainingMin! > 0\r\n+        ? `⏳ Estimated time for preparation: ${order.remainingMin} min`\r\n+        : `🍳 Preparing will begin shortly...`;\r\n+    } else if (order.status === \"preparing\") {\r\n+      return order.remainingMin! > 0\r\n+        ? `🍽️ Estimated delivery time: ${order.remainingMin} min`\r\n+        : `🚚 Out for delivery!`;\r\n+    }\r\n+    return \"\";\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"bg-white shadow rounded-lg p-6\">\r\n+      <h2 className=\"text-2xl font-bold mb-4 text-blue-700\">📦 Track Your Order</h2>\r\n+\r\n+      {progressData.length === 0 && (\r\n+        <p className=\"text-gray-500 text-sm\">No active orders to track.</p>\r\n+        \r\n+      )}\r\n+\r\n+      <div className=\"flex flex-col space-y-5\">\r\n+        {progressData.map((order, index) => (\r\n+          <div\r\n+            key={order.id || index}\r\n+            className=\"relative bg-gradient-to-r from-gray-50 to-white shadow rounded-lg p-4 shadow\"\r\n+          >\r\n+            <div className=\"flex justify-between items-center mb-2\">\r\n+              <p className=\"font-semibold text-lg text-gray-800\">Order #{order.id}</p>\r\n+              <span className=\"text-sm text-gray-500 capitalize\">Status: {order.status}</span>\r\n+            </div>\r\n+\r\n+            <p className=\"text-sm text-gray-600 mb-3\">{getStatusMessage(order)}</p>\r\n+\r\n+            {/* Moving Icon */}\r\n+            <div className=\"relative h-8 mb-1\">\r\n+              <div\r\n+                className=\"absolute top-0 transition-all duration-500\"\r\n+                style={{\r\n+                  left: `calc(${order.progress}% - 16px)`,\r\n+                }}\r\n+              >\r\n+                <TbPackage\r\n+                  className={`text-xl ${\r\n+                    order.status === \"preparing\"\r\n+                      ? \"text-green-600\"\r\n+                      : \"text-blue-500\"\r\n+                  } animate-pulse`}\r\n+                />\r\n+              </div>\r\n+            </div>\r\n+\r\n+            {/* Progress Bar */}\r\n+            <div className=\"w-full bg-gray-300 h-3 rounded-full overflow-hidden\">\r\n+              <div\r\n+                className={`h-full rounded-full transition-all duration-500 ${\r\n+                  order.status === \"preparing\"\r\n+                    ? \"bg-green-500\"\r\n+                    : order.progress! < 100\r\n+                    ? \"bg-blue-500\"\r\n+                    : \"bg-emerald-600\"\r\n+                }`}\r\n+                style={{ width: `${order.progress}%` }}\r\n+              />\r\n+            </div>\r\n+\r\n+            {/* Skeleton Pulse */}\r\n+            {order.progress === 0 && (\r\n+              <div className=\"mt-2 h-3 bg-gray-200 animate-pulse rounded-full w-full\" />\r\n+            )}\r\n+          </div>\r\n+        ))}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default OrderTrackingTab;\r\n"
                }
            ],
            "date": 1749206760925,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\n\r\ninterface Order {\r\n  id: number;\r\n  status: string;\r\n  confirmed_at: string | null;\r\n  [key: string]: any; // to support additional props\r\n}\r\n\r\ninterface Props {\r\n  trackingOrders: Order[];\r\n}\r\n\r\nconst OrderTrackingTab: React.FC<Props> = ({ trackingOrders }) => {\r\n  const [progressData, setProgressData] = useState<Order[]>([]);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      const updated = trackingOrders.map(order => {\r\n        if (!order.confirmed_at || order.status !== \"confirmed\")\r\n          return { ...order, progress: 0, remainingMin: 10 };\r\n\r\n        const confirmedTime = new Date(order.confirmed_at).getTime();\r\n        const now = new Date().getTime();\r\n        const elapsed = now - confirmedTime;\r\n        const total = 10 * 60 * 1000;\r\n\r\n        const progress = Math.min(100, (elapsed / total) * 100);\r\n        const remaining = Math.max(0, 10 - Math.floor(elapsed / 60000));\r\n\r\n        return {\r\n          ...order,\r\n          progress,\r\n          remainingMin: remaining,\r\n        };\r\n      });\r\n\r\n      setProgressData(updated);\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [trackingOrders]);\r\n\r\n  return (\r\n    <div className=\"bg-white shadow rounded-lg p-6\">\r\n      <h2 className=\"text-2xl font-bold mb-4 text-blue-700\">📦 Track Your Order</h2>\r\n\r\n      {progressData.length === 0 && (\r\n        <p className=\"text-gray-500 text-sm\">No active orders to track.</p>\r\n      )}\r\n\r\n      <div className=\"flex flex-col space-y-5\">\r\n        {progressData.map((order, index) => (\r\n          <div\r\n            key={order.id || index}\r\n            className=\"bg-gradient-to-r from-gray-50 to-white border rounded-lg p-4 shadow\"\r\n          >\r\n            <div className=\"flex justify-between items-center mb-1\">\r\n              <p className=\"font-semibold text-lg text-gray-800\">\r\n                Order #{order.id}\r\n              </p>\r\n              <span className=\"text-sm text-gray-500\">\r\n                Status: {order.status}\r\n              </span>\r\n            </div>\r\n            <p className=\"text-sm text-gray-600\">\r\n              {order.remainingMin > 0\r\n                ? `Estimated Ready In: ${order.remainingMin} min`\r\n                : `Almost Ready!`}\r\n            </p>\r\n            <div className=\"mt-2 w-full bg-gray-300 h-3 rounded-full overflow-hidden\">\r\n              <div\r\n                className={`h-full rounded-full transition-all duration-500 ${\r\n                  order.progress < 100 ? \"bg-blue-500\" : \"bg-green-500\"\r\n                }`}\r\n                style={{ width: `${order.progress}%` }}\r\n              />\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrderTrackingTab;\r\n"
        }
    ]
}