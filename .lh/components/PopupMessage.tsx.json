{
    "sourceFile": "components/PopupMessage.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1749068581063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749069101708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,90 @@\n+'use client';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+\r\n+type PopupMessageProps = {\r\n+  message: string;\r\n+  type?: 'success' | 'error' | 'info';\r\n+  onClose?: () => void;\r\n+};\r\n+\r\n+const soundUrl = '/notification-sound.mp3'; // Add your sound file to public folder\r\n+\r\n+const PopupMessage = ({ message, type = 'info', onClose }: PopupMessageProps) => {\r\n+  const [visible, setVisible] = useState(false);\r\n+  const [fadeOut, setFadeOut] = useState(false);\r\n+\r\n+  useEffect(() => {\r\n+    // Play sound on show\r\n+    const audio = new Audio(soundUrl);\r\n+    audio.play();\r\n+\r\n+    setVisible(true);\r\n+\r\n+    // Start fade out after 2.5s, total visible 3s\r\n+    const fadeTimer = setTimeout(() => setFadeOut(true), 2500);\r\n+    // Remove after fade animation (300ms fade)\r\n+    const closeTimer = setTimeout(() => {\r\n+      setVisible(false);\r\n+      if (onClose) onClose();\r\n+    }, 2800);\r\n+\r\n+    return () => {\r\n+      clearTimeout(fadeTimer);\r\n+      clearTimeout(closeTimer);\r\n+    };\r\n+  }, [onClose]);\r\n+\r\n+  if (!visible) return null;\r\n+\r\n+  const bgColor =\r\n+    type === 'success'\r\n+      ? 'bg-green-500'\r\n+      : type === 'error'\r\n+      ? 'bg-red-500'\r\n+      : 'bg-blue-500';\r\n+\r\n+  return (\r\n+    <div\r\n+      className={`fixed top-4 right-4 z-50 px-4 py-2 rounded-lg text-white shadow-lg flex items-center space-x-3 cursor-pointer\r\n+        transition-opacity duration-300\r\n+        ${fadeOut ? 'opacity-0' : 'opacity-100'}\r\n+      `}\r\n+      role=\"alert\"\r\n+      onClick={() => {\r\n+        setVisible(false);\r\n+        if (onClose) onClose();\r\n+      }}\r\n+      aria-live=\"assertive\"\r\n+    >\r\n+      {/* Icon */}\r\n+      {type === 'success' && (\r\n+        <svg className=\"w-6 h-6 text-white\" fill=\"none\" stroke=\"currentColor\" strokeWidth={2} viewBox=\"0 0 24 24\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M5 13l4 4L19 7\" /></svg>\r\n+      )}\r\n+      {type === 'error' && (\r\n+        <svg className=\"w-6 h-6 text-white\" fill=\"none\" stroke=\"currentColor\" strokeWidth={2} viewBox=\"0 0 24 24\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><circle cx=\"12\" cy=\"12\" r=\"10\" /><line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\" /><line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\" /></svg>\r\n+      )}\r\n+      {type === 'info' && (\r\n+        <svg className=\"w-6 h-6 text-white\" fill=\"none\" stroke=\"currentColor\" strokeWidth={2} viewBox=\"0 0 24 24\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><circle cx=\"12\" cy=\"12\" r=\"10\" /><line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\" /><line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"8\" /></svg>\r\n+      )}\r\n+      \r\n+      {/* Message */}\r\n+      <span>{message}</span>\r\n+\r\n+      {/* Close button */}\r\n+      <button\r\n+        onClick={(e) => {\r\n+          e.stopPropagation();\r\n+          setVisible(false);\r\n+          if (onClose) onClose();\r\n+        }}\r\n+        aria-label=\"Close notification\"\r\n+        className=\"ml-auto text-white hover:text-gray-300 focus:outline-none\"\r\n+      >\r\n+        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" strokeWidth={2} viewBox=\"0 0 24 24\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" /><line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" /></svg>\r\n+      </button>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default PopupMessage;\r\n"
                },
                {
                    "date": 1749069179828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,24 +7,26 @@\n   type?: 'success' | 'error' | 'info';\r\n   onClose?: () => void;\r\n };\r\n \r\n-const soundUrl = '/notification-sound.mp3'; // Add your sound file to public folder\r\n+const soundUrl = '/notification-sound.mp3'; // Make sure this exists in /public\r\n \r\n const PopupMessage = ({ message, type = 'info', onClose }: PopupMessageProps) => {\r\n   const [visible, setVisible] = useState(false);\r\n   const [fadeOut, setFadeOut] = useState(false);\r\n \r\n   useEffect(() => {\r\n-    // Play sound on show\r\n+    // Play notification sound\r\n     const audio = new Audio(soundUrl);\r\n-    audio.play();\r\n+    audio.play().catch(() => {\r\n+      // Ignore play errors (e.g. user hasn't interacted yet)\r\n+    });\r\n \r\n     setVisible(true);\r\n \r\n-    // Start fade out after 2.5s, total visible 3s\r\n+    // Start fade out after 2.5 seconds\r\n     const fadeTimer = setTimeout(() => setFadeOut(true), 2500);\r\n-    // Remove after fade animation (300ms fade)\r\n+    // Hide completely after fade (300ms)\r\n     const closeTimer = setTimeout(() => {\r\n       setVisible(false);\r\n       if (onClose) onClose();\r\n     }, 2800);\r\n@@ -45,31 +47,20 @@\n       : 'bg-blue-500';\r\n \r\n   return (\r\n     <div\r\n-      className={`fixed top-4 right-4 z-50 px-4 py-2 rounded-lg text-white shadow-lg flex items-center space-x-3 cursor-pointer\r\n+      className={`fixed top-4 right-4 z-50 px-4 py-2 rounded-lg text-white shadow-lg cursor-pointer\r\n         transition-opacity duration-300\r\n-        ${fadeOut ? 'opacity-0' : 'opacity-100'}\r\n+        ${bgColor} ${fadeOut ? 'opacity-0' : 'opacity-100'}\r\n+        flex items-center\r\n       `}\r\n       role=\"alert\"\r\n       onClick={() => {\r\n         setVisible(false);\r\n         if (onClose) onClose();\r\n       }}\r\n       aria-live=\"assertive\"\r\n     >\r\n-      {/* Icon */}\r\n-      {type === 'success' && (\r\n-        <svg className=\"w-6 h-6 text-white\" fill=\"none\" stroke=\"currentColor\" strokeWidth={2} viewBox=\"0 0 24 24\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M5 13l4 4L19 7\" /></svg>\r\n-      )}\r\n-      {type === 'error' && (\r\n-        <svg className=\"w-6 h-6 text-white\" fill=\"none\" stroke=\"currentColor\" strokeWidth={2} viewBox=\"0 0 24 24\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><circle cx=\"12\" cy=\"12\" r=\"10\" /><line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\" /><line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\" /></svg>\r\n-      )}\r\n-      {type === 'info' && (\r\n-        <svg className=\"w-6 h-6 text-white\" fill=\"none\" stroke=\"currentColor\" strokeWidth={2} viewBox=\"0 0 24 24\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><circle cx=\"12\" cy=\"12\" r=\"10\" /><line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\" /><line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"8\" /></svg>\r\n-      )}\r\n-      \r\n-      {/* Message */}\r\n       <span>{message}</span>\r\n \r\n       {/* Close button */}\r\n       <button\r\n@@ -78,51 +69,24 @@\n           setVisible(false);\r\n           if (onClose) onClose();\r\n         }}\r\n         aria-label=\"Close notification\"\r\n-        className=\"ml-auto text-white hover:text-gray-300 focus:outline-none\"\r\n+        className=\"ml-4 text-white hover:text-gray-300 focus:outline-none\"\r\n       >\r\n-        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" strokeWidth={2} viewBox=\"0 0 24 24\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" /><line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" /></svg>\r\n+        <svg\r\n+          className=\"w-5 h-5\"\r\n+          fill=\"none\"\r\n+          stroke=\"currentColor\"\r\n+          strokeWidth={2}\r\n+          viewBox=\"0 0 24 24\"\r\n+          strokeLinecap=\"round\"\r\n+          strokeLinejoin=\"round\"\r\n+        >\r\n+          <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\r\n+          <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\r\n+        </svg>\r\n       </button>\r\n     </div>\r\n   );\r\n };\r\n \r\n export default PopupMessage;\r\n-'use client';\r\n-import { useEffect, useState } from 'react';\r\n-\r\n-type PopupMessageProps = {\r\n-  message: string;\r\n-  type?: 'success' | 'error' | 'info';\r\n-  onClose?: () => void;\r\n-};\r\n-\r\n-const PopupMessage = ({ message, type = 'info', onClose }: PopupMessageProps) => {\r\n-  const [visible, setVisible] = useState(true);\r\n-\r\n-  useEffect(() => {\r\n-    const timer = setTimeout(() => {\r\n-      setVisible(false);\r\n-      if (onClose) onClose();\r\n-    }, 3000); // auto-close after 3 seconds\r\n-\r\n-    return () => clearTimeout(timer);\r\n-  }, [onClose]);\r\n-\r\n-  if (!visible) return null;\r\n-\r\n-  const bgColor =\r\n-    type === 'success'\r\n-      ? 'bg-green-500'\r\n-      : type === 'error'\r\n-      ? 'bg-red-500'\r\n-      : 'bg-blue-500';\r\n-\r\n-  return (\r\n-    <div className={`fixed top-4 right-4 z-50 px-4 py-2 rounded-lg text-white shadow-lg ${bgColor}`}>\r\n-      {message}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default PopupMessage;\r\n"
                },
                {
                    "date": 1749069287986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,26 +7,21 @@\n   type?: 'success' | 'error' | 'info';\r\n   onClose?: () => void;\r\n };\r\n \r\n-const soundUrl = '/notification-sound.mp3'; // Make sure this exists in /public\r\n+const soundUrl = '/notification-sound.mp3';\r\n \r\n const PopupMessage = ({ message, type = 'info', onClose }: PopupMessageProps) => {\r\n   const [visible, setVisible] = useState(false);\r\n   const [fadeOut, setFadeOut] = useState(false);\r\n \r\n   useEffect(() => {\r\n-    // Play notification sound\r\n     const audio = new Audio(soundUrl);\r\n-    audio.play().catch(() => {\r\n-      // Ignore play errors (e.g. user hasn't interacted yet)\r\n-    });\r\n+    audio.play().catch(() => {});\r\n \r\n     setVisible(true);\r\n \r\n-    // Start fade out after 2.5 seconds\r\n     const fadeTimer = setTimeout(() => setFadeOut(true), 2500);\r\n-    // Hide completely after fade (300ms)\r\n     const closeTimer = setTimeout(() => {\r\n       setVisible(false);\r\n       if (onClose) onClose();\r\n     }, 2800);\r\n@@ -46,47 +41,68 @@\n       ? 'bg-red-500'\r\n       : 'bg-blue-500';\r\n \r\n   return (\r\n-    <div\r\n-      className={`fixed top-4 right-4 z-50 px-4 py-2 rounded-lg text-white shadow-lg cursor-pointer\r\n-        transition-opacity duration-300\r\n-        ${bgColor} ${fadeOut ? 'opacity-0' : 'opacity-100'}\r\n-        flex items-center\r\n-      `}\r\n-      role=\"alert\"\r\n-      onClick={() => {\r\n-        setVisible(false);\r\n-        if (onClose) onClose();\r\n-      }}\r\n-      aria-live=\"assertive\"\r\n-    >\r\n-      <span>{message}</span>\r\n-\r\n-      {/* Close button */}\r\n-      <button\r\n-        onClick={(e) => {\r\n-          e.stopPropagation();\r\n-          setVisible(false);\r\n-          if (onClose) onClose();\r\n+    <>\r\n+      <style>{`\r\n+        @keyframes fadeIn {\r\n+          from {opacity: 0; transform: translateY(-10px);}\r\n+          to {opacity: 1; transform: translateY(0);}\r\n+        }\r\n+        @keyframes fadeOut {\r\n+          from {opacity: 1; transform: translateY(0);}\r\n+          to {opacity: 0; transform: translateY(-10px);}\r\n+        }\r\n+      `}</style>\r\n+      <div\r\n+        role=\"alert\"\r\n+        aria-live=\"assertive\"\r\n+        onClick={() => {\r\n+          setFadeOut(true);\r\n+          setTimeout(() => {\r\n+            setVisible(false);\r\n+            if (onClose) onClose();\r\n+          }, 300); // match animation duration\r\n         }}\r\n-        aria-label=\"Close notification\"\r\n-        className=\"ml-4 text-white hover:text-gray-300 focus:outline-none\"\r\n+        className={`fixed top-4 right-4 z-50 px-4 py-2 rounded-lg text-white shadow-lg cursor-pointer flex items-center\r\n+          ${bgColor}\r\n+          ${fadeOut ? 'animate-fadeOut' : 'animate-fadeIn'}\r\n+        `}\r\n+        style={{\r\n+          animationFillMode: 'forwards',\r\n+          animationDuration: '300ms',\r\n+          animationTimingFunction: 'ease-in-out',\r\n+        }}\r\n       >\r\n-        <svg\r\n-          className=\"w-5 h-5\"\r\n-          fill=\"none\"\r\n-          stroke=\"currentColor\"\r\n-          strokeWidth={2}\r\n-          viewBox=\"0 0 24 24\"\r\n-          strokeLinecap=\"round\"\r\n-          strokeLinejoin=\"round\"\r\n+        <span>{message}</span>\r\n+\r\n+        <button\r\n+          onClick={(e) => {\r\n+            e.stopPropagation();\r\n+            setFadeOut(true);\r\n+            setTimeout(() => {\r\n+              setVisible(false);\r\n+              if (onClose) onClose();\r\n+            }, 300);\r\n+          }}\r\n+          aria-label=\"Close notification\"\r\n+          className=\"ml-4 text-white hover:text-gray-300 focus:outline-none\"\r\n         >\r\n-          <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\r\n-          <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\r\n-        </svg>\r\n-      </button>\r\n-    </div>\r\n+          <svg\r\n+            className=\"w-5 h-5\"\r\n+            fill=\"none\"\r\n+            stroke=\"currentColor\"\r\n+            strokeWidth={2}\r\n+            viewBox=\"0 0 24 24\"\r\n+            strokeLinecap=\"round\"\r\n+            strokeLinejoin=\"round\"\r\n+          >\r\n+            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\r\n+            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\r\n+          </svg>\r\n+        </button>\r\n+      </div>\r\n+    </>\r\n   );\r\n };\r\n \r\n export default PopupMessage;\r\n"
                },
                {
                    "date": 1749069298330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n   type?: 'success' | 'error' | 'info';\r\n   onClose?: () => void;\r\n };\r\n \r\n-const soundUrl = '/notification-sound.mp3';\r\n+const soundUrl = '/notification-sound.wav';\r\n \r\n const PopupMessage = ({ message, type = 'info', onClose }: PopupMessageProps) => {\r\n   const [visible, setVisible] = useState(false);\r\n   const [fadeOut, setFadeOut] = useState(false);\r\n"
                },
                {
                    "date": 1749069532765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n   type?: 'success' | 'error' | 'info';\r\n   onClose?: () => void;\r\n };\r\n \r\n-const soundUrl = '/notification-sound.wav';\r\n+const soundUrl = '/cart-add-sound.wav';\r\n \r\n const PopupMessage = ({ message, type = 'info', onClose }: PopupMessageProps) => {\r\n   const [visible, setVisible] = useState(false);\r\n   const [fadeOut, setFadeOut] = useState(false);\r\n"
                },
                {
                    "date": 1749069634488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,108 @@\n+'use client';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+\r\n+type PopupMessageProps = {\r\n+  message: string;\r\n+  type?: 'success' | 'error' | 'info';\r\n+  onClose?: () => void;\r\n+};\r\n+\r\n+const soundUrl = '/cart-add-sound.wav';\r\n+\r\n+const PopupMessage = ({ message, type = 'info', onClose }: PopupMessageProps) => {\r\n+  const [visible, setVisible] = useState(false);\r\n+  const [fadeOut, setFadeOut] = useState(false);\r\n+\r\n+  useEffect(() => {\r\n+    const audio = new Audio(soundUrl);\r\n+    audio.play().catch(() => {});\r\n+\r\n+    setVisible(true);\r\n+\r\n+    const fadeTimer = setTimeout(() => setFadeOut(true), 2500);\r\n+    const closeTimer = setTimeout(() => {\r\n+      setVisible(false);\r\n+      if (onClose) onClose();\r\n+    }, 2800);\r\n+\r\n+    return () => {\r\n+      clearTimeout(fadeTimer);\r\n+      clearTimeout(closeTimer);\r\n+    };\r\n+  }, [onClose]);\r\n+\r\n+  if (!visible) return null;\r\n+\r\n+  const bgColor =\r\n+    type === 'success'\r\n+      ? 'bg-green-500'\r\n+      : type === 'error'\r\n+      ? 'bg-red-500'\r\n+      : 'bg-blue-500';\r\n+\r\n+  return (\r\n+    <>\r\n+      <style>{`\r\n+        @keyframes fadeIn {\r\n+          from {opacity: 0; transform: translateY(-10px);}\r\n+          to {opacity: 1; transform: translateY(0);}\r\n+        }\r\n+        @keyframes fadeOut {\r\n+          from {opacity: 1; transform: translateY(0);}\r\n+          to {opacity: 0; transform: translateY(-10px);}\r\n+        }\r\n+      `}</style>\r\n+      <div\r\n+        role=\"alert\"\r\n+        aria-live=\"assertive\"\r\n+        onClick={() => {\r\n+          setFadeOut(true);\r\n+          setTimeout(() => {\r\n+            setVisible(false);\r\n+            if (onClose) onClose();\r\n+          }, 300); // match animation duration\r\n+        }}\r\n+        className={`fixed top-6 right-4 z-50 px-4 py-2 rounded-lg text-white shadow-lg cursor-pointer flex items-center\r\n+          ${bgColor}\r\n+          ${fadeOut ? 'animate-fadeOut' : 'animate-fadeIn'}\r\n+        `}\r\n+        style={{\r\n+          animationFillMode: 'forwards',\r\n+          animationDuration: '300ms',\r\n+          animationTimingFunction: 'ease-in-out',\r\n+        }}\r\n+      >\r\n+        <span>{message}</span>\r\n+\r\n+        <button\r\n+          onClick={(e) => {\r\n+            e.stopPropagation();\r\n+            setFadeOut(true);\r\n+            setTimeout(() => {\r\n+              setVisible(false);\r\n+              if (onClose) onClose();\r\n+            }, 300);\r\n+          }}\r\n+          aria-label=\"Close notification\"\r\n+          className=\"ml-4 text-white hover:text-gray-300 focus:outline-none\"\r\n+        >\r\n+          <svg\r\n+            className=\"w-5 h-5\"\r\n+            fill=\"none\"\r\n+            stroke=\"currentColor\"\r\n+            strokeWidth={2}\r\n+            viewBox=\"0 0 24 24\"\r\n+            strokeLinecap=\"round\"\r\n+            strokeLinejoin=\"round\"\r\n+          >\r\n+            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\r\n+            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\r\n+          </svg>\r\n+        </button>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+export default PopupMessage;\r\n"
                },
                {
                    "date": 1749069651068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,108 @@\n+'use client';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+\r\n+type PopupMessageProps = {\r\n+  message: string;\r\n+  type?: 'success' | 'error' | 'info';\r\n+  onClose?: () => void;\r\n+};\r\n+\r\n+const soundUrl = '/cart-add-sound.wav';\r\n+\r\n+const PopupMessage = ({ message, type = 'info', onClose }: PopupMessageProps) => {\r\n+  const [visible, setVisible] = useState(false);\r\n+  const [fadeOut, setFadeOut] = useState(false);\r\n+\r\n+  useEffect(() => {\r\n+    const audio = new Audio(soundUrl);\r\n+    audio.play().catch(() => {});\r\n+\r\n+    setVisible(true);\r\n+\r\n+    const fadeTimer = setTimeout(() => setFadeOut(true), 2500);\r\n+    const closeTimer = setTimeout(() => {\r\n+      setVisible(false);\r\n+      if (onClose) onClose();\r\n+    }, 2800);\r\n+\r\n+    return () => {\r\n+      clearTimeout(fadeTimer);\r\n+      clearTimeout(closeTimer);\r\n+    };\r\n+  }, [onClose]);\r\n+\r\n+  if (!visible) return null;\r\n+\r\n+  const bgColor =\r\n+    type === 'success'\r\n+      ? 'bg-green-500'\r\n+      : type === 'error'\r\n+      ? 'bg-red-500'\r\n+      : 'bg-blue-500';\r\n+\r\n+  return (\r\n+    <>\r\n+      <style>{`\r\n+        @keyframes fadeIn {\r\n+          from {opacity: 0; transform: translateY(-10px);}\r\n+          to {opacity: 1; transform: translateY(0);}\r\n+        }\r\n+        @keyframes fadeOut {\r\n+          from {opacity: 1; transform: translateY(0);}\r\n+          to {opacity: 0; transform: translateY(-10px);}\r\n+        }\r\n+      `}</style>\r\n+      <div\r\n+        role=\"alert\"\r\n+        aria-live=\"assertive\"\r\n+        onClick={() => {\r\n+          setFadeOut(true);\r\n+          setTimeout(() => {\r\n+            setVisible(false);\r\n+            if (onClose) onClose();\r\n+          }, 300); // match animation duration\r\n+        }}\r\n+        className={`fixed top- right-4 z-50 px-4 py-2 rounded-lg text-white shadow-lg cursor-pointer flex items-center\r\n+          ${bgColor}\r\n+          ${fadeOut ? 'animate-fadeOut' : 'animate-fadeIn'}\r\n+        `}\r\n+        style={{\r\n+          animationFillMode: 'forwards',\r\n+          animationDuration: '300ms',\r\n+          animationTimingFunction: 'ease-in-out',\r\n+        }}\r\n+      >\r\n+        <span>{message}</span>\r\n+\r\n+        <button\r\n+          onClick={(e) => {\r\n+            e.stopPropagation();\r\n+            setFadeOut(true);\r\n+            setTimeout(() => {\r\n+              setVisible(false);\r\n+              if (onClose) onClose();\r\n+            }, 300);\r\n+          }}\r\n+          aria-label=\"Close notification\"\r\n+          className=\"ml-4 text-white hover:text-gray-300 focus:outline-none\"\r\n+        >\r\n+          <svg\r\n+            className=\"w-5 h-5\"\r\n+            fill=\"none\"\r\n+            stroke=\"currentColor\"\r\n+            strokeWidth={2}\r\n+            viewBox=\"0 0 24 24\"\r\n+            strokeLinecap=\"round\"\r\n+            strokeLinejoin=\"round\"\r\n+          >\r\n+            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\r\n+            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\r\n+          </svg>\r\n+        </button>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+export default PopupMessage;\r\n"
                },
                {
                    "date": 1749069661858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,220 +105,4 @@\n   );\r\n };\r\n \r\n export default PopupMessage;\r\n-'use client';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-\r\n-type PopupMessageProps = {\r\n-  message: string;\r\n-  type?: 'success' | 'error' | 'info';\r\n-  onClose?: () => void;\r\n-};\r\n-\r\n-const soundUrl = '/cart-add-sound.wav';\r\n-\r\n-const PopupMessage = ({ message, type = 'info', onClose }: PopupMessageProps) => {\r\n-  const [visible, setVisible] = useState(false);\r\n-  const [fadeOut, setFadeOut] = useState(false);\r\n-\r\n-  useEffect(() => {\r\n-    const audio = new Audio(soundUrl);\r\n-    audio.play().catch(() => {});\r\n-\r\n-    setVisible(true);\r\n-\r\n-    const fadeTimer = setTimeout(() => setFadeOut(true), 2500);\r\n-    const closeTimer = setTimeout(() => {\r\n-      setVisible(false);\r\n-      if (onClose) onClose();\r\n-    }, 2800);\r\n-\r\n-    return () => {\r\n-      clearTimeout(fadeTimer);\r\n-      clearTimeout(closeTimer);\r\n-    };\r\n-  }, [onClose]);\r\n-\r\n-  if (!visible) return null;\r\n-\r\n-  const bgColor =\r\n-    type === 'success'\r\n-      ? 'bg-green-500'\r\n-      : type === 'error'\r\n-      ? 'bg-red-500'\r\n-      : 'bg-blue-500';\r\n-\r\n-  return (\r\n-    <>\r\n-      <style>{`\r\n-        @keyframes fadeIn {\r\n-          from {opacity: 0; transform: translateY(-10px);}\r\n-          to {opacity: 1; transform: translateY(0);}\r\n-        }\r\n-        @keyframes fadeOut {\r\n-          from {opacity: 1; transform: translateY(0);}\r\n-          to {opacity: 0; transform: translateY(-10px);}\r\n-        }\r\n-      `}</style>\r\n-      <div\r\n-        role=\"alert\"\r\n-        aria-live=\"assertive\"\r\n-        onClick={() => {\r\n-          setFadeOut(true);\r\n-          setTimeout(() => {\r\n-            setVisible(false);\r\n-            if (onClose) onClose();\r\n-          }, 300); // match animation duration\r\n-        }}\r\n-        className={`fixed top-6 right-4 z-50 px-4 py-2 rounded-lg text-white shadow-lg cursor-pointer flex items-center\r\n-          ${bgColor}\r\n-          ${fadeOut ? 'animate-fadeOut' : 'animate-fadeIn'}\r\n-        `}\r\n-        style={{\r\n-          animationFillMode: 'forwards',\r\n-          animationDuration: '300ms',\r\n-          animationTimingFunction: 'ease-in-out',\r\n-        }}\r\n-      >\r\n-        <span>{message}</span>\r\n-\r\n-        <button\r\n-          onClick={(e) => {\r\n-            e.stopPropagation();\r\n-            setFadeOut(true);\r\n-            setTimeout(() => {\r\n-              setVisible(false);\r\n-              if (onClose) onClose();\r\n-            }, 300);\r\n-          }}\r\n-          aria-label=\"Close notification\"\r\n-          className=\"ml-4 text-white hover:text-gray-300 focus:outline-none\"\r\n-        >\r\n-          <svg\r\n-            className=\"w-5 h-5\"\r\n-            fill=\"none\"\r\n-            stroke=\"currentColor\"\r\n-            strokeWidth={2}\r\n-            viewBox=\"0 0 24 24\"\r\n-            strokeLinecap=\"round\"\r\n-            strokeLinejoin=\"round\"\r\n-          >\r\n-            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\r\n-            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\r\n-          </svg>\r\n-        </button>\r\n-      </div>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-export default PopupMessage;\r\n-'use client';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-\r\n-type PopupMessageProps = {\r\n-  message: string;\r\n-  type?: 'success' | 'error' | 'info';\r\n-  onClose?: () => void;\r\n-};\r\n-\r\n-const soundUrl = '/cart-add-sound.wav';\r\n-\r\n-const PopupMessage = ({ message, type = 'info', onClose }: PopupMessageProps) => {\r\n-  const [visible, setVisible] = useState(false);\r\n-  const [fadeOut, setFadeOut] = useState(false);\r\n-\r\n-  useEffect(() => {\r\n-    const audio = new Audio(soundUrl);\r\n-    audio.play().catch(() => {});\r\n-\r\n-    setVisible(true);\r\n-\r\n-    const fadeTimer = setTimeout(() => setFadeOut(true), 2500);\r\n-    const closeTimer = setTimeout(() => {\r\n-      setVisible(false);\r\n-      if (onClose) onClose();\r\n-    }, 2800);\r\n-\r\n-    return () => {\r\n-      clearTimeout(fadeTimer);\r\n-      clearTimeout(closeTimer);\r\n-    };\r\n-  }, [onClose]);\r\n-\r\n-  if (!visible) return null;\r\n-\r\n-  const bgColor =\r\n-    type === 'success'\r\n-      ? 'bg-green-500'\r\n-      : type === 'error'\r\n-      ? 'bg-red-500'\r\n-      : 'bg-blue-500';\r\n-\r\n-  return (\r\n-    <>\r\n-      <style>{`\r\n-        @keyframes fadeIn {\r\n-          from {opacity: 0; transform: translateY(-10px);}\r\n-          to {opacity: 1; transform: translateY(0);}\r\n-        }\r\n-        @keyframes fadeOut {\r\n-          from {opacity: 1; transform: translateY(0);}\r\n-          to {opacity: 0; transform: translateY(-10px);}\r\n-        }\r\n-      `}</style>\r\n-      <div\r\n-        role=\"alert\"\r\n-        aria-live=\"assertive\"\r\n-        onClick={() => {\r\n-          setFadeOut(true);\r\n-          setTimeout(() => {\r\n-            setVisible(false);\r\n-            if (onClose) onClose();\r\n-          }, 300); // match animation duration\r\n-        }}\r\n-        className={`fixed top-4 right-4 z-50 px-4 py-2 rounded-lg text-white shadow-lg cursor-pointer flex items-center\r\n-          ${bgColor}\r\n-          ${fadeOut ? 'animate-fadeOut' : 'animate-fadeIn'}\r\n-        `}\r\n-        style={{\r\n-          animationFillMode: 'forwards',\r\n-          animationDuration: '300ms',\r\n-          animationTimingFunction: 'ease-in-out',\r\n-        }}\r\n-      >\r\n-        <span>{message}</span>\r\n-\r\n-        <button\r\n-          onClick={(e) => {\r\n-            e.stopPropagation();\r\n-            setFadeOut(true);\r\n-            setTimeout(() => {\r\n-              setVisible(false);\r\n-              if (onClose) onClose();\r\n-            }, 300);\r\n-          }}\r\n-          aria-label=\"Close notification\"\r\n-          className=\"ml-4 text-white hover:text-gray-300 focus:outline-none\"\r\n-        >\r\n-          <svg\r\n-            className=\"w-5 h-5\"\r\n-            fill=\"none\"\r\n-            stroke=\"currentColor\"\r\n-            strokeWidth={2}\r\n-            viewBox=\"0 0 24 24\"\r\n-            strokeLinecap=\"round\"\r\n-            strokeLinejoin=\"round\"\r\n-          >\r\n-            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\r\n-            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\r\n-          </svg>\r\n-        </button>\r\n-      </div>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-export default PopupMessage;\r\n"
                },
                {
                    "date": 1749069671853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n             setVisible(false);\r\n             if (onClose) onClose();\r\n           }, 300); // match animation duration\r\n         }}\r\n-        className={`fixed top- right-4 z-50 px-4 py-2 rounded-lg text-white shadow-lg cursor-pointer flex items-center\r\n+        className={`fixed top-20 right-4 z-50 px-4 py-2 rounded-lg text-white shadow-lg cursor-pointer flex items-center\r\n           ${bgColor}\r\n           ${fadeOut ? 'animate-fadeOut' : 'animate-fadeIn'}\r\n         `}\r\n         style={{\r\n"
                },
                {
                    "date": 1749069680620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n             setVisible(false);\r\n             if (onClose) onClose();\r\n           }, 300); // match animation duration\r\n         }}\r\n-        className={`fixed top-20 right-4 z-50 px-4 py-2 rounded-lg text-white shadow-lg cursor-pointer flex items-center\r\n+        className={`fixed top-4 right-4 z-50 px-4 py-2 rounded-lg text-white shadow-lg cursor-pointer flex items-center\r\n           ${bgColor}\r\n           ${fadeOut ? 'animate-fadeOut' : 'animate-fadeIn'}\r\n         `}\r\n         style={{\r\n"
                },
                {
                    "date": 1749073721494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,21 @@\n-'use client';\r\n+\"use client\";\r\n \r\n-import { useEffect, useState } from 'react';\r\n+import { useEffect, useState } from \"react\";\r\n \r\n type PopupMessageProps = {\r\n   message: string;\r\n-  type?: 'success' | 'error' | 'info';\r\n+  type?: \"success\" | \"error\" | \"info\";\r\n   onClose?: () => void;\r\n };\r\n \r\n-const soundUrl = '/cart-add-sound.wav';\r\n+const soundUrl = \"/cart-add-sound.wav\";\r\n \r\n-const PopupMessage = ({ message, type = 'info', onClose }: PopupMessageProps) => {\r\n+const PopupMessage = ({\r\n+  message,\r\n+  type = \"info\",\r\n+  onClose,\r\n+}: PopupMessageProps) => {\r\n   const [visible, setVisible] = useState(false);\r\n   const [fadeOut, setFadeOut] = useState(false);\r\n \r\n   useEffect(() => {\r\n@@ -34,13 +38,13 @@\n \r\n   if (!visible) return null;\r\n \r\n   const bgColor =\r\n-    type === 'success'\r\n-      ? 'bg-green-500'\r\n-      : type === 'error'\r\n-      ? 'bg-red-500'\r\n-      : 'bg-blue-500';\r\n+    type === \"success\"\r\n+      ? \"bg-green-500\"\r\n+      : type === \"error\"\r\n+      ? \"bg-red-500\"\r\n+      : \"bg-blue-500\";\r\n \r\n   return (\r\n     <>\r\n       <style>{`\r\n@@ -64,14 +68,14 @@\n           }, 300); // match animation duration\r\n         }}\r\n         className={`fixed top-4 right-4 z-50 px-4 py-2 rounded-lg text-white shadow-lg cursor-pointer flex items-center\r\n           ${bgColor}\r\n-          ${fadeOut ? 'animate-fadeOut' : 'animate-fadeIn'}\r\n+          ${fadeOut ? \"animate-fadeOut\" : \"animate-fadeIn\"}\r\n         `}\r\n         style={{\r\n-          animationFillMode: 'forwards',\r\n-          animationDuration: '300ms',\r\n-          animationTimingFunction: 'ease-in-out',\r\n+          animationFillMode: \"forwards\",\r\n+          animationDuration: \"300ms\",\r\n+          animationTimingFunction: \"ease-in-out\",\r\n         }}\r\n       >\r\n         <span>{message}</span>\r\n \r\n@@ -81,9 +85,9 @@\n             setFadeOut(true);\r\n             setTimeout(() => {\r\n               setVisible(false);\r\n               if (onClose) onClose();\r\n-            }, 300);\r\n+            }, 400);\r\n           }}\r\n           aria-label=\"Close notification\"\r\n           className=\"ml-4 text-white hover:text-gray-300 focus:outline-none\"\r\n         >\r\n"
                }
            ],
            "date": 1749068581063,
            "name": "Commit-0",
            "content": "'use client';\r\nimport { useEffect, useState } from 'react';\r\n\r\ntype PopupMessageProps = {\r\n  message: string;\r\n  type?: 'success' | 'error' | 'info';\r\n  onClose?: () => void;\r\n};\r\n\r\nconst PopupMessage = ({ message, type = 'info', onClose }: PopupMessageProps) => {\r\n  const [visible, setVisible] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setVisible(false);\r\n      if (onClose) onClose();\r\n    }, 3000); // auto-close after 3 seconds\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [onClose]);\r\n\r\n  if (!visible) return null;\r\n\r\n  const bgColor =\r\n    type === 'success'\r\n      ? 'bg-green-500'\r\n      : type === 'error'\r\n      ? 'bg-red-500'\r\n      : 'bg-blue-500';\r\n\r\n  return (\r\n    <div className={`fixed top-4 right-4 z-50 px-4 py-2 rounded-lg text-white shadow-lg ${bgColor}`}>\r\n      {message}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PopupMessage;\r\n"
        }
    ]
}