{
    "sourceFile": "lib/axiosWithCsrf.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1749064168322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749064186630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,31 @@\n+// lib/axiosWithCsrf.ts\r\n+import axios from 'axios';\r\n+\r\n+// Util to get csrf token from cookies\r\n+function getCookie(name: string): string | null {\r\n+  if (typeof document === 'undefined') return null;\r\n+  const cookie = document.cookie\r\n+    .split('; ')\r\n+    .find(row => row.startsWith(name + '='));\r\n+  return cookie ? decodeURIComponent(cookie.split('=')[1]) : null;\r\n+}\r\n+\r\n+// CSRF-safe axios instance\r\n+export const axiosWithCsrf = axios.create({\r\n+  baseURL: 'http://localhost:8000',\r\n+  withCredentials: true,\r\n+});\r\n+\r\n+// Interceptor to add CSRF token automatically\r\n+axiosWithCsrf.interceptors.request.use(config => {\r\n+  const method = config.method?.toUpperCase();\r\n+\r\n+  if (['POST', 'PUT', 'PATCH', 'DELETE'].includes(method || '')) {\r\n+    const csrftoken = getCookie('csrftoken');\r\n+    if (csrftoken) {\r\n+      config.headers['X-CSRFToken'] = csrftoken;\r\n+    }\r\n+  }\r\n+\r\n+  return config;\r\n+});\r\n"
                },
                {
                    "date": 1749064695725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,174 @@\n+'use client';\r\n+\r\n+import { useState } from 'react';\r\n+import Link from 'next/link';\r\n+import { useRouter } from 'next/navigation';\r\n+import { HiEye, HiEyeOff } from 'react-icons/hi';\r\n+import { Button } from '@/components/ui/button';\r\n+import { FcGoogle } from 'react-icons/fc';\r\n+import { axiosWithCsrf } from '@/lib/axiosWithCsrf'; // ✅ use helper\r\n+\r\n+export default function SignupPage() {\r\n+  const router = useRouter();\r\n+\r\n+  const [username, setUsername] = useState('');\r\n+  const [email, setEmail] = useState('');\r\n+  const [password, setPassword] = useState('');\r\n+  const [confirmPassword, setConfirmPassword] = useState('');\r\n+  const [showPassword, setShowPassword] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+\r\n+  const handleSignup = async (e: React.FormEvent) => {\r\n+    e.preventDefault();\r\n+    setError('');\r\n+\r\n+    if (password !== confirmPassword) {\r\n+      setError('Passwords do not match!');\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      // Signup API call\r\n+      await axiosWithCsrf.post('/auth/', {\r\n+        username: username.trim(),\r\n+        email: email.trim(),\r\n+        password1: password,\r\n+        password2: confirmPassword,\r\n+      });\r\n+\r\n+      console.log('Signup successful');\r\n+\r\n+      // Auto-login after signup\r\n+      await axiosWithCsrf.post('/auth/login/', {\r\n+        email: email.trim(),\r\n+        password: password,\r\n+      });\r\n+\r\n+      console.log('Login successful after signup');\r\n+      router.push('/');\r\n+\r\n+    } catch (err: any) {\r\n+      console.error(err);\r\n+\r\n+      if (err.response?.data) {\r\n+        const data = err.response.data;\r\n+        let messages: string[] = [];\r\n+\r\n+        for (const key in data) {\r\n+          if (Array.isArray(data[key])) {\r\n+            messages.push(`${key}: ${data[key].join(' ')}`);\r\n+          } else if (typeof data[key] === 'string') {\r\n+            messages.push(`${key}: ${data[key]}`);\r\n+          }\r\n+        }\r\n+        setError(messages.join(' | '));\r\n+      } else {\r\n+        setError('Signup failed. Please try again.');\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const handleGoogleLogin = () => {\r\n+    console.log('Google login clicked');\r\n+    // TODO: Add Google OAuth here\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"min-h-screen flex items-center justify-center px-4 bg-gray-50\">\r\n+      <div className=\"w-full max-w-md space-y-6 bg-white p-6 rounded-lg shadow-md\">\r\n+        <h2 className=\"text-2xl font-bold text-center text-blue-700\">Create an Account</h2>\r\n+\r\n+        <Button\r\n+          onClick={handleGoogleLogin}\r\n+          className=\"w-full flex items-center justify-center gap-2 border border-gray-300 bg-white text-gray-800 hover:bg-gray-100\"\r\n+          variant=\"outline\"\r\n+        >\r\n+          <FcGoogle size={20} /> Continue with Google\r\n+        </Button>\r\n+\r\n+        <form onSubmit={handleSignup} className=\"space-y-4\">\r\n+          <div>\r\n+            <label htmlFor=\"username\" className=\"text-sm font-medium text-gray-700\">\r\n+              Username\r\n+            </label>\r\n+            <input\r\n+              type=\"text\"\r\n+              id=\"username\"\r\n+              value={username}\r\n+              required\r\n+              onChange={(e) => setUsername(e.target.value)}\r\n+              className=\"w-full mt-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring focus:ring-blue-200\"\r\n+              placeholder=\"Your username\"\r\n+            />\r\n+          </div>\r\n+\r\n+          <div>\r\n+            <label htmlFor=\"email\" className=\"text-sm font-medium text-gray-700\">\r\n+              Email\r\n+            </label>\r\n+            <input\r\n+              type=\"email\"\r\n+              id=\"email\"\r\n+              value={email}\r\n+              required\r\n+              onChange={(e) => setEmail(e.target.value)}\r\n+              className=\"w-full mt-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring focus:ring-blue-200\"\r\n+              placeholder=\"you@example.com\"\r\n+            />\r\n+          </div>\r\n+\r\n+          <div className=\"relative\">\r\n+            <label htmlFor=\"password\" className=\"text-sm font-medium text-gray-700\">\r\n+              Password\r\n+            </label>\r\n+            <input\r\n+              type={showPassword ? 'text' : 'password'}\r\n+              id=\"password\"\r\n+              value={password}\r\n+              required\r\n+              onChange={(e) => setPassword(e.target.value)}\r\n+              className=\"w-full mt-1 pr-10 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring focus:ring-blue-200\"\r\n+              placeholder=\"••••••••\"\r\n+            />\r\n+            <button\r\n+              type=\"button\"\r\n+              onClick={() => setShowPassword(!showPassword)}\r\n+              className=\"absolute top-[38px] right-3 text-gray-500 hover:text-gray-700 focus:outline-none\"\r\n+              aria-label={showPassword ? 'Hide password' : 'Show password'}\r\n+            >\r\n+              {showPassword ? <HiEyeOff size={20} /> : <HiEye size={20} />}\r\n+            </button>\r\n+          </div>\r\n+\r\n+          <div className=\"relative\">\r\n+            <label htmlFor=\"confirmPassword\" className=\"text-sm font-medium text-gray-700\">\r\n+              Confirm Password\r\n+            </label>\r\n+            <input\r\n+              type={showPassword ? 'text' : 'password'}\r\n+              id=\"confirmPassword\"\r\n+              value={confirmPassword}\r\n+              required\r\n+              onChange={(e) => setConfirmPassword(e.target.value)}\r\n+              className=\"w-full mt-1 pr-10 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring focus:ring-blue-200\"\r\n+              placeholder=\"••••••••\"\r\n+            />\r\n+          </div>\r\n+\r\n+          {error && <p className=\"text-red-600 text-sm\">{error}</p>}\r\n+\r\n+          <Button type=\"submit\" className=\"w-full\">\r\n+            Sign Up\r\n+          </Button>\r\n+        </form>\r\n+\r\n+        <p className=\"text-center text-sm text-gray-500\">\r\n+          Already have an account?{' '}\r\n+          <Link href=\"/login\" className=\"text-blue-600 hover:underline\">\r\n+            Log in here\r\n+          </Link>\r\n+        </p>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1749064704228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,66 +171,4 @@\n       </div>\r\n     </div>\r\n   );\r\n }\r\n-// lib/axiosWithCsrf.ts\r\n-import axios from 'axios';\r\n-\r\n-// Util to get csrf token from cookies\r\n-function getCookie(name: string): string | null {\r\n-  if (typeof document === 'undefined') return null;\r\n-  const cookie = document.cookie\r\n-    .split('; ')\r\n-    .find(row => row.startsWith(name + '='));\r\n-  return cookie ? decodeURIComponent(cookie.split('=')[1]) : null;\r\n-}\r\n-\r\n-// CSRF-safe axios instance\r\n-export const axiosWithCsrf = axios.create({\r\n-  baseURL: 'http://localhost:8000',\r\n-  withCredentials: true,\r\n-});\r\n-\r\n-// Interceptor to add CSRF token automatically\r\n-axiosWithCsrf.interceptors.request.use(config => {\r\n-  const method = config.method?.toUpperCase();\r\n-\r\n-  if (['POST', 'PUT', 'PATCH', 'DELETE'].includes(method || '')) {\r\n-    const csrftoken = getCookie('csrftoken');\r\n-    if (csrftoken) {\r\n-      config.headers['X-CSRFToken'] = csrftoken;\r\n-    }\r\n-  }\r\n-\r\n-  return config;\r\n-});\r\n-// lib/axiosWithCsrf.ts\r\n-import axios from 'axios';\r\n-\r\n-// Util to get csrf token from cookies\r\n-function getCookie(name: string): string | null {\r\n-  if (typeof document === 'undefined') return null;\r\n-  const cookie = document.cookie\r\n-    .split('; ')\r\n-    .find(row => row.startsWith(name + '='));\r\n-  return cookie ? decodeURIComponent(cookie.split('=')[1]) : null;\r\n-}\r\n-\r\n-// CSRF-safe axios instance\r\n-export const axiosWithCsrf = axios.create({\r\n-  baseURL: 'http://localhost:8000',\r\n-  withCredentials: true,\r\n-});\r\n-\r\n-// Interceptor to add CSRF token automatically\r\n-axiosWithCsrf.interceptors.request.use(config => {\r\n-  const method = config.method?.toUpperCase();\r\n-\r\n-  if (['POST', 'PUT', 'PATCH', 'DELETE'].includes(method || '')) {\r\n-    const csrftoken = getCookie('csrftoken');\r\n-    if (csrftoken) {\r\n-      config.headers['X-CSRFToken'] = csrftoken;\r\n-    }\r\n-  }\r\n-\r\n-  return config;\r\n-});\r\n"
                },
                {
                    "date": 1749064739262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,174 +1,31 @@\n-'use client';\r\n+// lib/axiosWithCsrf.ts\r\n+import axios from 'axios';\r\n \r\n-import { useState } from 'react';\r\n-import Link from 'next/link';\r\n-import { useRouter } from 'next/navigation';\r\n-import { HiEye, HiEyeOff } from 'react-icons/hi';\r\n-import { Button } from '@/components/ui/button';\r\n-import { FcGoogle } from 'react-icons/fc';\r\n-import { axiosWithCsrf } from '@/lib/axiosWithCsrf'; // ✅ use helper\r\n+// Util to get csrf token from cookies\r\n+function getCookie(name: string): string | null {\r\n+  if (typeof document === 'undefined') return null;\r\n+  const cookie = document.cookie\r\n+    .split('; ')\r\n+    .find(row => row.startsWith(name + '='));\r\n+  return cookie ? decodeURIComponent(cookie.split('=')[1]) : null;\r\n+}\r\n \r\n-export default function SignupPage() {\r\n-  const router = useRouter();\r\n+// CSRF-safe axios instance\r\n+export const axiosWithCsrf = axios.create({\r\n+  baseURL: 'http://localhost:8000',\r\n+  withCredentials: true,\r\n+});\r\n \r\n-  const [username, setUsername] = useState('');\r\n-  const [email, setEmail] = useState('');\r\n-  const [password, setPassword] = useState('');\r\n-  const [confirmPassword, setConfirmPassword] = useState('');\r\n-  const [showPassword, setShowPassword] = useState(false);\r\n-  const [error, setError] = useState('');\r\n+// Interceptor to add CSRF token automatically\r\n+axiosWithCsrf.interceptors.request.use(config => {\r\n+  const method = config.method?.toUpperCase();\r\n \r\n-  const handleSignup = async (e: React.FormEvent) => {\r\n-    e.preventDefault();\r\n-    setError('');\r\n-\r\n-    if (password !== confirmPassword) {\r\n-      setError('Passwords do not match!');\r\n-      return;\r\n+  if (['POST', 'PUT', 'PATCH', 'DELETE'].includes(method || '')) {\r\n+    const csrftoken = getCookie('csrftoken');\r\n+    if (csrftoken) {\r\n+      config.headers['X-CSRFToken'] = csrftoken;\r\n     }\r\n+  }\r\n \r\n-    try {\r\n-      // Signup API call\r\n-      await axiosWithCsrf.post('/auth/', {\r\n-        username: username.trim(),\r\n-        email: email.trim(),\r\n-        password1: password,\r\n-        password2: confirmPassword,\r\n-      });\r\n-\r\n-      console.log('Signup successful');\r\n-\r\n-      // Auto-login after signup\r\n-      await axiosWithCsrf.post('/auth/login/', {\r\n-        email: email.trim(),\r\n-        password: password,\r\n-      });\r\n-\r\n-      console.log('Login successful after signup');\r\n-      router.push('/');\r\n-\r\n-    } catch (err: any) {\r\n-      console.error(err);\r\n-\r\n-      if (err.response?.data) {\r\n-        const data = err.response.data;\r\n-        let messages: string[] = [];\r\n-\r\n-        for (const key in data) {\r\n-          if (Array.isArray(data[key])) {\r\n-            messages.push(`${key}: ${data[key].join(' ')}`);\r\n-          } else if (typeof data[key] === 'string') {\r\n-            messages.push(`${key}: ${data[key]}`);\r\n-          }\r\n-        }\r\n-        setError(messages.join(' | '));\r\n-      } else {\r\n-        setError('Signup failed. Please try again.');\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const handleGoogleLogin = () => {\r\n-    console.log('Google login clicked');\r\n-    // TODO: Add Google OAuth here\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"min-h-screen flex items-center justify-center px-4 bg-gray-50\">\r\n-      <div className=\"w-full max-w-md space-y-6 bg-white p-6 rounded-lg shadow-md\">\r\n-        <h2 className=\"text-2xl font-bold text-center text-blue-700\">Create an Account</h2>\r\n-\r\n-        <Button\r\n-          onClick={handleGoogleLogin}\r\n-          className=\"w-full flex items-center justify-center gap-2 border border-gray-300 bg-white text-gray-800 hover:bg-gray-100\"\r\n-          variant=\"outline\"\r\n-        >\r\n-          <FcGoogle size={20} /> Continue with Google\r\n-        </Button>\r\n-\r\n-        <form onSubmit={handleSignup} className=\"space-y-4\">\r\n-          <div>\r\n-            <label htmlFor=\"username\" className=\"text-sm font-medium text-gray-700\">\r\n-              Username\r\n-            </label>\r\n-            <input\r\n-              type=\"text\"\r\n-              id=\"username\"\r\n-              value={username}\r\n-              required\r\n-              onChange={(e) => setUsername(e.target.value)}\r\n-              className=\"w-full mt-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring focus:ring-blue-200\"\r\n-              placeholder=\"Your username\"\r\n-            />\r\n-          </div>\r\n-\r\n-          <div>\r\n-            <label htmlFor=\"email\" className=\"text-sm font-medium text-gray-700\">\r\n-              Email\r\n-            </label>\r\n-            <input\r\n-              type=\"email\"\r\n-              id=\"email\"\r\n-              value={email}\r\n-              required\r\n-              onChange={(e) => setEmail(e.target.value)}\r\n-              className=\"w-full mt-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring focus:ring-blue-200\"\r\n-              placeholder=\"you@example.com\"\r\n-            />\r\n-          </div>\r\n-\r\n-          <div className=\"relative\">\r\n-            <label htmlFor=\"password\" className=\"text-sm font-medium text-gray-700\">\r\n-              Password\r\n-            </label>\r\n-            <input\r\n-              type={showPassword ? 'text' : 'password'}\r\n-              id=\"password\"\r\n-              value={password}\r\n-              required\r\n-              onChange={(e) => setPassword(e.target.value)}\r\n-              className=\"w-full mt-1 pr-10 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring focus:ring-blue-200\"\r\n-              placeholder=\"••••••••\"\r\n-            />\r\n-            <button\r\n-              type=\"button\"\r\n-              onClick={() => setShowPassword(!showPassword)}\r\n-              className=\"absolute top-[38px] right-3 text-gray-500 hover:text-gray-700 focus:outline-none\"\r\n-              aria-label={showPassword ? 'Hide password' : 'Show password'}\r\n-            >\r\n-              {showPassword ? <HiEyeOff size={20} /> : <HiEye size={20} />}\r\n-            </button>\r\n-          </div>\r\n-\r\n-          <div className=\"relative\">\r\n-            <label htmlFor=\"confirmPassword\" className=\"text-sm font-medium text-gray-700\">\r\n-              Confirm Password\r\n-            </label>\r\n-            <input\r\n-              type={showPassword ? 'text' : 'password'}\r\n-              id=\"confirmPassword\"\r\n-              value={confirmPassword}\r\n-              required\r\n-              onChange={(e) => setConfirmPassword(e.target.value)}\r\n-              className=\"w-full mt-1 pr-10 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring focus:ring-blue-200\"\r\n-              placeholder=\"••••••••\"\r\n-            />\r\n-          </div>\r\n-\r\n-          {error && <p className=\"text-red-600 text-sm\">{error}</p>}\r\n-\r\n-          <Button type=\"submit\" className=\"w-full\">\r\n-            Sign Up\r\n-          </Button>\r\n-        </form>\r\n-\r\n-        <p className=\"text-center text-sm text-gray-500\">\r\n-          Already have an account?{' '}\r\n-          <Link href=\"/login\" className=\"text-blue-600 hover:underline\">\r\n-            Log in here\r\n-          </Link>\r\n-        </p>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-}\r\n+  return config;\r\n+});\r\n"
                },
                {
                    "date": 1749108702306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n }\r\n \r\n // CSRF-safe axios instance\r\n export const axiosWithCsrf = axios.create({\r\n+  const BASE_URL = process.env.NEXT_PUBLIC_API_URL;\r\n   baseURL: 'http://localhost:8000',\r\n   withCredentials: true,\r\n });\r\n \r\n"
                },
                {
                    "date": 1749108708675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,12 +8,11 @@\n     .split('; ')\r\n     .find(row => row.startsWith(name + '='));\r\n   return cookie ? decodeURIComponent(cookie.split('=')[1]) : null;\r\n }\r\n-\r\n+const BASE_URL = process.env.NEXT_PUBLIC_API_URL;\r\n // CSRF-safe axios instance\r\n export const axiosWithCsrf = axios.create({\r\n-  const BASE_URL = process.env.NEXT_PUBLIC_API_URL;\r\n   baseURL: 'http://localhost:8000',\r\n   withCredentials: true,\r\n });\r\n \r\n"
                },
                {
                    "date": 1749108726880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n     .split('; ')\r\n     .find(row => row.startsWith(name + '='));\r\n   return cookie ? decodeURIComponent(cookie.split('=')[1]) : null;\r\n }\r\n+\r\n const BASE_URL = process.env.NEXT_PUBLIC_API_URL;\r\n // CSRF-safe axios instance\r\n export const axiosWithCsrf = axios.create({\r\n   baseURL: 'http://localhost:8000',\r\n"
                },
                {
                    "date": 1749108738139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,11 +10,13 @@\n   return cookie ? decodeURIComponent(cookie.split('=')[1]) : null;\r\n }\r\n \r\n const BASE_URL = process.env.NEXT_PUBLIC_API_URL;\r\n+\r\n // CSRF-safe axios instance\r\n export const axiosWithCsrf = axios.create({\r\n   baseURL: 'http://localhost:8000',\r\n+  baseURL: 'http://localhost:8000',\r\n   withCredentials: true,\r\n });\r\n \r\n // Interceptor to add CSRF token automatically\r\n"
                },
                {
                    "date": 1749108746188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,10 +13,10 @@\n const BASE_URL = process.env.NEXT_PUBLIC_API_URL;\r\n \r\n // CSRF-safe axios instance\r\n export const axiosWithCsrf = axios.create({\r\n-  baseURL: 'http://localhost:8000',\r\n-  baseURL: 'http://localhost:8000',\r\n+  // baseURL: 'http://localhost:8000',\r\n+  baseURL: BASE_URL,\r\n   withCredentials: true,\r\n });\r\n \r\n // Interceptor to add CSRF token automatically\r\n"
                },
                {
                    "date": 1749108753460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,34 @@\n+// lib/axiosWithCsrf.ts\r\n+import axios from 'axios';\r\n+\r\n+// Util to get csrf token from cookies\r\n+function getCookie(name: string): string | null {\r\n+  if (typeof document === 'undefined') return null;\r\n+  const cookie = document.cookie\r\n+    .split('; ')\r\n+    .find(row => row.startsWith(name + '='));\r\n+  return cookie ? decodeURIComponent(cookie.split('=')[1]) : null;\r\n+}\r\n+\r\n+const BASE_URL = process.env.NEXT_PUBLIC_API_URL;\r\n+\r\n+// CSRF-safe axios instance\r\n+export const axiosWithCsrf = axios.create({\r\n+  // baseURL: 'http://localhost:8000',\r\n+  baseURL: BASE_URL,\r\n+  withCredentials: true,\r\n+});\r\n+\r\n+// Interceptor to add CSRF token automatically\r\n+axiosWithCsrf.interceptors.request.use(config => {\r\n+  const method = config.method?.toUpperCase();\r\n+\r\n+  if (['POST', 'PUT', 'PATCH', 'DELETE'].includes(method || '')) {\r\n+    const csrftoken = getCookie('csrftoken');\r\n+    if (csrftoken) {\r\n+      config.headers['X-CSRFToken'] = csrftoken;\r\n+    }\r\n+  }\r\n+\r\n+  return config;\r\n+});\r\n"
                },
                {
                    "date": 1749108760082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n \r\n // CSRF-safe axios instance\r\n export const axiosWithCsrf = axios.create({\r\n   // baseURL: 'http://localhost:8000',\r\n-  baseURL: BASE_URL,\r\n+  baseURL: BASE_URL || 'http://localhost:8000',\r\n   withCredentials: true,\r\n });\r\n \r\n // Interceptor to add CSRF token automatically\r\n@@ -31,38 +31,4 @@\n   }\r\n \r\n   return config;\r\n });\r\n-// lib/axiosWithCsrf.ts\r\n-import axios from 'axios';\r\n-\r\n-// Util to get csrf token from cookies\r\n-function getCookie(name: string): string | null {\r\n-  if (typeof document === 'undefined') return null;\r\n-  const cookie = document.cookie\r\n-    .split('; ')\r\n-    .find(row => row.startsWith(name + '='));\r\n-  return cookie ? decodeURIComponent(cookie.split('=')[1]) : null;\r\n-}\r\n-\r\n-const BASE_URL = process.env.NEXT_PUBLIC_API_URL;\r\n-\r\n-// CSRF-safe axios instance\r\n-export const axiosWithCsrf = axios.create({\r\n-  // baseURL: 'http://localhost:8000',\r\n-  baseURL: BASE_URL,\r\n-  withCredentials: true,\r\n-});\r\n-\r\n-// Interceptor to add CSRF token automatically\r\n-axiosWithCsrf.interceptors.request.use(config => {\r\n-  const method = config.method?.toUpperCase();\r\n-\r\n-  if (['POST', 'PUT', 'PATCH', 'DELETE'].includes(method || '')) {\r\n-    const csrftoken = getCookie('csrftoken');\r\n-    if (csrftoken) {\r\n-      config.headers['X-CSRFToken'] = csrftoken;\r\n-    }\r\n-  }\r\n-\r\n-  return config;\r\n-});\r\n"
                },
                {
                    "date": 1749108773528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n \r\n // CSRF-safe axios instance\r\n export const axiosWithCsrf = axios.create({\r\n   // baseURL: 'http://localhost:8000',\r\n-  baseURL: BASE_URL || 'http://localhost:8000',\r\n+  baseURL: BASE_URL,\r\n   withCredentials: true,\r\n });\r\n \r\n // Interceptor to add CSRF token automatically\r\n"
                },
                {
                    "date": 1749108806024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n \r\n // CSRF-safe axios instance\r\n export const axiosWithCsrf = axios.create({\r\n   // baseURL: 'http://localhost:8000',\r\n-  baseURL: BASE_URL,\r\n+  baseURL: BASE_URL || 'http://localhost:8000',\r\n   withCredentials: true,\r\n });\r\n \r\n // Interceptor to add CSRF token automatically\r\n"
                },
                {
                    "date": 1749108853506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,32 @@\n+// lib/axiosWithCsrf.ts\r\n+import axios from 'axios';\r\n+\r\n+// Util to get csrf token from cookies\r\n+function getCookie(name: string): string | null {\r\n+  if (typeof document === 'undefined') return null;\r\n+  const cookie = document.cookie\r\n+    .split('; ')\r\n+    .find(row => row.startsWith(name + '='));\r\n+  return cookie ? decodeURIComponent(cookie.split('=')[1]) : null;\r\n+}\r\n+\r\n+// CSRF-safe axios instance\r\n+export const axiosWithCsrf = axios.create({\r\n+  // baseURL: 'http://localhost:8000',\r\n+  baseURL: BASE_URL || 'http://localhost:8000',\r\n+  withCredentials: true,\r\n+});\r\n+\r\n+// Interceptor to add CSRF token automatically\r\n+axiosWithCsrf.interceptors.request.use(config => {\r\n+  const method = config.method?.toUpperCase();\r\n+\r\n+  if (['POST', 'PUT', 'PATCH', 'DELETE'].includes(method || '')) {\r\n+    const csrftoken = getCookie('csrftoken');\r\n+    if (csrftoken) {\r\n+      config.headers['X-CSRFToken'] = csrftoken;\r\n+    }\r\n+  }\r\n+\r\n+  return config;\r\n+});\r\n"
                },
                {
                    "date": 1749108858655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,39 +1,9 @@\n // lib/axiosWithCsrf.ts\r\n import axios from 'axios';\r\n \r\n-// Util to get csrf token from cookies\r\n-function getCookie(name: string): string | null {\r\n-  if (typeof document === 'undefined') return null;\r\n-  const cookie = document.cookie\r\n-    .split('; ')\r\n-    .find(row => row.startsWith(name + '='));\r\n-  return cookie ? decodeURIComponent(cookie.split('=')[1]) : null;\r\n-}\r\n+const BASE_URL = process.env.NEXT_PUBLIC_API_URL;\r\n \r\n-// CSRF-safe axios instance\r\n-export const axiosWithCsrf = axios.create({\r\n-  // baseURL: 'http://localhost:8000',\r\n-  baseURL: BASE_URL || 'http://localhost:8000',\r\n-  withCredentials: true,\r\n-});\r\n-\r\n-// Interceptor to add CSRF token automatically\r\n-axiosWithCsrf.interceptors.request.use(config => {\r\n-  const method = config.method?.toUpperCase();\r\n-\r\n-  if (['POST', 'PUT', 'PATCH', 'DELETE'].includes(method || '')) {\r\n-    const csrftoken = getCookie('csrftoken');\r\n-    if (csrftoken) {\r\n-      config.headers['X-CSRFToken'] = csrftoken;\r\n-    }\r\n-  }\r\n-\r\n-  return config;\r\n-});\r\n-// lib/axiosWithCsrf.ts\r\n-import axios from 'axios';\r\n-\r\n // Util to get csrf token from cookies\r\n function getCookie(name: string): string | null {\r\n   if (typeof document === 'undefined') return null;\r\n   const cookie = document.cookie\r\n@@ -41,10 +11,8 @@\n     .find(row => row.startsWith(name + '='));\r\n   return cookie ? decodeURIComponent(cookie.split('=')[1]) : null;\r\n }\r\n \r\n-const BASE_URL = process.env.NEXT_PUBLIC_API_URL;\r\n-\r\n // CSRF-safe axios instance\r\n export const axiosWithCsrf = axios.create({\r\n   // baseURL: 'http://localhost:8000',\r\n   baseURL: BASE_URL || 'http://localhost:8000',\r\n"
                }
            ],
            "date": 1749064168322,
            "name": "Commit-0",
            "content": "// lib/axiosWithCsrf.ts\r\nimport axios from 'axios';\r\n\r\n// Util to get csrf token from cookies\r\nfunction getCookie(name: string): string | null {\r\n  if (typeof document === 'undefined') return null;\r\n  const cookie = document.cookie\r\n    .split('; ')\r\n    .find(row => row.startsWith(name + '='));\r\n  return cookie ? decodeURIComponent(cookie.split('=')[1]) : null;\r\n}\r\n\r\n// CSRF-safe axios instance\r\nexport const axiosWithCsrf = axios.create({\r\n  baseURL: 'http://localhost:8000',\r\n  withCredentials: true,\r\n});\r\n\r\n// Interceptor to add CSRF token automatically\r\naxiosWithCsrf.interceptors.request.use(config => {\r\n  const method = config.method?.toUpperCase();\r\n\r\n  if (['POST', 'PUT', 'PATCH', 'DELETE'].includes(method || '')) {\r\n    const csrftoken = getCookie('csrftoken');\r\n    if (csrftoken) {\r\n      config.headers['X-CSRFToken'] = csrftoken;\r\n    }\r\n  }\r\n\r\n  return config;\r\n});\r\n"
        }
    ]
}